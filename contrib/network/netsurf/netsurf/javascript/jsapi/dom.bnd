/* Binding to generate interfaces for the DOM IDL
 *
 * Copyright 2012 Vincent Sanders <vince@netsurf-browser.org>
 *
 * This file is part of NetSurf, http://www.netsurf-browser.org/
 *
 * Released under the terms of the MIT License,
 *         http://www.opensource.org/licenses/mit-license
 */

webidlfile "dom.idl";

preamble %{
#include "comment.h"
#include "text.h"
#include "htmlelement.h"
%}


prologue %{
/* CAUTION this expects all javascript Node objects private pointers
 * to have private->node in the same place.
 */
static struct dom_node *jsnode_to_domnode(JSContext *cx, JSObject *jsnode)
{
	struct jsclass_private *jsnode_private;

	if (jsnode == NULL) {
		return NULL;
	}

	/* element */
	jsnode_private = JS_GetInstancePrivate(cx,
					       jsnode,
					       &JSClass_HTMLElement,
					       NULL);
	if (jsnode_private != NULL) {
		return (struct dom_node *)jsnode_private->node;
	}

	/* text */
	jsnode_private = JS_GetInstancePrivate(cx,
					       jsnode,
					       &JSClass_Text,
					       NULL);
	if (jsnode_private != NULL) {
		return (struct dom_node *)jsnode_private->node;
	}

	/* comment */
	jsnode_private = JS_GetInstancePrivate(cx,
					       jsnode,
					       &JSClass_Comment,
					       NULL);
	if (jsnode_private != NULL) {
		return (struct dom_node *)jsnode_private->node;
	}

	return NULL;
}

%}

/* interface Node members */

getter nodeType %{
	dom_exception exc;
	dom_node_type node_type;

	exc = dom_node_get_node_type(private->node, &node_type);
	if (exc != DOM_NO_ERR) {
		return JS_FALSE;
	}
	jsret = node_type;
%}


getter nodeName %{
	dom_exception exc;
	dom_string *name;

	exc = dom_node_get_node_name(private->node, &name);
	if (exc != DOM_NO_ERR) {
		return JS_FALSE;
	}

	if (name != NULL) {
		jsret = JS_NewStringCopyN(cx,
					  dom_string_data(name),
					  dom_string_length(name));
		dom_string_unref(name);
	}
%}

getter nodeValue %{
	dom_exception exc;
	dom_string *value;

	exc = dom_node_get_node_value(private->node, &value);
	if (exc != DOM_NO_ERR) {
		return JS_FALSE;
	}

	if (value != NULL) {
		jsret = JS_NewStringCopyN(cx,
					  dom_string_data(value),
					  dom_string_length(value));
		dom_string_unref(value);
	}
%}

getter textContent %{
	dom_exception exc;
	dom_string *content;

	exc = dom_node_get_text_content(private->node, &content);
	if (exc != DOM_NO_ERR) {
		return JS_FALSE;
	}

	if (content != NULL) {
		jsret = JS_NewStringCopyN(cx, dom_string_data(content), dom_string_length(content));
		dom_string_unref(content);

	}
%}

/* interface Node { Node appendChild(Node node); } */
operation appendChild %{
	struct dom_node *domnode; /* dom node from js input node */
	struct dom_node *result = NULL;
	dom_exception exc;
	dom_node_type node_type;

	domnode = jsnode_to_domnode(cx, node);
	if (domnode == NULL) {
		/* should cause Error: NOT_FOUND_ERR: DOM Exception 8 */
		JSLOG("Error: NOT_FOUND_ERR: DOM Exception 8");
		return JS_FALSE;
	}

	JSLOG("appending js node %p (dom %p)", node, domnode);

	/* append the found element */
	exc = dom_node_append_child(private->node, domnode, &result);
	if (exc != DOM_NO_ERR) {
		JSLOG("Error: DOM Exception (libdom append child)");
		return JS_FALSE;
	}

	if (result != NULL) {
		exc = dom_node_get_node_type(result, &node_type);
		if (exc != DOM_NO_ERR) {
			return JS_FALSE;
		}
		switch (node_type) {
		case DOM_ELEMENT_NODE:
			jsret = jsapi_new_HTMLElement(cx, NULL, NULL, (dom_element *)result, private->htmlc);
			break;

		case DOM_TEXT_NODE:
			jsret = jsapi_new_Text(cx, NULL, NULL, (dom_text *)result, private->htmlc);
			break;

		default:
			JSLOG("Unsupported result node type %d", node_type);
		}

	} else {
		JSLOG("No result");
	}
%}
