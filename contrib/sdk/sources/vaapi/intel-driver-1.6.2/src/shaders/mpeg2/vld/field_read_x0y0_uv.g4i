/*
 * Copyright Â© 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Author:
 *    Zou Nan hai <nanhai.zou@intel.com>
 *    Yan Li <li.l.yan@intel.com>
 *    Liu Xi bin<xibin.liu@intel.com>
 */
/* GRF allocation:
   g1~g30: constant buffer
           g1~g2:intra IQ matrix
           g3~g4:non intra IQ matrix
           g5~g20:IDCT table
   g31:    thread payload 
   g58~g81:reference data
   g82:    thread payload backup
   g83~g106:IDCT data
   g32:   message descriptor for reading reference data   */

mov (1) g32.8<1>UD 0x7000FUD {align1}; //8*16
send (16) 0 g40.0<1>UW g32<8,8,1>UW read(surface_u, 2, 0, 2) mlen 1 rlen 4 {align1};//U
send (16) 0 g44.0<1>UW g32<8,8,1>UW read(surface_v, 2, 0, 2) mlen 1 rlen 4 {align1};//V
//U
mov (8) g74.0<1>UW  g40.0<8,8,1>UB {align1};
mov (8) g74.16<1>UW g41.0<8,8,1>UB {align1};
mov (8) g75.0<1>UW  g42.0<8,8,1>UB {align1};
mov (8) g75.16<1>UW g43.0<8,8,1>UB {align1};
//V
mov (8) g78.0<1>UW  g44.0<8,8,1>UB {align1};
mov (8) g78.16<1>UW g45.0<8,8,1>UB {align1};
mov (8) g79.0<1>UW  g46.0<8,8,1>UB {align1};
mov (8) g79.16<1>UW g47.0<8,8,1>UB {align1};

add (1) g32.4<1>UD g32.4<1,1,1>UD 8UD {align1};
send (16) 0 g40.0<1>UW g32<8,8,1>UW read(surface_u, 2, 0, 2) mlen 1 rlen 4 {align1};//U
send (16) 0 g44.0<1>UW g32<8,8,1>UW read(surface_v, 2, 0, 2) mlen 1 rlen 4 {align1};//V
//U
mov (8) g76.0<1>UW  g40.0<8,8,1>UB {align1};
mov (8) g76.16<1>UW g41.0<8,8,1>UB {align1};
mov (8) g77.0<1>UW  g42.0<8,8,1>UB {align1};
mov (8) g77.16<1>UW g43.0<8,8,1>UB {align1};
//V
mov (8) g80.0<1>UW  g44.0<8,8,1>UB {align1};
mov (8) g80.16<1>UW g45.0<8,8,1>UB {align1};
mov (8) g81.0<1>UW  g46.0<8,8,1>UB {align1};
mov (8) g81.16<1>UW g47.0<8,8,1>UB {align1};
