/*
 * Copyright Â© 2013 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * Authors:
 *    Haihao Xiang <haihao.xiang@intel.com>
 *
 */

define(`Cr',                    `src_sample_b')
define(`Cr_01',                 `src_sample_b_01')
define(`Cr_23',                 `src_sample_b_23')

define(`Y',                     `src_sample_r')
define(`Y_01',                  `src_sample_r_01')
define(`Y_23',                  `src_sample_r_23')

define(`Cb',                    `src_sample_g')
define(`Cb_01',                 `src_sample_g_01')
define(`Cb_23',                 `src_sample_g_23')

define(`Crn',                   `color_balance_g')
define(`Crn_01',                `color_balance_g_01')
define(`Crn_23',                `color_balance_g_23')

define(`Yn',                    `color_balance_r')
define(`Yn_01',                 `color_balance_r_01')
define(`Yn_23',                 `color_balance_r_23')

define(`Cbn',                   `color_balance_b')
define(`Cbn_01',                `color_balance_b_01')
define(`Cbn_23',                `color_balance_b_23')

cmp.e.f0.0 (1) null skip_color_balance 0x1uw {align1};
(f0.0) jmpi _DONE_COLOR_BALANCE;

/* Yout = (Yin - 16 / 255) * contrast + brightness + 16 / 255 */
add (16)    Yn<1>F      Y<8,8,1>F       -0.0627451F     { compr align1 };
mul (16)    Yn<1>F      Yn<8,8,1>F      contrast        { compr align1 };
add (16)    Yn<1>F      Yn<8,8,1>F      brightness      { compr align1 };
add (16)    Y<1>F       Yn<8,8,1>F      0.0627451F      { compr align1 };

/* Uout = (Uin - 128 / 255) * cos_c_s + (Vin - 128 / 255) * sin_c_s + 128 / 255 */
/* Vout = (Vin - 128 / 255) * cos_c_s - (Uin - 128 / 255) * sin_c_s + 128 / 255 */
add (16)    Cbn<1>F     Cb<8,8,1>F      -0.501961F      { compr align1 };
add (16)    Crn<1>F     Cr<8,8,1>F      -0.501961F      { compr align1 };

mov (16)    acc0<1>F    0.501961F                       { compr align1 };
mac (16)    acc0<1>F    Crn<8,8,1>F     sin_c_s         { compr align1 };
mac (16)    Cb<1>F      Cbn<8,8,1>F     cos_c_s         { compr align1 };

mul (1)     sin_c_s_t<1>F       sin_c_s         -1.0F   { align1};
mov (16)    acc0<1>F            0.501961F               { compr align1 };
mac (16)    acc0<1>F            Cbn<8,8,1>F     sin_c_s { compr align1 };
mac (16)    Cr<1>F              Crn<8,8,1>F     cos_c_s { compr align1 };

_DONE_COLOR_BALANCE:
