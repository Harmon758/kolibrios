/*
 * Copyright Â© 2006 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * Authors:
 *    Wang Zhenyu <zhenyu.z.wang@intel.com>
 *    Keith Packard <keithp@keithp.com>
 */

/* Sample the src surface in planar format */

include(`exa_wm.g4i')

/* prepare sampler read back gX register, which would be written back to output */

/* use simd16 sampler, param 0 is u, param 1 is v. */
/* 'payload' loading, assuming tex coord start from g4 */

and.nz (1) null interleaved_uv 0x01UW {align1};
(f0) jmpi INTERLEAVED_UV;

/* load r */
mov (1) g0.8<1>UD	0x0000e000UD { align1 mask_disable };

/* src_msg will be copied with g0, as it contains send desc */
/* emit sampler 'send' cmd */

/* sample U (Cr) */
send (16) src_msg_ind		/* msg reg index */
	src_sample_g<1>UW 	/* readback */
	g0<8,8,1>UW		/* copy to msg start reg*/
	sampler (3,2,F)		/* sampler message description, (binding_table,sampler_index,datatype)
				/* here(src->dst) we should use src_sampler and src_surface */
	mlen 5 rlen 2 { align1 };   /* required message len 5, readback len 8 */
	
/* sample V (Cb) */
send (16) src_msg_ind		/* msg reg index */
	src_sample_b<1>UW 	/* readback */
	g0<8,8,1>UW		/* copy to msg start reg*/
	sampler (5,4,F)		/* sampler message description, (binding_table,sampler_index,datatype)
				/* here(src->dst) we should use src_sampler and src_surface */
	mlen 5 rlen 2 { align1 };   /* required message len 5, readback len 8 */

jmpi SAMPLE_Y;

INTERLEAVED_UV:
/* load r */
mov (1) g0.8<1>UD	0x0000c000UD { align1 mask_disable };

/* sample UV (CrCb) */
send (16) src_msg_ind		/* msg reg index */
	src_sample_g<1>UW 	/* readback */
	g0<8,8,1>UW		/* copy to msg start reg*/
	sampler (3,2,F)		/* sampler message description, (binding_table,sampler_index,datatype)
				/* here(src->dst) we should use src_sampler and src_surface */
	mlen 5 rlen 4 { align1 };   /* required message len 5, readback len 8 */

/* load r */
mov (1) g0.8<1>UD	0x0000e000UD { align1 mask_disable };

SAMPLE_Y:
/* sample Y */
send (16) src_msg_ind		/* msg reg index */
	src_sample_r<1>UW 	/* readback */
	g0<8,8,1>UW		/* copy to msg start reg*/
	sampler (1,0,F)		/* sampler message description, (binding_table,sampler_index,datatype)
				/* here(src->dst) we should use src_sampler and src_surface */
	mlen 5 rlen 2 { align1 };   /* required message len 5, readback len 8 */
	
