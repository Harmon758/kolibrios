/*
 *  Copyright 2000-2011 Intel Corporation All Rights Reserved
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
//  127    // Total instruction count
//    1    // Total kernel count

.kernel PA_DNDI_422CP
.code



// FileName:	DNDI_PL_Core.asm
// Author:		Tatiya, Rupesh



// FileName:	DNDI_Core.asm 
// Author:		Vivek Kumar
// Description:	Tasks for DN+DI case (16x4 block)




// Module name: common.inc
//
// Common header file for all Video-Processing kernels
//

.default_execution_size (16)
.default_register_type  :ub

.reg_count_total        128
.reg_count_payload      7

//========== Common constants ==========


//========== Macros ==========


//Fast Jump, For more details see "Set_Layer_N.asm"


//========== Defines ====================

//========== Static Parameters (Common To All) ==========
//r1


//r2

                                    //  e.g.            byte0   byte1  byte2
                                    // YUYV               0       1      3
                                    // YVYU               0       3      1

//Color Pipe (IECP) parameters


//ByteCopy


//r4

                                    //  e.g.              byte0           byte1           byte2
                                    // YUYV                 0               1               3
                                    // YVYU                 0               3               1


//========== Inline parameters (Common To All) ===========


//============== Binding Index Table===========
//Common between DNDI and DNUV


//================= Common Message Descriptor =====
// Message descriptor for thread spawning
// Message Descriptors
//                = 000 0001 (min message len 1 ) 0,0000 (resp len 0   -add later)
//                  0000,0000,0000
//                  0001(Spawn a root thread),0001 (Root thread spawn thread)
//                = 0x02000011
// Thread Spawner Message Descriptor


// Message descriptor for atomic operation add
// Message Descriptors
//                = 000 0110 (min message len 6 ) 0,0000 (resp len 0   -add later)
//                  1(header present)001,10(typed atomic operation)0(return enabled)0(slot group, low 8 bits),0111 (AOP_Add)
//                  0000,0000 (Binding table index, added later)
//                = 0x02000011

// Atomic Operation Add Message Descriptor


// Message descriptor for dataport media write
        // Message Descriptors
                //                = 000 0001 (min message len 1 - add later) 00000 (resp len 0)
                //                  1 (header present 1) 0 1010 (media block write) 000000
                //                  00000000 (binding table index - set later)
                //                = 0x020A8000


// Message Length defines


// Response Length defines


// Block Width and Height Size defines


// Extended Message Descriptors


// Common message descriptors:


//===================== Math Function Control ===================================


//============ Message Registers ===============
                             // buf4 starts from r28


//#define mMSGHDR_EOT  r43    // Dummy Message Register for EOT


.declare    mubMSGPAYLOAD  Base=r30 ElementSize=1 SrcRegion=<16;16,1> Type=ub
.declare    muwMSGPAYLOAD  Base=r30 ElementSize=2 SrcRegion=<16;16,1> Type=uw
.declare    mudMSGPAYLOAD  Base=r30 ElementSize=4 SrcRegion=<8;8,1> Type=ud
.declare    mfMSGPAYLOAD   Base=r30 ElementSize=4 SrcRegion=<8;8,1> Type=f

//=================== End of thread instruction ===========================


//=====================Pointers Used=====================================


//=======================================================================


//r9-r17
// Define temp space for any usages


// Common Buffers


// temp space for rotation

.declare fROBUF		  Base=r9.0		ElementSize=4		SrcRegion=<8;8,1>		  DstRegion=<1>		Type=f

.declare udROBUF		Base=r9.0		ElementSize=4		SrcRegion=<8;8,1>		  DstRegion=<1>		Type=ud

.declare uwROBUF		Base=r9.0		ElementSize=2		SrcRegion=<16;16,1>		DstRegion=<1>		Type=uw

.declare ubROBUF		Base=r9.0		ElementSize=1		SrcRegion=<16;16,1>		DstRegion=<1>		Type=ub

.declare ub4ROBUF 	Base=r9.0		ElementSize=1		SrcRegion=<32;8,4>		DstRegion=<4>		Type=ub


// End of common.inc


// FileName:    DNDI.inc
// Author:      Vivek Kumar
// Description: Include file for DN, DI and DNDI
// Inputs:      DI_ENABLE, DN_ENABLE, DN_PLANAR, DN_PACKED




// End of common.inc


//Interface:
//Static Parameters:
//r1


//====================== Binding table (Explicit To DNDI)=========================================


.declare mudMSGHDR_DNDI     Base=r18      ElementSize=4    Type=ud
.declare mdMSGHDR_DNDI      Base=r18      ElementSize=4    Type=d
.declare mwMSGHDR_DNDI      Base=r18      ElementSize=2    Type=w


.declare mudMSGHDR_STMM     Base=r20      ElementSize=4    Type=ud


.declare mudMSGHDR_HIST     Base=r22      ElementSize=4    Type=ud


.declare mudMSGHDR_ENC_STATS Base=r24 ElementSize=4   Type=ud
.declare muwMSGHDR_ENC_STATS Base=r24 ElementSize=2   Type=uw
.declare mubMSGHDR_ENC_STATS Base=r24 ElementSize=1   Type=ub


.declare mudMSGHDR_DN_OUT   Base=r31.0      ElementSize=4  Type=ud
.declare mdMSGHDR_DN_OUT    Base=r31.0      ElementSize=4  Type=d
.declare mubMSGHDR_DN_OUT   Base=r31.0      ElementSize=1  Type=ub


.declare mudMSGHDR_UVCOPY   Base=r36      ElementSize=4  Type=ud
.declare mdMSGHDR_UVCOPY    Base=r36      ElementSize=4  Type=d
.declare mudMSGHDR_UCOPY    Base=r36       ElementSize=4  Type=ud
.declare mudMSGHDR_VCOPY    Base=r38       ElementSize=4  Type=ud


.declare mudMSGHDR_DI_OUT1  Base=r18.0      ElementSize=4     Type=ud
.declare mubMSGHDR_DI_OUT1  Base=r18.0      ElementSize=1     Type=ub


.declare mudMSGHDR_DI_OUT2  Base=r23.0      ElementSize=4     Type=ud
.declare mubMSGHDR_DI_OUT2  Base=r23.0      ElementSize=1     Type=ub

//r45
//Use r45 as message header, so no need to "mov" the data.

.declare mudDN_Y_OUT        Base=r45.0 ElementSize=4 SrcRegion=<8;8,1>   DstRegion=<1> Type=ud

// Message response (Denoised & DI-ed pixels & statistics); Use buffer 5
.declare udDNDI_RESP        Base=r46.0 ElementSize=4 SrcRegion=<8;8,1>   DstRegion=<1> Type=ud
.declare uwDNDI_RESP        Base=r46.0 ElementSize=2 SrcRegion=<16;16,1> DstRegion=<1> Type=uw
.declare ubDNDI_RESP        Base=r46.0 ElementSize=1 SrcRegion=<16;16,1> DstRegion=<1> Type=ub

// Message response (UV Copy); Use buffer 5
.declare udDNDI_UV_RESP     Base=r58.0 ElementSize=4 SrcRegion=<8;8,1>  DstRegion=<1> Type=ud
.declare ubDNDI_UV_RESP     Base=r58.0 ElementSize=1 SrcRegion=<16;16,1>    DstRegion=<1> Type=ub

//Temp GRFs: For 42X to 422 Conversion
.declare uwDNDI_UVCOPY_TEMP Base=r10.0 ElementSize=2 SrcRegion=<16;16,1>    DstRegion=<1> Type=uw       //8 GRFs
.declare ubDNDI_UVCOPY_TEMP Base=r10.0 ElementSize=1 SrcRegion=<16;16,1>    DstRegion=<1> Type=ub       //8 GRFs
//---------------------------------------------------------------------------
// Message descriptors
//---------------------------------------------------------------------------
// Extended message descriptor
    // Message descriptor   for sampler read
    //                    = 000 0010 (message len 2) 00000 (resp len - set later, 12 or 5 or 11)
    //                      1 (header present 1) 0 11 (SIMD32/64 mode)
    //                      1000 (message type) 0000 (DI state index)
    //                      00000000 (binding table index - set later)
    //                    = 0x040b8000


// Attention: The Message Length is The Number of GRFs with Data Only, without the Header


//---------------------------------------------------------------------------
// VDI Return Data format
//---------------------------------------------------------------------------
// Defines for DI enabled


// Defines for DI disabled



// FileName:	DNDI_Command.asm 
// Author:		Vivek Kumar
// Description:	Sends a message to the VDI to process one DN (16x8) or DNDI (16x4) block

// Prepare the DNDI send command
mov (8)		mudMSGHDR_DNDI(0)<1>			r0.0<8;8,1>:ud					// message header
mov (1)		mwMSGHDR_DNDI(1,4)<1>			r7.0<0;1,0>:w		{ NoDDClr }		// horizontal origin	// Do we need to add offset here? -vK
mov (1)		mwMSGHDR_DNDI(1,12)<1>			r7.1<0;1,0>:w		{ NoDDChk }		// vertical origin		// Can these 2 be combined? - vK

send (8)	udDNDI_RESP(0)<1>	r18	0x2	0x4CE8003:ud

// On Gen6, with VDI walker, use the XY pair returned rather than programmed above
// VDI_RETURNED_XY is ordered XY in case of walker enables and the same as programmed in case of walker disabled
mov (2) 	r7.0<1>:w     uwDNDI_RESP(9,14)<2;2,1>	// horizontal/Vertial origin in W.14 and W.15    



// FileName:	DI_STMM_Save.asm 
// Author:		Vivek Kumar
// Description:	Saves DI STMM Data to statistics surface in case of DI enabled (for 16x4 block)

// Write STMM to memory
mov (8)     mudMSGHDR_STMM(0)<1>	r0.0<8;8,1>:ud               							// message header   
mov (8)     mudMSGHDR_STMM(1)<1>   	udDNDI_RESP(8,0)         					// Move STMM to MRF 

shr (1)     mudMSGHDR_STMM(0,0)<1>	r7.0<0;1,0>:w            1:w     { NoDDClr } 		// X origin / 2
mov (1)     mudMSGHDR_STMM(0,1)<1>	r7.1<0;1,0>:w                    { NoDDClr, NoDDChk }  	// Y origin
mov (1)     mudMSGHDR_STMM(0,2)<1>	0x30007:ud           { NoDDChk } 		// block width and height (8x4)

send (8)	null<1>:d	r20	0x5		0x40A8021:ud      



// FileName:	DN_Hist_Save.asm 
// Author:		Vivek Kumar
// Description:	Saves DN history data to statistics surface

// Write denoise history to memory
mov (8)    r27<1>:ud				r0.0<8;8,1>:ud                   			// message header   

	mov (1)    mudMSGHDR_HIST(1)<1>		udDNDI_RESP(9,0)<0;1,0>		// Move denoise history to MRF (4x1)


shr (2)    r27.0<1>:ud		r7.0<2;2,1>:w				2:w                                 	// X,Y origin / 4
add (1)    r27.0<1>:ud		r27.0<0;1,0>:ud			r1.12<0;1,0>:uw		{ NoDDClr }  	// Add pitch to X origin
mov (1)    r27.2<1>:ud		0x3:ud									{ NoDDChk }  	// block width and height

mov (8)		mudMSGHDR_HIST(0)<1>		r27.0<8;8,1>:ud
send (8)	null<1>:d	r22	0x5		0x40A8021:ud



// FileName:	DNDI_Enc_Stats_Save.asm
// Author:		Vivek Kumar
// Description:	Saves Encoder Statistics data to statistics surface in case of DI enabled (for 16x4 block)

// Write encoder statistics to memory
//Currently enable this only on Gen6 validation
mov (8)		mudMSGHDR_ENC_STATS(1)<1>	0x0:ud						// Init payload MRF
mov (8)		mudMSGHDR_ENC_STATS(0)<1>	r0.0<8;8,1>:ud				// message header

shr (1)		mudMSGHDR_ENC_STATS(0,0)<1>		r7.0<0;1,0>:w            	1:w  	{ NoDDClr }			//enable the flag after testing on si           			{ NoDDClr }	// X origin / 2
mul (1)		acc0.1<1>:ud					r7.1<0;1,0>:w				3:w																							// Y origin * 3
shr (1)		mudMSGHDR_ENC_STATS(0,1)<1>		acc0.1<0;1,0>:ud			2:w		{ NoDDClr, NoDDChk }		//enable the flag after testing on si			   { NoDDClr, NoDDChk } // Y origin * 3/4
mov (1)		mudMSGHDR_ENC_STATS(0,2)<1>		0x20007:ud				{ NoDDChk }			//enable the flag after testing on si						{ NoDDChk } // block width and height (8x3)
add (2)		mudMSGHDR_ENC_STATS(0,0)<1>		mudMSGHDR_ENC_STATS(0,0)<2;2,1>       	r1.12<2;2,1>:uw					// Add pitch to X,Y origin


	//Data block for Encoder Statistics
	//----------------------------------------------------
	//|  0  |   1  |   2   |  3  |  4  |  5  |  6  |  7  | Bytes
	//----------------------------------------------------
	//| BNE | MCNT | FCNT | TCNT |  X  |  X  |  X  |  X  |
	//----------------------------------------------------
	//|   DcTpT    |     SVCM    |   DcBpT   |   DcTpB   |
	//----------------------------------------------------
	//|   SHCM     |     STAD    |   DcTcB   |   DcBpB   |
	//----------------------------------------------------
	mov (1)		mudMSGHDR_ENC_STATS(1,0)<1>		udDNDI_RESP(9,1)<0;1,0>    		{ NoDDClr }			// Move encoder statistics to MRF
	mov (2)		mudMSGHDR_ENC_STATS(1,3)<2>		udDNDI_RESP(9,3)<2;2,1>    		{ NoDDClr, NoDDChk }		// Move encoder statistics to MRF
	mov (2)		mudMSGHDR_ENC_STATS(1,2)<2>		udDNDI_RESP(9,5)<2;2,1>    		{ NoDDChk }			// Move encoder statistics to MRF


send (8)   null<1>:d    r24    0x5    0x40A8021:ud



// FileName:	DN_Save_PA_16x4.asm
// Author:		Vivek Kumar
// Description:	Save one 16x4 blocks of DN output in Packed format for reference


 // check top/bottom field first
cmp.e.f0.0 (1)  null<1>:w               r1.28<0;1,0>:ub     1:w

add (4)		a0.4<1>:uw   r4.0<4;4,1>:ub   1024:w    // Initial Y,U,V offset in YUV422 block; it starts at m14

mov (8)		mudMSGHDR_DN_OUT(0)<1>		r0<8;8,1>:ud            			// message header
shl (1)     mdMSGHDR_DN_OUT(0,0)<1>		r7.0<0;1,0>:w     1:w  		{ NoDDClr }            // X origin * 2 (422 output)
mov (1)     mdMSGHDR_DN_OUT(0,1)<1>		r7.1<0;1,0>:w          		{ NoDDClr, NoDDChk }   // Y origin
mov (1)     mudMSGHDR_DN_OUT(0,2)<1>	0x3001F:ud	{ NoDDChk }            // block width and height (32x8)

(f0.0) jmpi (1) TOP_FIELD_FIRST

BOTTOM_FIELD_FIRST:
	mov (16)    r[a0.4,  0]<2>:ub     ubDNDI_RESP(10,0) 	{ NoDDClr }	// 2nd field luma from current frame (line 0,2)
	mov (16)    r[a0.4,  32]<2>:ub   ubDNDI_RESP(4,16) 		{ NoDDClr }	// 1st field luma from current frame (line 1,3)
	mov (16)    r[a0.4,  64]<2>:ub     ubDNDI_RESP(10,16) 	{ NoDDClr }	// 2nd field luma from current frame (line 0,2)
	mov (16)    r[a0.4,  96]<2>:ub   ubDNDI_RESP(5,16) 		{ NoDDClr }	// 1st field luma from current frame (line 1,3)
	mov (8)     r[a0.5,  0]<4>:ub     ubDNDI_RESP(11,1)<16;8,2> { NoDDClr, NoDDChk }	// 2nd field U from current frame (line 0,2)
	mov (8)     r[a0.5,  32]<4>:ub   ubDNDI_RESP(6,17)<16;8,2> 	{ NoDDClr, NoDDChk }	// 1st field U from current frame (line 1,3)
	mov (8)     r[a0.5,  64]<4>:ub     ubDNDI_RESP(11,17)<16;8,2> { NoDDClr, NoDDChk }	// 2nd field U from current frame (line 0,2)
	mov (8)     r[a0.5,  96]<4>:ub   ubDNDI_RESP(7,17)<16;8,2> 	{ NoDDClr, NoDDChk }	// 1st field U from current frame (line 1,3)
	mov (8)     r[a0.6,  0]<4>:ub     ubDNDI_RESP(11,0)<16;8,2> 	{ NoDDChk }		// 2nd field V from current frame (line 0,2)
	mov (8)     r[a0.6,  32]<4>:ub   ubDNDI_RESP(6,16)<16;8,2> 		{ NoDDChk }		// 1st field U from current frame (line 1,3)
	mov (8)     r[a0.6,  64]<4>:ub     ubDNDI_RESP(11,16)<16;8,2> 	{ NoDDChk }		// 2nd field V from current frame (line 0,2)
	mov (8)     r[a0.6,  96]<4>:ub   ubDNDI_RESP(7,16)<16;8,2> 		{ NoDDChk }		// 1st field U from current frame (line 1,3)
jmpi (1) SAVE_DN_CURR

TOP_FIELD_FIRST:
	mov (16)    r[a0.4,  0]<2>:ub       ubDNDI_RESP(4,0) 		{ NoDDClr }	// 1st field luma from current frame (line 0,2)
	mov (16)    r[a0.4,  32]<2>:ub     ubDNDI_RESP(10,0) 	{ NoDDClr }	// 2nd field luma from current frame (line 1,3)
	mov (16)    r[a0.4,  64]<2>:ub       ubDNDI_RESP(5,0) 		{ NoDDClr }	// 1st field luma from current frame (line 0,2)
	mov (16)    r[a0.4,  96]<2>:ub     ubDNDI_RESP(10,16) 	{ NoDDClr }	// 2nd field luma from current frame (line 1,3)
	mov (8)     r[a0.5,  0]<4>:ub       ubDNDI_RESP(6,1)<16;8,2> 			{ NoDDClr, NoDDChk }	// 1st field U from current frame (line 0,2)
	mov (8)     r[a0.5,  32]<4>:ub     ubDNDI_RESP(11,1)<16;8,2> 	{ NoDDClr, NoDDChk }	// 2nd field U from current frame (line 1,3)
	mov (8)     r[a0.5,  64]<4>:ub       ubDNDI_RESP(7,1)<16;8,2> 			{ NoDDClr, NoDDChk }	// 1st field U from current frame (line 0,2)
	mov (8)     r[a0.5,  96]<4>:ub     ubDNDI_RESP(11,17)<16;8,2> 	{ NoDDClr, NoDDChk }	// 2nd field U from current frame (line 1,3)
	mov (8)     r[a0.6,  0]<4>:ub       ubDNDI_RESP(6,0)<16;8,2> 			{ NoDDChk }	// 1st field V from current frame (line 0,2)
	mov (8)     r[a0.6,  32]<4>:ub     ubDNDI_RESP(11,0)<16;8,2> 	{ NoDDChk }	// 2nd field V from current frame (line 1,3)
	mov (8)     r[a0.6,  64]<4>:ub       ubDNDI_RESP(7,0)<16;8,2> 			{ NoDDChk }	// 1st field V from current frame (line 0,2)
	mov (8)     r[a0.6,  96]<4>:ub     ubDNDI_RESP(11,16)<16;8,2> 	{ NoDDChk }	// 2nd field V from current frame (line 1,3)

SAVE_DN_CURR:
//send out data through data port
send (8)    null<1>:d    r31.0		0x5    0xA0A8018:ud



// FileName:    DI_Save_422CP_16x4.asm
// Author:      Vivek Kumar
// Description: Save two 16x4 blocks of DI output in 422 format to Color Pipe (IECP)


.declare mubMSGHDR_DI_OUT1_1  Base=r18.0      ElementSize=1  Type=ub


.declare mubMSGHDR_DI_OUT1_2  Base=r21.0      ElementSize=1  Type=ub


.declare mubMSGHDR_DI_OUT2_1  Base=r24.0      ElementSize=1  Type=ub


.declare mubMSGHDR_DI_OUT2_2  Base=r27.0      ElementSize=1  Type=ub


mov (8) r27.0<1>:ud     r0.0<8;8,1>:ud
shl (1) r27.0<1>:ud     r7.0<0;1,0>:w            1:w  { NoDDClr }          // H. block origin need to be doubled
mov (1) r27.1<1>:ud     r7.1<0;1,0>:w                 { NoDDClr, NoDDChk }       // Block origin
mov (1) r27.2<1>:ud     0x3000F:ud        { NoDDClr, NoDDChk }       // Block width and height (16x8)

//M0.3  - 0 - CP Enable, 1 - Area of Interest, 3:2 Message Format(TBD), 4:3 - Ignored, 31:5 CP state pointer
//Compose area-of-interest bit + color pipe state pointer
or (1)  r27.3<1>:ud     r2.4<0;1,0>:ud     r7.26<0;1,0>:b     { NoDDChk }

//prepare the message headers
mov (8) r18.0<1>:ud       r27<8;8,1>:ud
mov (8) r24.0<1>:ud       r27<8;8,1>:ud


// Pack 2nd field Y; First 8x4 block
	mov (8)		mubMSGHDR_DI_OUT1_1(1)<2>			ubDNDI_RESP(0,0)<8;8,1>			{ NoDDClr } 	// copy line of Y directly to memory as optimization
	mov (8)		mubMSGHDR_DI_OUT1_1(1,16)<2>		ubDNDI_RESP(0,16)<8;8,1>			{ NoDDClr, NoDDChk } 	// copy line of Y directly to memory as optimization
	mov (8)		mubMSGHDR_DI_OUT1_1(2)<2>			ubDNDI_RESP(0,32)<8;8,1>			{ NoDDClr } 	// copy line of Y directly to memory as optimization
	mov (8)		mubMSGHDR_DI_OUT1_1(2,16)<2>		ubDNDI_RESP(0,48)<8;8,1>			{ NoDDClr, NoDDChk } 	// copy line of Y directly to memory as optimization

// Pack 2nd field U, V; First 8x4 block
	mov (4)     mubMSGHDR_DI_OUT1_1(1,1)<4>   		ubDNDI_RESP(2,1)<8;4,2>		{ NoDDClr, NoDDChk } 	// copy line of U directly to memory as optimization
	mov (4)     mubMSGHDR_DI_OUT1_1(1,17)<4>   	ubDNDI_RESP(2,17)<8;4,2>		{ NoDDClr, NoDDChk } 	// copy line of U directly to memory as optimization

	mov (4)     mubMSGHDR_DI_OUT1_1(1,3)<4>	  	ubDNDI_RESP(2,0)<8;4,2>			{ NoDDChk }    	// copy line of V directly to memory as optimization
	mov (4)     mubMSGHDR_DI_OUT1_1(1,19)<4>   	ubDNDI_RESP(2,16)<8;4,2>		{ NoDDChk }    	// copy line of V directly to memory as optimization
	mov (4)     mubMSGHDR_DI_OUT1_1(2,1)<4>   		ubDNDI_RESP(2,33)<8;4,2>		{ NoDDClr, NoDDChk } 	// copy line of U directly to memory as optimization
	mov (4)     mubMSGHDR_DI_OUT1_1(2,17)<4>   	ubDNDI_RESP(2,49)<8;4,2>		{ NoDDClr, NoDDChk } 	// copy line of U directly to memory as optimization

	mov (4)     mubMSGHDR_DI_OUT1_1(2,3)<4>	  	ubDNDI_RESP(2,32)<8;4,2>			{ NoDDChk }    	// copy line of V directly to memory as optimization
	mov (4)     mubMSGHDR_DI_OUT1_1(2,19)<4>   	ubDNDI_RESP(2,48)<8;4,2>		{ NoDDChk }    	// copy line of V directly to memory as optimization


// Pack 2nd field Y; Second 8x4 block
mov	(8)	r21.0<1>:ud		r18.0<8;8,1>:ud
add	(1)	r21.0<1>:ud		r21.0<0;1,0>:w		0x10:w

	mov (8)		mubMSGHDR_DI_OUT1_2(1)<2>			ubDNDI_RESP(0,8)<8;8,1>			{ NoDDClr } 	// copy line of Y directly to memory as optimization
	mov (8)		mubMSGHDR_DI_OUT1_2(1,16)<2>		ubDNDI_RESP(0,24)<8;8,1>		{ NoDDClr, NoDDChk } 	// copy line of Y directly to memory as optimization
	mov (8)		mubMSGHDR_DI_OUT1_2(2)<2>			ubDNDI_RESP(0,40)<8;8,1>			{ NoDDClr } 	// copy line of Y directly to memory as optimization
	mov (8)		mubMSGHDR_DI_OUT1_2(2,16)<2>		ubDNDI_RESP(0,56)<8;8,1>		{ NoDDClr, NoDDChk } 	// copy line of Y directly to memory as optimization

// Pack 2nd field U, V; Second 8x4 block
	mov (4)     mubMSGHDR_DI_OUT1_2(1,1)<4>   		ubDNDI_RESP(2,9)<8;4,2>		{ NoDDClr, NoDDChk } 	// copy line of U directly to memory as optimization
	mov (4)     mubMSGHDR_DI_OUT1_2(1,17)<4>		ubDNDI_RESP(2,25)<8;4,2>	{ NoDDClr, NoDDChk } 	// copy line of U directly to memory as optimization

	mov (4)     mubMSGHDR_DI_OUT1_2(1,3)<4>   		ubDNDI_RESP(2,8)<8;4,2>		{ NoDDChk }    	// copy line of V directly to memory as optimization
	mov (4)     mubMSGHDR_DI_OUT1_2(1,19)<4>		ubDNDI_RESP(2,24)<8;4,2>		{ NoDDChk }    	// copy line of V directly to memory as optimization
	mov (4)     mubMSGHDR_DI_OUT1_2(2,1)<4>   		ubDNDI_RESP(2,41)<8;4,2>		{ NoDDClr, NoDDChk } 	// copy line of U directly to memory as optimization
	mov (4)     mubMSGHDR_DI_OUT1_2(2,17)<4>		ubDNDI_RESP(2,57)<8;4,2>	{ NoDDClr, NoDDChk } 	// copy line of U directly to memory as optimization

	mov (4)     mubMSGHDR_DI_OUT1_2(2,3)<4>   		ubDNDI_RESP(2,40)<8;4,2>		{ NoDDChk }    	// copy line of V directly to memory as optimization
	mov (4)     mubMSGHDR_DI_OUT1_2(2,19)<4>		ubDNDI_RESP(2,56)<8;4,2>		{ NoDDChk }    	// copy line of V directly to memory as optimization

send (8)    null<1>:d    r18.0   0x5     0x60A801B:ud
send (8)    null<1>:d    r21.0   0x5     0x60A801B:ud

// Pack 1st field Y; 1st 8x4 block
	mov (8)		mubMSGHDR_DI_OUT2_1(1)<2>			ubDNDI_RESP(4,0)<8;8,1>			{ NoDDClr } 	// copy line of Y directly to memory as optimization
	mov (8)		mubMSGHDR_DI_OUT2_1(1,16)<2>		ubDNDI_RESP(4,16)<8;8,1>			{ NoDDClr, NoDDChk } 	// copy line of Y directly to memory as optimization
	mov (8)		mubMSGHDR_DI_OUT2_1(2)<2>			ubDNDI_RESP(4,32)<8;8,1>			{ NoDDClr } 	// copy line of Y directly to memory as optimization
	mov (8)		mubMSGHDR_DI_OUT2_1(2,16)<2>		ubDNDI_RESP(4,48)<8;8,1>			{ NoDDClr, NoDDChk } 	// copy line of Y directly to memory as optimization

// Pack 1st field U,V; 1st 8x4 block
	mov (4)     mubMSGHDR_DI_OUT2_1(1,1)<4>   		ubDNDI_RESP(6,1)<8;4,2>		{ NoDDClr, NoDDChk } 	// copy line of U directly to memory as optimization
	mov (4)     mubMSGHDR_DI_OUT2_1(1,17)<4>   	ubDNDI_RESP(6,17)<8;4,2>		{ NoDDClr, NoDDChk } 	// copy line of U directly to memory as optimization

	mov (4)     mubMSGHDR_DI_OUT2_1(1,3)<4>	  	ubDNDI_RESP(6,0)<8;4,2>		    { NoDDChk }    	// copy line of V directly to memory as optimization
	mov (4)     mubMSGHDR_DI_OUT2_1(1,19)<4>   	ubDNDI_RESP(6,16)<8;4,2>	    { NoDDChk }    	// copy line of V directly to memory as optimization
	mov (4)     mubMSGHDR_DI_OUT2_1(2,1)<4>   		ubDNDI_RESP(6,33)<8;4,2>		{ NoDDClr, NoDDChk } 	// copy line of U directly to memory as optimization
	mov (4)     mubMSGHDR_DI_OUT2_1(2,17)<4>   	ubDNDI_RESP(6,49)<8;4,2>		{ NoDDClr, NoDDChk } 	// copy line of U directly to memory as optimization

	mov (4)     mubMSGHDR_DI_OUT2_1(2,3)<4>	  	ubDNDI_RESP(6,32)<8;4,2>		    { NoDDChk }    	// copy line of V directly to memory as optimization
	mov (4)     mubMSGHDR_DI_OUT2_1(2,19)<4>   	ubDNDI_RESP(6,48)<8;4,2>	    { NoDDChk }    	// copy line of V directly to memory as optimization

// Pack 1st field Y; 2nd 8x4 block
mov	(8)	r27.0<1>:ud		r24.0<8;8,1>:ud
add	(1)	r27.0<1>:ud		r27.0<0;1,0>:w		0x10:w

	mov (8)		mubMSGHDR_DI_OUT2_2(1)<2>			ubDNDI_RESP(4,8)<8;8,1>			{ NoDDClr } 	// copy line of Y directly to memory as optimization
	mov (8)		mubMSGHDR_DI_OUT2_2(1,16)<2>		ubDNDI_RESP(4,24)<8;8,1>		{ NoDDClr, NoDDChk } 	// copy line of Y directly to memory as optimization
	mov (8)		mubMSGHDR_DI_OUT2_2(2)<2>			ubDNDI_RESP(4,40)<8;8,1>			{ NoDDClr } 	// copy line of Y directly to memory as optimization
	mov (8)		mubMSGHDR_DI_OUT2_2(2,16)<2>		ubDNDI_RESP(4,56)<8;8,1>		{ NoDDClr, NoDDChk } 	// copy line of Y directly to memory as optimization

// Pack 1st field U, V; 2nd 8x4 block
	mov (4)     mubMSGHDR_DI_OUT2_2(1,1)<4>   		ubDNDI_RESP(6,9)<8;4,2>		{ NoDDClr, NoDDChk } 	// copy line of U directly to memory as optimization
	mov (4)     mubMSGHDR_DI_OUT2_2(1,17)<4>		ubDNDI_RESP(6,25)<8;4,2>	{ NoDDClr, NoDDChk } 	// copy line of U directly to memory as optimization

	mov (4)     mubMSGHDR_DI_OUT2_2(1,3)<4>   		ubDNDI_RESP(6,8)<8;4,2>		{ NoDDChk }    	// copy line of V directly to memory as optimization
	mov (4)     mubMSGHDR_DI_OUT2_2(1,19)<4>		ubDNDI_RESP(6,24)<8;4,2>		{ NoDDChk }    	// copy line of V directly to memory as optimization
	mov (4)     mubMSGHDR_DI_OUT2_2(2,1)<4>   		ubDNDI_RESP(6,41)<8;4,2>		{ NoDDClr, NoDDChk } 	// copy line of U directly to memory as optimization
	mov (4)     mubMSGHDR_DI_OUT2_2(2,17)<4>		ubDNDI_RESP(6,57)<8;4,2>	{ NoDDClr, NoDDChk } 	// copy line of U directly to memory as optimization

	mov (4)     mubMSGHDR_DI_OUT2_2(2,3)<4>   		ubDNDI_RESP(6,40)<8;4,2>		{ NoDDChk }    	// copy line of V directly to memory as optimization
	mov (4)     mubMSGHDR_DI_OUT2_2(2,19)<4>		ubDNDI_RESP(6,56)<8;4,2>		{ NoDDChk }    	// copy line of V directly to memory as optimization

send (8)    null<1>:d    r24.0     0x5     0x60A801E:ud
send (8)    null<1>:d    r27.0     0x5     0x60A801E:ud



//End of Thread message

mov (8) r127<1>:ud r0.0<8;8,1>:ud 
 send (1) null<1>:d r127 0x27 0x02000010


.end_code 
.end_kernel
