/* This file is automatically generated by mapi_abi.py.  Do not modify. */

#ifndef _GLAPI_TMP_H_
#define _GLAPI_TMP_H_
typedef int GLclampx;
#endif /* _GLAPI_TMP_H_ */

#ifdef MAPI_TMP_DEFINES
#define GL_GLEXT_PROTOTYPES
#include "GL/gl.h"
#include "GL/glext.h"

void APIENTRY gl_dispatch_stub_0(GLuint list, GLenum mode);
void APIENTRY gl_dispatch_stub_1(void);
void APIENTRY gl_dispatch_stub_2(GLuint list);
void APIENTRY gl_dispatch_stub_3(GLsizei n, GLenum type, const GLvoid *lists);
void APIENTRY gl_dispatch_stub_4(GLuint list, GLsizei range);
GLuint APIENTRY gl_dispatch_stub_5(GLsizei range);
void APIENTRY gl_dispatch_stub_6(GLuint base);
void APIENTRY gl_dispatch_stub_7(GLenum mode);
void APIENTRY gl_dispatch_stub_8(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
void APIENTRY gl_dispatch_stub_9(GLbyte red, GLbyte green, GLbyte blue);
void APIENTRY gl_dispatch_stub_10(const GLbyte *v);
void APIENTRY gl_dispatch_stub_11(GLdouble red, GLdouble green, GLdouble blue);
void APIENTRY gl_dispatch_stub_12(const GLdouble *v);
void APIENTRY gl_dispatch_stub_13(GLfloat red, GLfloat green, GLfloat blue);
void APIENTRY gl_dispatch_stub_14(const GLfloat *v);
void APIENTRY gl_dispatch_stub_15(GLint red, GLint green, GLint blue);
void APIENTRY gl_dispatch_stub_16(const GLint *v);
void APIENTRY gl_dispatch_stub_17(GLshort red, GLshort green, GLshort blue);
void APIENTRY gl_dispatch_stub_18(const GLshort *v);
void APIENTRY gl_dispatch_stub_19(GLubyte red, GLubyte green, GLubyte blue);
void APIENTRY gl_dispatch_stub_20(const GLubyte *v);
void APIENTRY gl_dispatch_stub_21(GLuint red, GLuint green, GLuint blue);
void APIENTRY gl_dispatch_stub_22(const GLuint *v);
void APIENTRY gl_dispatch_stub_23(GLushort red, GLushort green, GLushort blue);
void APIENTRY gl_dispatch_stub_24(const GLushort *v);
void APIENTRY gl_dispatch_stub_25(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
void APIENTRY gl_dispatch_stub_26(const GLbyte *v);
void APIENTRY gl_dispatch_stub_27(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
void APIENTRY gl_dispatch_stub_28(const GLdouble *v);
void APIENTRY gl_dispatch_stub_29(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void APIENTRY gl_dispatch_stub_30(const GLfloat *v);
void APIENTRY gl_dispatch_stub_31(GLint red, GLint green, GLint blue, GLint alpha);
void APIENTRY gl_dispatch_stub_32(const GLint *v);
void APIENTRY gl_dispatch_stub_33(GLshort red, GLshort green, GLshort blue, GLshort alpha);
void APIENTRY gl_dispatch_stub_34(const GLshort *v);
void APIENTRY gl_dispatch_stub_35(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
void APIENTRY gl_dispatch_stub_36(const GLubyte *v);
void APIENTRY gl_dispatch_stub_37(GLuint red, GLuint green, GLuint blue, GLuint alpha);
void APIENTRY gl_dispatch_stub_38(const GLuint *v);
void APIENTRY gl_dispatch_stub_39(GLushort red, GLushort green, GLushort blue, GLushort alpha);
void APIENTRY gl_dispatch_stub_40(const GLushort *v);
void APIENTRY gl_dispatch_stub_41(GLboolean flag);
void APIENTRY gl_dispatch_stub_42(const GLboolean *flag);
void APIENTRY gl_dispatch_stub_43(void);
void APIENTRY gl_dispatch_stub_44(GLdouble c);
void APIENTRY gl_dispatch_stub_45(const GLdouble *c);
void APIENTRY gl_dispatch_stub_46(GLfloat c);
void APIENTRY gl_dispatch_stub_47(const GLfloat *c);
void APIENTRY gl_dispatch_stub_48(GLint c);
void APIENTRY gl_dispatch_stub_49(const GLint *c);
void APIENTRY gl_dispatch_stub_50(GLshort c);
void APIENTRY gl_dispatch_stub_51(const GLshort *c);
void APIENTRY gl_dispatch_stub_52(GLbyte nx, GLbyte ny, GLbyte nz);
void APIENTRY gl_dispatch_stub_53(const GLbyte *v);
void APIENTRY gl_dispatch_stub_54(GLdouble nx, GLdouble ny, GLdouble nz);
void APIENTRY gl_dispatch_stub_55(const GLdouble *v);
void APIENTRY gl_dispatch_stub_56(GLfloat nx, GLfloat ny, GLfloat nz);
void APIENTRY gl_dispatch_stub_57(const GLfloat *v);
void APIENTRY gl_dispatch_stub_58(GLint nx, GLint ny, GLint nz);
void APIENTRY gl_dispatch_stub_59(const GLint *v);
void APIENTRY gl_dispatch_stub_60(GLshort nx, GLshort ny, GLshort nz);
void APIENTRY gl_dispatch_stub_61(const GLshort *v);
void APIENTRY gl_dispatch_stub_62(GLdouble x, GLdouble y);
void APIENTRY gl_dispatch_stub_63(const GLdouble *v);
void APIENTRY gl_dispatch_stub_64(GLfloat x, GLfloat y);
void APIENTRY gl_dispatch_stub_65(const GLfloat *v);
void APIENTRY gl_dispatch_stub_66(GLint x, GLint y);
void APIENTRY gl_dispatch_stub_67(const GLint *v);
void APIENTRY gl_dispatch_stub_68(GLshort x, GLshort y);
void APIENTRY gl_dispatch_stub_69(const GLshort *v);
void APIENTRY gl_dispatch_stub_70(GLdouble x, GLdouble y, GLdouble z);
void APIENTRY gl_dispatch_stub_71(const GLdouble *v);
void APIENTRY gl_dispatch_stub_72(GLfloat x, GLfloat y, GLfloat z);
void APIENTRY gl_dispatch_stub_73(const GLfloat *v);
void APIENTRY gl_dispatch_stub_74(GLint x, GLint y, GLint z);
void APIENTRY gl_dispatch_stub_75(const GLint *v);
void APIENTRY gl_dispatch_stub_76(GLshort x, GLshort y, GLshort z);
void APIENTRY gl_dispatch_stub_77(const GLshort *v);
void APIENTRY gl_dispatch_stub_78(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY gl_dispatch_stub_79(const GLdouble *v);
void APIENTRY gl_dispatch_stub_80(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY gl_dispatch_stub_81(const GLfloat *v);
void APIENTRY gl_dispatch_stub_82(GLint x, GLint y, GLint z, GLint w);
void APIENTRY gl_dispatch_stub_83(const GLint *v);
void APIENTRY gl_dispatch_stub_84(GLshort x, GLshort y, GLshort z, GLshort w);
void APIENTRY gl_dispatch_stub_85(const GLshort *v);
void APIENTRY gl_dispatch_stub_86(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
void APIENTRY gl_dispatch_stub_87(const GLdouble *v1, const GLdouble *v2);
void APIENTRY gl_dispatch_stub_88(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
void APIENTRY gl_dispatch_stub_89(const GLfloat *v1, const GLfloat *v2);
void APIENTRY gl_dispatch_stub_90(GLint x1, GLint y1, GLint x2, GLint y2);
void APIENTRY gl_dispatch_stub_91(const GLint *v1, const GLint *v2);
void APIENTRY gl_dispatch_stub_92(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
void APIENTRY gl_dispatch_stub_93(const GLshort *v1, const GLshort *v2);
void APIENTRY gl_dispatch_stub_94(GLdouble s);
void APIENTRY gl_dispatch_stub_95(const GLdouble *v);
void APIENTRY gl_dispatch_stub_96(GLfloat s);
void APIENTRY gl_dispatch_stub_97(const GLfloat *v);
void APIENTRY gl_dispatch_stub_98(GLint s);
void APIENTRY gl_dispatch_stub_99(const GLint *v);
void APIENTRY gl_dispatch_stub_100(GLshort s);
void APIENTRY gl_dispatch_stub_101(const GLshort *v);
void APIENTRY gl_dispatch_stub_102(GLdouble s, GLdouble t);
void APIENTRY gl_dispatch_stub_103(const GLdouble *v);
void APIENTRY gl_dispatch_stub_104(GLfloat s, GLfloat t);
void APIENTRY gl_dispatch_stub_105(const GLfloat *v);
void APIENTRY gl_dispatch_stub_106(GLint s, GLint t);
void APIENTRY gl_dispatch_stub_107(const GLint *v);
void APIENTRY gl_dispatch_stub_108(GLshort s, GLshort t);
void APIENTRY gl_dispatch_stub_109(const GLshort *v);
void APIENTRY gl_dispatch_stub_110(GLdouble s, GLdouble t, GLdouble r);
void APIENTRY gl_dispatch_stub_111(const GLdouble *v);
void APIENTRY gl_dispatch_stub_112(GLfloat s, GLfloat t, GLfloat r);
void APIENTRY gl_dispatch_stub_113(const GLfloat *v);
void APIENTRY gl_dispatch_stub_114(GLint s, GLint t, GLint r);
void APIENTRY gl_dispatch_stub_115(const GLint *v);
void APIENTRY gl_dispatch_stub_116(GLshort s, GLshort t, GLshort r);
void APIENTRY gl_dispatch_stub_117(const GLshort *v);
void APIENTRY gl_dispatch_stub_118(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void APIENTRY gl_dispatch_stub_119(const GLdouble *v);
void APIENTRY gl_dispatch_stub_120(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void APIENTRY gl_dispatch_stub_121(const GLfloat *v);
void APIENTRY gl_dispatch_stub_122(GLint s, GLint t, GLint r, GLint q);
void APIENTRY gl_dispatch_stub_123(const GLint *v);
void APIENTRY gl_dispatch_stub_124(GLshort s, GLshort t, GLshort r, GLshort q);
void APIENTRY gl_dispatch_stub_125(const GLshort *v);
void APIENTRY gl_dispatch_stub_126(GLdouble x, GLdouble y);
void APIENTRY gl_dispatch_stub_127(const GLdouble *v);
void APIENTRY gl_dispatch_stub_128(GLfloat x, GLfloat y);
void APIENTRY gl_dispatch_stub_129(const GLfloat *v);
void APIENTRY gl_dispatch_stub_130(GLint x, GLint y);
void APIENTRY gl_dispatch_stub_131(const GLint *v);
void APIENTRY gl_dispatch_stub_132(GLshort x, GLshort y);
void APIENTRY gl_dispatch_stub_133(const GLshort *v);
void APIENTRY gl_dispatch_stub_134(GLdouble x, GLdouble y, GLdouble z);
void APIENTRY gl_dispatch_stub_135(const GLdouble *v);
void APIENTRY gl_dispatch_stub_136(GLfloat x, GLfloat y, GLfloat z);
void APIENTRY gl_dispatch_stub_137(const GLfloat *v);
void APIENTRY gl_dispatch_stub_138(GLint x, GLint y, GLint z);
void APIENTRY gl_dispatch_stub_139(const GLint *v);
void APIENTRY gl_dispatch_stub_140(GLshort x, GLshort y, GLshort z);
void APIENTRY gl_dispatch_stub_141(const GLshort *v);
void APIENTRY gl_dispatch_stub_142(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY gl_dispatch_stub_143(const GLdouble *v);
void APIENTRY gl_dispatch_stub_144(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY gl_dispatch_stub_145(const GLfloat *v);
void APIENTRY gl_dispatch_stub_146(GLint x, GLint y, GLint z, GLint w);
void APIENTRY gl_dispatch_stub_147(const GLint *v);
void APIENTRY gl_dispatch_stub_148(GLshort x, GLshort y, GLshort z, GLshort w);
void APIENTRY gl_dispatch_stub_149(const GLshort *v);
void APIENTRY gl_dispatch_stub_150(GLenum plane, const GLdouble *equation);
void APIENTRY gl_dispatch_stub_151(GLenum face, GLenum mode);
GLAPI void APIENTRY glCullFace(GLenum mode);
void APIENTRY gl_dispatch_stub_153(GLenum pname, GLfloat param);
void APIENTRY gl_dispatch_stub_154(GLenum pname, const GLfloat *params);
void APIENTRY gl_dispatch_stub_155(GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_156(GLenum pname, const GLint *params);
GLAPI void APIENTRY glFrontFace(GLenum mode);
GLAPI void APIENTRY glHint(GLenum target, GLenum mode);
void APIENTRY gl_dispatch_stub_159(GLenum light, GLenum pname, GLfloat param);
void APIENTRY gl_dispatch_stub_160(GLenum light, GLenum pname, const GLfloat *params);
void APIENTRY gl_dispatch_stub_161(GLenum light, GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_162(GLenum light, GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_163(GLenum pname, GLfloat param);
void APIENTRY gl_dispatch_stub_164(GLenum pname, const GLfloat *params);
void APIENTRY gl_dispatch_stub_165(GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_166(GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_167(GLint factor, GLushort pattern);
GLAPI void APIENTRY glLineWidth(GLfloat width);
void APIENTRY gl_dispatch_stub_169(GLenum face, GLenum pname, GLfloat param);
void APIENTRY gl_dispatch_stub_170(GLenum face, GLenum pname, const GLfloat *params);
void APIENTRY gl_dispatch_stub_171(GLenum face, GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_172(GLenum face, GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_173(GLfloat size);
void APIENTRY gl_dispatch_stub_174(GLenum face, GLenum mode);
void APIENTRY gl_dispatch_stub_175(const GLubyte *mask);
GLAPI void APIENTRY glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
void APIENTRY gl_dispatch_stub_177(GLenum mode);
GLAPI void APIENTRY glTexParameterf(GLenum target, GLenum pname, GLfloat param);
GLAPI void APIENTRY glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params);
GLAPI void APIENTRY glTexParameteri(GLenum target, GLenum pname, GLint param);
GLAPI void APIENTRY glTexParameteriv(GLenum target, GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_182(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
GLAPI void APIENTRY glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void APIENTRY gl_dispatch_stub_184(GLenum target, GLenum pname, GLfloat param);
void APIENTRY gl_dispatch_stub_185(GLenum target, GLenum pname, const GLfloat *params);
void APIENTRY gl_dispatch_stub_186(GLenum target, GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_187(GLenum target, GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_188(GLenum coord, GLenum pname, GLdouble param);
void APIENTRY gl_dispatch_stub_189(GLenum coord, GLenum pname, const GLdouble *params);
void APIENTRY gl_dispatch_stub_190(GLenum coord, GLenum pname, GLfloat param);
void APIENTRY gl_dispatch_stub_191(GLenum coord, GLenum pname, const GLfloat *params);
void APIENTRY gl_dispatch_stub_192(GLenum coord, GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_193(GLenum coord, GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_194(GLsizei size, GLenum type, GLfloat *buffer);
void APIENTRY gl_dispatch_stub_195(GLsizei size, GLuint *buffer);
GLint APIENTRY gl_dispatch_stub_196(GLenum mode);
void APIENTRY gl_dispatch_stub_197(void);
void APIENTRY gl_dispatch_stub_198(GLuint name);
void APIENTRY gl_dispatch_stub_199(GLfloat token);
void APIENTRY gl_dispatch_stub_200(void);
void APIENTRY gl_dispatch_stub_201(GLuint name);
void APIENTRY gl_dispatch_stub_202(GLenum mode);
GLAPI void APIENTRY glClear(GLbitfield mask);
void APIENTRY gl_dispatch_stub_204(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void APIENTRY gl_dispatch_stub_205(GLfloat c);
GLAPI void APIENTRY glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
GLAPI void APIENTRY glClearStencil(GLint s);
void APIENTRY gl_dispatch_stub_208(GLclampd depth);
GLAPI void APIENTRY glStencilMask(GLuint mask);
GLAPI void APIENTRY glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
GLAPI void APIENTRY glDepthMask(GLboolean flag);
void APIENTRY gl_dispatch_stub_212(GLuint mask);
void APIENTRY gl_dispatch_stub_213(GLenum op, GLfloat value);
GLAPI void APIENTRY glDisable(GLenum cap);
GLAPI void APIENTRY glEnable(GLenum cap);
GLAPI void APIENTRY glFinish(void);
GLAPI void APIENTRY glFlush(void);
void APIENTRY gl_dispatch_stub_218(void);
void APIENTRY gl_dispatch_stub_219(GLbitfield mask);
void APIENTRY gl_dispatch_stub_220(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
void APIENTRY gl_dispatch_stub_221(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
void APIENTRY gl_dispatch_stub_222(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
void APIENTRY gl_dispatch_stub_223(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
void APIENTRY gl_dispatch_stub_224(GLint un, GLdouble u1, GLdouble u2);
void APIENTRY gl_dispatch_stub_225(GLint un, GLfloat u1, GLfloat u2);
void APIENTRY gl_dispatch_stub_226(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
void APIENTRY gl_dispatch_stub_227(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
void APIENTRY gl_dispatch_stub_228(GLdouble u);
void APIENTRY gl_dispatch_stub_229(const GLdouble *u);
void APIENTRY gl_dispatch_stub_230(GLfloat u);
void APIENTRY gl_dispatch_stub_231(const GLfloat *u);
void APIENTRY gl_dispatch_stub_232(GLdouble u, GLdouble v);
void APIENTRY gl_dispatch_stub_233(const GLdouble *u);
void APIENTRY gl_dispatch_stub_234(GLfloat u, GLfloat v);
void APIENTRY gl_dispatch_stub_235(const GLfloat *u);
void APIENTRY gl_dispatch_stub_236(GLenum mode, GLint i1, GLint i2);
void APIENTRY gl_dispatch_stub_237(GLint i);
void APIENTRY gl_dispatch_stub_238(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
void APIENTRY gl_dispatch_stub_239(GLint i, GLint j);
void APIENTRY gl_dispatch_stub_240(GLenum func, GLclampf ref);
GLAPI void APIENTRY glBlendFunc(GLenum sfactor, GLenum dfactor);
void APIENTRY gl_dispatch_stub_242(GLenum opcode);
GLAPI void APIENTRY glStencilFunc(GLenum func, GLint ref, GLuint mask);
GLAPI void APIENTRY glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
GLAPI void APIENTRY glDepthFunc(GLenum func);
void APIENTRY gl_dispatch_stub_246(GLfloat xfactor, GLfloat yfactor);
void APIENTRY gl_dispatch_stub_247(GLenum pname, GLfloat param);
void APIENTRY gl_dispatch_stub_248(GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_249(GLenum pname, GLfloat param);
GLAPI void APIENTRY glPixelStorei(GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_251(GLenum map, GLsizei mapsize, const GLfloat *values);
void APIENTRY gl_dispatch_stub_252(GLenum map, GLsizei mapsize, const GLuint *values);
void APIENTRY gl_dispatch_stub_253(GLenum map, GLsizei mapsize, const GLushort *values);
GLAPI void APIENTRY glReadBuffer(GLenum mode);
void APIENTRY gl_dispatch_stub_255(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
GLAPI void APIENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
void APIENTRY gl_dispatch_stub_257(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
GLAPI void APIENTRY glGetBooleanv(GLenum pname, GLboolean *params);
void APIENTRY gl_dispatch_stub_259(GLenum plane, GLdouble *equation);
void APIENTRY gl_dispatch_stub_260(GLenum pname, GLdouble *params);
GLAPI GLenum APIENTRY glGetError(void);
GLAPI void APIENTRY glGetFloatv(GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetIntegerv(GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_264(GLenum light, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_265(GLenum light, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_266(GLenum target, GLenum query, GLdouble *v);
void APIENTRY gl_dispatch_stub_267(GLenum target, GLenum query, GLfloat *v);
void APIENTRY gl_dispatch_stub_268(GLenum target, GLenum query, GLint *v);
void APIENTRY gl_dispatch_stub_269(GLenum face, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_270(GLenum face, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_271(GLenum map, GLfloat *values);
void APIENTRY gl_dispatch_stub_272(GLenum map, GLuint *values);
void APIENTRY gl_dispatch_stub_273(GLenum map, GLushort *values);
void APIENTRY gl_dispatch_stub_274(GLubyte *mask);
GLAPI const GLubyte * APIENTRY glGetString(GLenum name);
void APIENTRY gl_dispatch_stub_276(GLenum target, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_277(GLenum target, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_278(GLenum coord, GLenum pname, GLdouble *params);
void APIENTRY gl_dispatch_stub_279(GLenum coord, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_280(GLenum coord, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_281(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
GLAPI void APIENTRY glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetTexParameteriv(GLenum target, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_284(GLenum target, GLint level, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_285(GLenum target, GLint level, GLenum pname, GLint *params);
GLAPI GLboolean APIENTRY glIsEnabled(GLenum cap);
GLboolean APIENTRY gl_dispatch_stub_287(GLuint list);
void APIENTRY gl_dispatch_stub_288(GLclampd zNear, GLclampd zFar);
void APIENTRY gl_dispatch_stub_289(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void APIENTRY gl_dispatch_stub_290(void);
void APIENTRY gl_dispatch_stub_291(const GLfloat *m);
void APIENTRY gl_dispatch_stub_292(const GLdouble *m);
void APIENTRY gl_dispatch_stub_293(GLenum mode);
void APIENTRY gl_dispatch_stub_294(const GLfloat *m);
void APIENTRY gl_dispatch_stub_295(const GLdouble *m);
void APIENTRY gl_dispatch_stub_296(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void APIENTRY gl_dispatch_stub_297(void);
void APIENTRY gl_dispatch_stub_298(void);
void APIENTRY gl_dispatch_stub_299(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
void APIENTRY gl_dispatch_stub_300(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void APIENTRY gl_dispatch_stub_301(GLdouble x, GLdouble y, GLdouble z);
void APIENTRY gl_dispatch_stub_302(GLfloat x, GLfloat y, GLfloat z);
void APIENTRY gl_dispatch_stub_303(GLdouble x, GLdouble y, GLdouble z);
void APIENTRY gl_dispatch_stub_304(GLfloat x, GLfloat y, GLfloat z);
GLAPI void APIENTRY glViewport(GLint x, GLint y, GLsizei width, GLsizei height);
void APIENTRY gl_dispatch_stub_306(GLint i);
GLAPI void APIENTRY glBindTexture(GLenum target, GLuint texture);
void APIENTRY gl_dispatch_stub_308(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_309(GLenum array);
GLAPI void APIENTRY glDrawArrays(GLenum mode, GLint first, GLsizei count);
GLAPI void APIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
void APIENTRY gl_dispatch_stub_312(GLsizei stride, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_313(GLenum array);
void APIENTRY gl_dispatch_stub_314(GLenum type, GLsizei stride, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_315(GLubyte c);
void APIENTRY gl_dispatch_stub_316(const GLubyte *c);
void APIENTRY gl_dispatch_stub_317(GLenum format, GLsizei stride, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_318(GLenum type, GLsizei stride, const GLvoid *pointer);
GLAPI void APIENTRY glPolygonOffset(GLfloat factor, GLfloat units);
void APIENTRY gl_dispatch_stub_320(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_321(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
GLboolean APIENTRY gl_dispatch_stub_322(GLsizei n, const GLuint *textures, GLboolean *residences);
void APIENTRY gl_dispatch_stub_323(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
GLAPI void APIENTRY glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void APIENTRY gl_dispatch_stub_325(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLAPI void APIENTRY glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI void APIENTRY glDeleteTextures(GLsizei n, const GLuint *textures);
GLAPI void APIENTRY glGenTextures(GLsizei n, GLuint *textures);
void APIENTRY gl_dispatch_stub_329(GLenum pname, GLvoid **params);
GLAPI GLboolean APIENTRY glIsTexture(GLuint texture);
void APIENTRY gl_dispatch_stub_331(GLsizei n, const GLuint *textures, const GLclampf *priorities);
void APIENTRY gl_dispatch_stub_332(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
GLAPI void APIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
void APIENTRY gl_dispatch_stub_334(void);
void APIENTRY gl_dispatch_stub_335(GLbitfield mask);
GLAPI void APIENTRY glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
GLAPI void APIENTRY glBlendEquation(GLenum mode);
GLAPI void APIENTRY glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
void APIENTRY gl_dispatch_stub_339(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
void APIENTRY gl_dispatch_stub_340(GLenum target, GLenum pname, const GLfloat *params);
void APIENTRY gl_dispatch_stub_341(GLenum target, GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_342(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void APIENTRY gl_dispatch_stub_343(GLenum target, GLenum format, GLenum type, GLvoid *table);
void APIENTRY gl_dispatch_stub_344(GLenum target, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_345(GLenum target, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_346(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
void APIENTRY gl_dispatch_stub_347(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
void APIENTRY gl_dispatch_stub_348(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
void APIENTRY gl_dispatch_stub_349(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
void APIENTRY gl_dispatch_stub_350(GLenum target, GLenum pname, GLfloat params);
void APIENTRY gl_dispatch_stub_351(GLenum target, GLenum pname, const GLfloat *params);
void APIENTRY gl_dispatch_stub_352(GLenum target, GLenum pname, GLint params);
void APIENTRY gl_dispatch_stub_353(GLenum target, GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_354(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void APIENTRY gl_dispatch_stub_355(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
void APIENTRY gl_dispatch_stub_356(GLenum target, GLenum format, GLenum type, GLvoid *image);
void APIENTRY gl_dispatch_stub_357(GLenum target, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_358(GLenum target, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_359(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
void APIENTRY gl_dispatch_stub_360(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
void APIENTRY gl_dispatch_stub_361(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
void APIENTRY gl_dispatch_stub_362(GLenum target, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_363(GLenum target, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_364(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
void APIENTRY gl_dispatch_stub_365(GLenum target, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_366(GLenum target, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_367(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
void APIENTRY gl_dispatch_stub_368(GLenum target, GLenum internalformat, GLboolean sink);
void APIENTRY gl_dispatch_stub_369(GLenum target);
void APIENTRY gl_dispatch_stub_370(GLenum target);
GLAPI void APIENTRY glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
GLAPI void APIENTRY glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
GLAPI void APIENTRY glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI void APIENTRY glActiveTexture(GLenum texture);
void APIENTRY gl_dispatch_stub_375(GLenum texture);
void APIENTRY gl_dispatch_stub_376(GLenum target, GLdouble s);
void APIENTRY gl_dispatch_stub_377(GLenum target, const GLdouble *v);
void APIENTRY gl_dispatch_stub_378(GLenum target, GLfloat s);
void APIENTRY gl_dispatch_stub_379(GLenum target, const GLfloat *v);
void APIENTRY gl_dispatch_stub_380(GLenum target, GLint s);
void APIENTRY gl_dispatch_stub_381(GLenum target, const GLint *v);
void APIENTRY gl_dispatch_stub_382(GLenum target, GLshort s);
void APIENTRY gl_dispatch_stub_383(GLenum target, const GLshort *v);
void APIENTRY gl_dispatch_stub_384(GLenum target, GLdouble s, GLdouble t);
void APIENTRY gl_dispatch_stub_385(GLenum target, const GLdouble *v);
void APIENTRY gl_dispatch_stub_386(GLenum target, GLfloat s, GLfloat t);
void APIENTRY gl_dispatch_stub_387(GLenum target, const GLfloat *v);
void APIENTRY gl_dispatch_stub_388(GLenum target, GLint s, GLint t);
void APIENTRY gl_dispatch_stub_389(GLenum target, const GLint *v);
void APIENTRY gl_dispatch_stub_390(GLenum target, GLshort s, GLshort t);
void APIENTRY gl_dispatch_stub_391(GLenum target, const GLshort *v);
void APIENTRY gl_dispatch_stub_392(GLenum target, GLdouble s, GLdouble t, GLdouble r);
void APIENTRY gl_dispatch_stub_393(GLenum target, const GLdouble *v);
void APIENTRY gl_dispatch_stub_394(GLenum target, GLfloat s, GLfloat t, GLfloat r);
void APIENTRY gl_dispatch_stub_395(GLenum target, const GLfloat *v);
void APIENTRY gl_dispatch_stub_396(GLenum target, GLint s, GLint t, GLint r);
void APIENTRY gl_dispatch_stub_397(GLenum target, const GLint *v);
void APIENTRY gl_dispatch_stub_398(GLenum target, GLshort s, GLshort t, GLshort r);
void APIENTRY gl_dispatch_stub_399(GLenum target, const GLshort *v);
void APIENTRY gl_dispatch_stub_400(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void APIENTRY gl_dispatch_stub_401(GLenum target, const GLdouble *v);
void APIENTRY gl_dispatch_stub_402(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void APIENTRY gl_dispatch_stub_403(GLenum target, const GLfloat *v);
void APIENTRY gl_dispatch_stub_404(GLenum target, GLint s, GLint t, GLint r, GLint q);
void APIENTRY gl_dispatch_stub_405(GLenum target, const GLint *v);
void APIENTRY gl_dispatch_stub_406(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
void APIENTRY gl_dispatch_stub_407(GLenum target, const GLshort *v);
void APIENTRY gl_dispatch_stub_408(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
GLAPI void APIENTRY glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
GLAPI void APIENTRY glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
void APIENTRY gl_dispatch_stub_411(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
GLAPI void APIENTRY glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
GLAPI void APIENTRY glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
void APIENTRY gl_dispatch_stub_414(GLenum target, GLint level, GLvoid *img);
void APIENTRY gl_dispatch_stub_415(const GLdouble *m);
void APIENTRY gl_dispatch_stub_416(const GLfloat *m);
void APIENTRY gl_dispatch_stub_417(const GLdouble *m);
void APIENTRY gl_dispatch_stub_418(const GLfloat *m);
GLAPI void APIENTRY glSampleCoverage(GLclampf value, GLboolean invert);
GLAPI void APIENTRY glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
void APIENTRY gl_dispatch_stub_421(GLenum type, GLsizei stride, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_422(GLdouble coord);
void APIENTRY gl_dispatch_stub_423(const GLdouble *coord);
void APIENTRY gl_dispatch_stub_424(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
GLAPI void APIENTRY glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
void APIENTRY gl_dispatch_stub_425(GLenum pname, GLfloat param);
void APIENTRY gl_dispatch_stub_426(GLenum pname, const GLfloat *params);
void APIENTRY gl_dispatch_stub_427(GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_428(GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_429(GLbyte red, GLbyte green, GLbyte blue);
void APIENTRY gl_dispatch_stub_430(const GLbyte *v);
void APIENTRY gl_dispatch_stub_431(GLdouble red, GLdouble green, GLdouble blue);
void APIENTRY gl_dispatch_stub_432(const GLdouble *v);
void APIENTRY gl_dispatch_stub_433(GLint red, GLint green, GLint blue);
void APIENTRY gl_dispatch_stub_434(const GLint *v);
void APIENTRY gl_dispatch_stub_435(GLshort red, GLshort green, GLshort blue);
void APIENTRY gl_dispatch_stub_436(const GLshort *v);
void APIENTRY gl_dispatch_stub_437(GLubyte red, GLubyte green, GLubyte blue);
void APIENTRY gl_dispatch_stub_438(const GLubyte *v);
void APIENTRY gl_dispatch_stub_439(GLuint red, GLuint green, GLuint blue);
void APIENTRY gl_dispatch_stub_440(const GLuint *v);
void APIENTRY gl_dispatch_stub_441(GLushort red, GLushort green, GLushort blue);
void APIENTRY gl_dispatch_stub_442(const GLushort *v);
void APIENTRY gl_dispatch_stub_443(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_444(GLdouble x, GLdouble y);
void APIENTRY gl_dispatch_stub_445(const GLdouble *v);
void APIENTRY gl_dispatch_stub_446(GLfloat x, GLfloat y);
void APIENTRY gl_dispatch_stub_447(const GLfloat *v);
void APIENTRY gl_dispatch_stub_448(GLint x, GLint y);
void APIENTRY gl_dispatch_stub_449(const GLint *v);
void APIENTRY gl_dispatch_stub_450(GLshort x, GLshort y);
void APIENTRY gl_dispatch_stub_451(const GLshort *v);
void APIENTRY gl_dispatch_stub_452(GLdouble x, GLdouble y, GLdouble z);
void APIENTRY gl_dispatch_stub_453(const GLdouble *v);
void APIENTRY gl_dispatch_stub_454(GLfloat x, GLfloat y, GLfloat z);
void APIENTRY gl_dispatch_stub_455(const GLfloat *v);
void APIENTRY gl_dispatch_stub_456(GLint x, GLint y, GLint z);
void APIENTRY gl_dispatch_stub_457(const GLint *v);
void APIENTRY gl_dispatch_stub_458(GLshort x, GLshort y, GLshort z);
void APIENTRY gl_dispatch_stub_459(const GLshort *v);
GLAPI void APIENTRY glBeginQuery(GLenum target, GLuint id);
GLAPI void APIENTRY glBindBuffer(GLenum target, GLuint buffer);
GLAPI void APIENTRY glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
GLAPI void APIENTRY glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);
GLAPI void APIENTRY glDeleteBuffers(GLsizei n, const GLuint *buffer);
GLAPI void APIENTRY glDeleteQueries(GLsizei n, const GLuint *ids);
GLAPI void APIENTRY glEndQuery(GLenum target);
GLAPI void APIENTRY glGenBuffers(GLsizei n, GLuint *buffer);
GLAPI void APIENTRY glGenQueries(GLsizei n, GLuint *ids);
GLAPI void APIENTRY glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetBufferPointerv(GLenum target, GLenum pname, GLvoid **params);
void APIENTRY gl_dispatch_stub_471(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);
void APIENTRY gl_dispatch_stub_472(GLuint id, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params);
GLAPI void APIENTRY glGetQueryiv(GLenum target, GLenum pname, GLint *params);
GLAPI GLboolean APIENTRY glIsBuffer(GLuint buffer);
GLAPI GLboolean APIENTRY glIsQuery(GLuint id);
GLvoid * APIENTRY gl_dispatch_stub_477(GLenum target, GLenum access);
GLAPI GLboolean APIENTRY glUnmapBuffer(GLenum target);
GLAPI void APIENTRY glAttachShader(GLuint program, GLuint shader);
GLAPI void APIENTRY glBindAttribLocation(GLuint program, GLuint index, const GLchar *name);
GLAPI void APIENTRY glBlendEquationSeparate(GLenum modeRGB, GLenum modeA);
GLAPI void APIENTRY glCompileShader(GLuint shader);
GLAPI GLuint APIENTRY glCreateProgram(void);
GLAPI GLuint APIENTRY glCreateShader(GLenum type);
GLAPI void APIENTRY glDeleteProgram(GLuint program);
GLAPI void APIENTRY glDeleteShader(GLuint program);
GLAPI void APIENTRY glDetachShader(GLuint program, GLuint shader);
GLAPI void APIENTRY glDisableVertexAttribArray(GLuint index);
GLAPI void APIENTRY glDrawBuffers(GLsizei n, const GLenum *bufs);
GLAPI void APIENTRY glEnableVertexAttribArray(GLuint index);
GLAPI void APIENTRY glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
GLAPI void APIENTRY glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
GLAPI void APIENTRY glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);
GLAPI GLint APIENTRY glGetAttribLocation(GLuint program, const GLchar *name);
GLAPI void APIENTRY glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GLAPI void APIENTRY glGetProgramiv(GLuint program, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GLAPI void APIENTRY glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
GLAPI void APIENTRY glGetShaderiv(GLuint shader, GLenum pname, GLint *params);
GLAPI GLint APIENTRY glGetUniformLocation(GLuint program, const GLchar *name);
GLAPI void APIENTRY glGetUniformfv(GLuint program, GLint location, GLfloat *params);
GLAPI void APIENTRY glGetUniformiv(GLuint program, GLint location, GLint *params);
GLAPI void APIENTRY glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer);
void APIENTRY gl_dispatch_stub_504(GLuint index, GLenum pname, GLdouble *params);
GLAPI void APIENTRY glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params);
GLAPI GLboolean APIENTRY glIsProgram(GLuint program);
GLAPI GLboolean APIENTRY glIsShader(GLuint shader);
GLAPI void APIENTRY glLinkProgram(GLuint program);
GLAPI void APIENTRY glShaderSource(GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length);
GLAPI void APIENTRY glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
GLAPI void APIENTRY glStencilMaskSeparate(GLenum face, GLuint mask);
GLAPI void APIENTRY glStencilOpSeparate(GLenum face, GLenum sfail, GLenum zfail, GLenum zpass);
GLAPI void APIENTRY glUniform1f(GLint location, GLfloat v0);
GLAPI void APIENTRY glUniform1fv(GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glUniform1i(GLint location, GLint v0);
GLAPI void APIENTRY glUniform1iv(GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glUniform2f(GLint location, GLfloat v0, GLfloat v1);
GLAPI void APIENTRY glUniform2fv(GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glUniform2i(GLint location, GLint v0, GLint v1);
GLAPI void APIENTRY glUniform2iv(GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLAPI void APIENTRY glUniform3fv(GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
GLAPI void APIENTRY glUniform3iv(GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLAPI void APIENTRY glUniform4fv(GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLAPI void APIENTRY glUniform4iv(GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUseProgram(GLuint program);
GLAPI void APIENTRY glValidateProgram(GLuint program);
void APIENTRY gl_dispatch_stub_535(GLuint index, GLdouble x);
void APIENTRY gl_dispatch_stub_536(GLuint index, const GLdouble *v);
void APIENTRY gl_dispatch_stub_537(GLuint index, GLshort x);
void APIENTRY gl_dispatch_stub_538(GLuint index, const GLshort *v);
void APIENTRY gl_dispatch_stub_539(GLuint index, GLdouble x, GLdouble y);
void APIENTRY gl_dispatch_stub_540(GLuint index, const GLdouble *v);
void APIENTRY gl_dispatch_stub_541(GLuint index, GLshort x, GLshort y);
void APIENTRY gl_dispatch_stub_542(GLuint index, const GLshort *v);
void APIENTRY gl_dispatch_stub_543(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void APIENTRY gl_dispatch_stub_544(GLuint index, const GLdouble *v);
void APIENTRY gl_dispatch_stub_545(GLuint index, GLshort x, GLshort y, GLshort z);
void APIENTRY gl_dispatch_stub_546(GLuint index, const GLshort *v);
void APIENTRY gl_dispatch_stub_547(GLuint index, const GLbyte *v);
void APIENTRY gl_dispatch_stub_548(GLuint index, const GLint *v);
void APIENTRY gl_dispatch_stub_549(GLuint index, const GLshort *v);
void APIENTRY gl_dispatch_stub_550(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
void APIENTRY gl_dispatch_stub_551(GLuint index, const GLubyte *v);
void APIENTRY gl_dispatch_stub_552(GLuint index, const GLuint *v);
void APIENTRY gl_dispatch_stub_553(GLuint index, const GLushort *v);
void APIENTRY gl_dispatch_stub_554(GLuint index, const GLbyte *v);
void APIENTRY gl_dispatch_stub_555(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY gl_dispatch_stub_556(GLuint index, const GLdouble *v);
void APIENTRY gl_dispatch_stub_557(GLuint index, const GLint *v);
void APIENTRY gl_dispatch_stub_558(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
void APIENTRY gl_dispatch_stub_559(GLuint index, const GLshort *v);
void APIENTRY gl_dispatch_stub_560(GLuint index, const GLubyte *v);
void APIENTRY gl_dispatch_stub_561(GLuint index, const GLuint *v);
void APIENTRY gl_dispatch_stub_562(GLuint index, const GLushort *v);
GLAPI void APIENTRY glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
GLAPI void APIENTRY glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY gl_dispatch_stub_570(GLuint query, GLenum mode);
GLAPI void APIENTRY glBeginTransformFeedback(GLenum mode);
GLAPI void APIENTRY glBindBufferBase(GLenum target, GLuint index, GLuint buffer);
GLAPI void APIENTRY glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void APIENTRY gl_dispatch_stub_574(GLuint program, GLuint colorNumber, const GLchar *name);
void APIENTRY gl_dispatch_stub_575(GLenum target, GLenum clamp);
GLAPI void APIENTRY glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
GLAPI void APIENTRY glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value);
GLAPI void APIENTRY glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value);
GLAPI void APIENTRY glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value);
void APIENTRY gl_dispatch_stub_580(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
void APIENTRY gl_dispatch_stub_581(GLenum target, GLuint index);
void APIENTRY gl_dispatch_stub_582(GLenum target, GLuint index);
void APIENTRY gl_dispatch_stub_583(void);
GLAPI void APIENTRY glEndTransformFeedback(void);
void APIENTRY gl_dispatch_stub_585(GLenum value, GLuint index, GLboolean *data);
GLAPI GLint APIENTRY glGetFragDataLocation(GLuint program, const GLchar *name);
GLAPI void APIENTRY glGetIntegeri_v(GLenum value, GLuint index, GLint *data);
GLAPI const GLubyte * APIENTRY glGetStringi(GLenum name, GLuint index);
void APIENTRY gl_dispatch_stub_589(GLenum target, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_590(GLenum target, GLenum pname, GLuint *params);
GLAPI void APIENTRY glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
GLAPI void APIENTRY glGetUniformuiv(GLuint program, GLint location, GLuint *params);
GLAPI void APIENTRY glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);
GLboolean APIENTRY gl_dispatch_stub_595(GLenum target, GLuint index);
void APIENTRY gl_dispatch_stub_596(GLenum target, GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_597(GLenum target, GLenum pname, const GLuint *params);
GLAPI void APIENTRY glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar * const *varyings, GLenum bufferMode);
GLAPI void APIENTRY glUniform1ui(GLint location, GLuint x);
GLAPI void APIENTRY glUniform1uiv(GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glUniform2ui(GLint location, GLuint x, GLuint y);
GLAPI void APIENTRY glUniform2uiv(GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glUniform3ui(GLint location, GLuint x, GLuint y, GLuint z);
GLAPI void APIENTRY glUniform3uiv(GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glUniform4ui(GLint location, GLuint x, GLuint y, GLuint z, GLuint w);
GLAPI void APIENTRY glUniform4uiv(GLint location, GLsizei count, const GLuint *value);
void APIENTRY gl_dispatch_stub_607(GLuint index, const GLint *v);
void APIENTRY gl_dispatch_stub_608(GLuint index, const GLuint *v);
void APIENTRY gl_dispatch_stub_609(GLuint index, const GLbyte *v);
void APIENTRY gl_dispatch_stub_610(GLuint index, const GLshort *v);
void APIENTRY gl_dispatch_stub_611(GLuint index, const GLubyte *v);
void APIENTRY gl_dispatch_stub_612(GLuint index, const GLushort *v);
GLAPI void APIENTRY glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_614(GLuint index);
void APIENTRY gl_dispatch_stub_615(GLenum target, GLenum internalFormat, GLuint buffer);
void APIENTRY gl_dispatch_stub_616(GLenum target, GLenum attachment, GLuint texture, GLint level);
GLAPI void APIENTRY glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params);
GLAPI void APIENTRY glGetInteger64i_v(GLenum cap, GLuint index, GLint64 *data);
GLAPI void APIENTRY glVertexAttribDivisor(GLuint index, GLuint divisor);
void APIENTRY gl_dispatch_stub_620(GLfloat value);
void APIENTRY gl_dispatch_stub_621(GLenum target, GLuint program);
void APIENTRY gl_dispatch_stub_622(GLsizei n, const GLuint *programs);
void APIENTRY gl_dispatch_stub_623(GLsizei n, GLuint *programs);
void APIENTRY gl_dispatch_stub_624(GLenum target, GLuint index, GLdouble *params);
void APIENTRY gl_dispatch_stub_625(GLenum target, GLuint index, GLfloat *params);
void APIENTRY gl_dispatch_stub_626(GLenum target, GLuint index, GLdouble *params);
void APIENTRY gl_dispatch_stub_627(GLenum target, GLuint index, GLfloat *params);
void APIENTRY gl_dispatch_stub_628(GLenum target, GLenum pname, GLvoid *string);
void APIENTRY gl_dispatch_stub_629(GLenum target, GLenum pname, GLint *params);
GLboolean APIENTRY gl_dispatch_stub_630(GLuint program);
void APIENTRY gl_dispatch_stub_631(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY gl_dispatch_stub_632(GLenum target, GLuint index, const GLdouble *params);
void APIENTRY gl_dispatch_stub_633(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY gl_dispatch_stub_634(GLenum target, GLuint index, const GLfloat *params);
void APIENTRY gl_dispatch_stub_635(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY gl_dispatch_stub_636(GLenum target, GLuint index, const GLdouble *params);
void APIENTRY gl_dispatch_stub_637(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY gl_dispatch_stub_638(GLenum target, GLuint index, const GLfloat *params);
void APIENTRY gl_dispatch_stub_639(GLenum target, GLenum format, GLsizei len, const GLvoid *string);
void APIENTRY gl_dispatch_stub_640(GLuint index, GLfloat x);
GLAPI void APIENTRY glVertexAttrib1f(GLuint index, GLfloat x);
void APIENTRY gl_dispatch_stub_641(GLuint index, const GLfloat *v);
GLAPI void APIENTRY glVertexAttrib1fv(GLuint index, const GLfloat *v);
void APIENTRY gl_dispatch_stub_642(GLuint index, GLfloat x, GLfloat y);
GLAPI void APIENTRY glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
void APIENTRY gl_dispatch_stub_643(GLuint index, const GLfloat *v);
GLAPI void APIENTRY glVertexAttrib2fv(GLuint index, const GLfloat *v);
void APIENTRY gl_dispatch_stub_644(GLuint index, GLfloat x, GLfloat y, GLfloat z);
GLAPI void APIENTRY glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
void APIENTRY gl_dispatch_stub_645(GLuint index, const GLfloat *v);
GLAPI void APIENTRY glVertexAttrib3fv(GLuint index, const GLfloat *v);
void APIENTRY gl_dispatch_stub_646(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI void APIENTRY glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY gl_dispatch_stub_647(GLuint index, const GLfloat *v);
GLAPI void APIENTRY glVertexAttrib4fv(GLuint index, const GLfloat *v);
void APIENTRY gl_dispatch_stub_648(GLhandleARB containerObj, GLhandleARB obj);
GLhandleARB APIENTRY gl_dispatch_stub_649(void);
GLhandleARB APIENTRY gl_dispatch_stub_650(GLenum shaderType);
void APIENTRY gl_dispatch_stub_651(GLhandleARB obj);
void APIENTRY gl_dispatch_stub_652(GLhandleARB containerObj, GLhandleARB attachedObj);
void APIENTRY gl_dispatch_stub_653(GLhandleARB containerObj, GLsizei maxLength, GLsizei *length, GLhandleARB *infoLog);
GLhandleARB APIENTRY gl_dispatch_stub_654(GLenum pname);
void APIENTRY gl_dispatch_stub_655(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
void APIENTRY gl_dispatch_stub_656(GLhandleARB obj, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_657(GLhandleARB obj, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_658(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
GLAPI void APIENTRY glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
void APIENTRY gl_dispatch_stub_659(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
GLAPI void APIENTRY glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
GLAPI void APIENTRY glBindFramebuffer(GLenum target, GLuint framebuffer);
GLAPI void APIENTRY glBindRenderbuffer(GLenum target, GLuint renderbuffer);
GLAPI void APIENTRY glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLAPI GLenum APIENTRY glCheckFramebufferStatus(GLenum target);
GLAPI void APIENTRY glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers);
GLAPI void APIENTRY glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);
GLAPI void APIENTRY glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void APIENTRY gl_dispatch_stub_667(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLAPI void APIENTRY glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void APIENTRY gl_dispatch_stub_669(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer);
GLAPI void APIENTRY glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
GLAPI void APIENTRY glGenFramebuffers(GLsizei n, GLuint *framebuffers);
GLAPI void APIENTRY glGenRenderbuffers(GLsizei n, GLuint *renderbuffers);
GLAPI void APIENTRY glGenerateMipmap(GLenum target);
GLAPI void APIENTRY glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params);
GLAPI GLboolean APIENTRY glIsFramebuffer(GLuint framebuffer);
GLAPI GLboolean APIENTRY glIsRenderbuffer(GLuint renderbuffer);
GLAPI void APIENTRY glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI void APIENTRY glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI void APIENTRY glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
GLAPI GLvoid * APIENTRY glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
GLAPI void APIENTRY glBindVertexArray(GLuint array);
GLAPI void APIENTRY glDeleteVertexArrays(GLsizei n, const GLuint *arrays);
GLAPI void APIENTRY glGenVertexArrays(GLsizei n, GLuint *arrays);
GLAPI GLboolean APIENTRY glIsVertexArray(GLuint array);
GLAPI void APIENTRY glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
GLAPI void APIENTRY glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_688(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
GLAPI void APIENTRY glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
GLAPI GLuint APIENTRY glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName);
GLAPI void APIENTRY glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar * const *uniformNames, GLuint *uniformIndices);
GLAPI void APIENTRY glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
GLAPI void APIENTRY glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GLAPI GLenum APIENTRY glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
GLAPI void APIENTRY glDeleteSync(GLsync sync);
GLAPI GLsync APIENTRY glFenceSync(GLenum condition, GLbitfield flags);
GLAPI void APIENTRY glGetInteger64v(GLenum pname, GLint64 *params);
GLAPI void APIENTRY glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
GLAPI GLboolean APIENTRY glIsSync(GLsync sync);
GLAPI void APIENTRY glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
void APIENTRY gl_dispatch_stub_701(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
void APIENTRY gl_dispatch_stub_702(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex);
void APIENTRY gl_dispatch_stub_703(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
void APIENTRY gl_dispatch_stub_704(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex);
void APIENTRY gl_dispatch_stub_705(GLenum mode);
void APIENTRY gl_dispatch_stub_706(GLenum pname, GLuint index, GLfloat *val);
void APIENTRY gl_dispatch_stub_707(GLuint index, GLbitfield mask);
void APIENTRY gl_dispatch_stub_708(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void APIENTRY gl_dispatch_stub_709(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void APIENTRY gl_dispatch_stub_710(GLuint buf, GLenum modeRGB, GLenum modeA);
void APIENTRY gl_dispatch_stub_711(GLuint buf, GLenum mode);
void APIENTRY gl_dispatch_stub_712(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcA, GLenum dstA);
void APIENTRY gl_dispatch_stub_713(GLuint buf, GLenum src, GLenum dst);
void APIENTRY gl_dispatch_stub_714(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
GLint APIENTRY gl_dispatch_stub_715(GLuint program, const GLchar *name);
GLAPI void APIENTRY glBindSampler(GLuint unit, GLuint sampler);
GLAPI void APIENTRY glDeleteSamplers(GLsizei count, const GLuint *samplers);
GLAPI void APIENTRY glGenSamplers(GLsizei count, GLuint *samplers);
void APIENTRY gl_dispatch_stub_719(GLuint sampler, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_720(GLuint sampler, GLenum pname, GLuint *params);
GLAPI void APIENTRY glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params);
GLAPI GLboolean APIENTRY glIsSampler(GLuint sampler);
void APIENTRY gl_dispatch_stub_724(GLuint sampler, GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_725(GLuint sampler, GLenum pname, const GLuint *params);
GLAPI void APIENTRY glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
GLAPI void APIENTRY glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *params);
GLAPI void APIENTRY glSamplerParameteri(GLuint sampler, GLenum pname, GLint param);
GLAPI void APIENTRY glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_730(GLuint id, GLenum pname, GLint64 *params);
void APIENTRY gl_dispatch_stub_731(GLuint id, GLenum pname, GLuint64 *params);
void APIENTRY gl_dispatch_stub_732(GLuint id, GLenum target);
void APIENTRY gl_dispatch_stub_733(GLenum type, GLuint color);
void APIENTRY gl_dispatch_stub_734(GLenum type, const GLuint *color);
void APIENTRY gl_dispatch_stub_735(GLenum type, GLuint color);
void APIENTRY gl_dispatch_stub_736(GLenum type, const GLuint *color);
void APIENTRY gl_dispatch_stub_737(GLenum texture, GLenum type, GLuint coords);
void APIENTRY gl_dispatch_stub_738(GLenum texture, GLenum type, const GLuint *coords);
void APIENTRY gl_dispatch_stub_739(GLenum texture, GLenum type, GLuint coords);
void APIENTRY gl_dispatch_stub_740(GLenum texture, GLenum type, const GLuint *coords);
void APIENTRY gl_dispatch_stub_741(GLenum texture, GLenum type, GLuint coords);
void APIENTRY gl_dispatch_stub_742(GLenum texture, GLenum type, const GLuint *coords);
void APIENTRY gl_dispatch_stub_743(GLenum texture, GLenum type, GLuint coords);
void APIENTRY gl_dispatch_stub_744(GLenum texture, GLenum type, const GLuint *coords);
void APIENTRY gl_dispatch_stub_745(GLenum type, GLuint coords);
void APIENTRY gl_dispatch_stub_746(GLenum type, const GLuint *coords);
void APIENTRY gl_dispatch_stub_747(GLenum type, GLuint color);
void APIENTRY gl_dispatch_stub_748(GLenum type, const GLuint *color);
void APIENTRY gl_dispatch_stub_749(GLenum type, GLuint coords);
void APIENTRY gl_dispatch_stub_750(GLenum type, const GLuint *coords);
void APIENTRY gl_dispatch_stub_751(GLenum type, GLuint coords);
void APIENTRY gl_dispatch_stub_752(GLenum type, const GLuint *coords);
void APIENTRY gl_dispatch_stub_753(GLenum type, GLuint coords);
void APIENTRY gl_dispatch_stub_754(GLenum type, const GLuint *coords);
void APIENTRY gl_dispatch_stub_755(GLenum type, GLuint coords);
void APIENTRY gl_dispatch_stub_756(GLenum type, const GLuint *coords);
void APIENTRY gl_dispatch_stub_757(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void APIENTRY gl_dispatch_stub_758(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void APIENTRY gl_dispatch_stub_759(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void APIENTRY gl_dispatch_stub_760(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void APIENTRY gl_dispatch_stub_761(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void APIENTRY gl_dispatch_stub_762(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void APIENTRY gl_dispatch_stub_763(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void APIENTRY gl_dispatch_stub_764(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void APIENTRY gl_dispatch_stub_765(GLenum type, GLuint value);
void APIENTRY gl_dispatch_stub_766(GLenum type, const GLuint *value);
void APIENTRY gl_dispatch_stub_767(GLenum type, GLuint value);
void APIENTRY gl_dispatch_stub_768(GLenum type, const GLuint *value);
void APIENTRY gl_dispatch_stub_769(GLenum type, GLuint value);
void APIENTRY gl_dispatch_stub_770(GLenum type, const GLuint *value);
void APIENTRY gl_dispatch_stub_771(GLenum mode, const GLvoid *indirect);
void APIENTRY gl_dispatch_stub_772(GLenum mode, GLenum type, const GLvoid *indirect);
void APIENTRY gl_dispatch_stub_773(GLuint program, GLint location, GLdouble *params);
void APIENTRY gl_dispatch_stub_774(GLint location, GLdouble x);
void APIENTRY gl_dispatch_stub_775(GLint location, GLsizei count, const GLdouble *value);
void APIENTRY gl_dispatch_stub_776(GLint location, GLdouble x, GLdouble y);
void APIENTRY gl_dispatch_stub_777(GLint location, GLsizei count, const GLdouble *value);
void APIENTRY gl_dispatch_stub_778(GLint location, GLdouble x, GLdouble y, GLdouble z);
void APIENTRY gl_dispatch_stub_779(GLint location, GLsizei count, const GLdouble *value);
void APIENTRY gl_dispatch_stub_780(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY gl_dispatch_stub_781(GLint location, GLsizei count, const GLdouble *value);
void APIENTRY gl_dispatch_stub_782(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY gl_dispatch_stub_783(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY gl_dispatch_stub_784(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY gl_dispatch_stub_785(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY gl_dispatch_stub_786(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY gl_dispatch_stub_787(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY gl_dispatch_stub_788(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY gl_dispatch_stub_789(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY gl_dispatch_stub_790(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glBindTransformFeedback(GLenum target, GLuint id);
GLAPI void APIENTRY glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids);
void APIENTRY gl_dispatch_stub_793(GLenum mode, GLuint id);
GLAPI void APIENTRY glGenTransformFeedbacks(GLsizei n, GLuint *ids);
GLAPI GLboolean APIENTRY glIsTransformFeedback(GLuint id);
GLAPI void APIENTRY glPauseTransformFeedback(void);
GLAPI void APIENTRY glResumeTransformFeedback(void);
void APIENTRY gl_dispatch_stub_798(GLenum target, GLuint index, GLuint id);
void APIENTRY gl_dispatch_stub_799(GLenum mode, GLuint id, GLuint stream);
void APIENTRY gl_dispatch_stub_800(GLenum target, GLuint index);
void APIENTRY gl_dispatch_stub_801(GLenum target, GLuint index, GLenum pname, GLint *params);
GLAPI void APIENTRY glClearDepthf(GLclampf depth);
GLAPI void APIENTRY glDepthRangef(GLclampf zNear, GLclampf zFar);
GLAPI void APIENTRY glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
GLAPI void APIENTRY glReleaseShaderCompiler(void);
GLAPI void APIENTRY glShaderBinary(GLsizei n, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length);
GLAPI void APIENTRY glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);
GLAPI void APIENTRY glProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length);
GLAPI void APIENTRY glProgramParameteri(GLuint program, GLenum pname, GLint value);
void APIENTRY gl_dispatch_stub_810(GLuint index, GLenum pname, GLdouble *params);
void APIENTRY gl_dispatch_stub_811(GLuint index, GLdouble x);
void APIENTRY gl_dispatch_stub_812(GLuint index, const GLdouble *v);
void APIENTRY gl_dispatch_stub_813(GLuint index, GLdouble x, GLdouble y);
void APIENTRY gl_dispatch_stub_814(GLuint index, const GLdouble *v);
void APIENTRY gl_dispatch_stub_815(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void APIENTRY gl_dispatch_stub_816(GLuint index, const GLdouble *v);
void APIENTRY gl_dispatch_stub_817(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY gl_dispatch_stub_818(GLuint index, const GLdouble *v);
void APIENTRY gl_dispatch_stub_819(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_820(GLuint first, GLsizei count, const GLclampd *v);
void APIENTRY gl_dispatch_stub_821(GLuint index, GLclampd n, GLclampd f);
void APIENTRY gl_dispatch_stub_822(GLenum target, GLuint index, GLdouble *data);
void APIENTRY gl_dispatch_stub_823(GLenum target, GLuint index, GLfloat *data);
void APIENTRY gl_dispatch_stub_824(GLuint first, GLsizei count, const int *v);
void APIENTRY gl_dispatch_stub_825(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
void APIENTRY gl_dispatch_stub_826(GLuint index, const GLint *v);
void APIENTRY gl_dispatch_stub_827(GLuint first, GLsizei count, const GLfloat *v);
void APIENTRY gl_dispatch_stub_828(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
void APIENTRY gl_dispatch_stub_829(GLuint index, const GLfloat *v);
GLenum APIENTRY gl_dispatch_stub_830(void);
void APIENTRY gl_dispatch_stub_831(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table);
void APIENTRY gl_dispatch_stub_832(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img);
void APIENTRY gl_dispatch_stub_833(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image);
void APIENTRY gl_dispatch_stub_834(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
void APIENTRY gl_dispatch_stub_835(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
void APIENTRY gl_dispatch_stub_836(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
void APIENTRY gl_dispatch_stub_837(GLenum target, GLenum query, GLsizei bufSize, GLint *v);
void APIENTRY gl_dispatch_stub_838(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
void APIENTRY gl_dispatch_stub_839(GLenum map, GLsizei bufSize, GLfloat *values);
void APIENTRY gl_dispatch_stub_840(GLenum map, GLsizei bufSize, GLuint *values);
void APIENTRY gl_dispatch_stub_841(GLenum map, GLsizei bufSize, GLushort *values);
void APIENTRY gl_dispatch_stub_842(GLsizei bufSize, GLubyte *pattern);
void APIENTRY gl_dispatch_stub_843(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span);
void APIENTRY gl_dispatch_stub_844(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img);
void APIENTRY gl_dispatch_stub_845(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
void APIENTRY gl_dispatch_stub_846(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
void APIENTRY gl_dispatch_stub_847(GLuint program, GLint location, GLsizei bufSize, GLint *params);
void APIENTRY gl_dispatch_stub_848(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
void APIENTRY gl_dispatch_stub_849(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data);
void APIENTRY gl_dispatch_stub_850(GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance);
void APIENTRY gl_dispatch_stub_851(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance);
void APIENTRY gl_dispatch_stub_852(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance);
void APIENTRY gl_dispatch_stub_853(GLenum mode, GLuint id, GLsizei primcount);
void APIENTRY gl_dispatch_stub_854(GLenum mode, GLuint id, GLuint stream, GLsizei primcount);
GLAPI void APIENTRY glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
void APIENTRY gl_dispatch_stub_856(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_857(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
void APIENTRY gl_dispatch_stub_858(GLbitfield barriers);
void APIENTRY gl_dispatch_stub_859(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width);
GLAPI void APIENTRY glTexStorage2D(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height);
GLAPI void APIENTRY glTexStorage3D(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth);
void APIENTRY gl_dispatch_stub_862(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width);
void APIENTRY gl_dispatch_stub_863(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height);
void APIENTRY gl_dispatch_stub_864(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth);
void APIENTRY gl_dispatch_stub_865(GLenum target, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data);
void APIENTRY gl_dispatch_stub_866(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data);
void APIENTRY gl_dispatch_stub_867(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
void APIENTRY gl_dispatch_stub_868(GLintptr indirect);
void APIENTRY gl_dispatch_stub_869(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
void APIENTRY gl_dispatch_stub_870(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
void APIENTRY gl_dispatch_stub_871(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
void APIENTRY gl_dispatch_stub_872(GLuint attribindex, GLuint bindingindex);
void APIENTRY gl_dispatch_stub_873(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
void APIENTRY gl_dispatch_stub_874(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void APIENTRY gl_dispatch_stub_875(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void APIENTRY gl_dispatch_stub_876(GLuint attribindex, GLuint divisor);
void APIENTRY gl_dispatch_stub_877(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride);
void APIENTRY gl_dispatch_stub_878(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride);
void APIENTRY gl_dispatch_stub_879(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
GLuint APIENTRY gl_dispatch_stub_880(GLuint program, GLenum programInterface, const GLchar *name);
GLint APIENTRY gl_dispatch_stub_881(GLuint program, GLenum programInterface, const GLchar *name);
GLint APIENTRY gl_dispatch_stub_882(GLuint program, GLenum programInterface, const GLchar *name);
void APIENTRY gl_dispatch_stub_883(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
void APIENTRY gl_dispatch_stub_884(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
void APIENTRY gl_dispatch_stub_885(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
void APIENTRY gl_dispatch_stub_886(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void APIENTRY gl_dispatch_stub_887(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void APIENTRY gl_dispatch_stub_888(GLenum target, GLsizeiptr size, const GLvoid *data, GLbitfield flags);
void APIENTRY gl_dispatch_stub_889(GLuint texture, GLint level, GLenum format, GLenum type, const GLvoid *data);
void APIENTRY gl_dispatch_stub_890(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *data);
void APIENTRY gl_dispatch_stub_891(GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
void APIENTRY gl_dispatch_stub_892(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
void APIENTRY gl_dispatch_stub_893(GLuint first, GLsizei count, const GLuint *textures);
void APIENTRY gl_dispatch_stub_894(GLuint first, GLsizei count, const GLuint *samplers);
void APIENTRY gl_dispatch_stub_895(GLuint first, GLsizei count, const GLuint *textures);
void APIENTRY gl_dispatch_stub_896(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
void APIENTRY gl_dispatch_stub_897(GLenum origin, GLenum depth);
void APIENTRY gl_dispatch_stub_898(GLuint unit, GLuint texture);
void APIENTRY gl_dispatch_stub_899(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLenum APIENTRY gl_dispatch_stub_900(GLuint framebuffer, GLenum target);
void APIENTRY gl_dispatch_stub_901(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data);
void APIENTRY gl_dispatch_stub_902(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data);
void APIENTRY gl_dispatch_stub_903(GLuint framebuffer, GLenum buffer, GLfloat depth, GLint stencil);
void APIENTRY gl_dispatch_stub_904(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
void APIENTRY gl_dispatch_stub_905(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
void APIENTRY gl_dispatch_stub_906(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
void APIENTRY gl_dispatch_stub_907(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
void APIENTRY gl_dispatch_stub_908(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
void APIENTRY gl_dispatch_stub_909(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
void APIENTRY gl_dispatch_stub_910(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
void APIENTRY gl_dispatch_stub_911(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void APIENTRY gl_dispatch_stub_912(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void APIENTRY gl_dispatch_stub_913(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void APIENTRY gl_dispatch_stub_914(GLsizei n, GLuint *buffers);
void APIENTRY gl_dispatch_stub_915(GLsizei n, GLuint *framebuffers);
void APIENTRY gl_dispatch_stub_916(GLsizei n, GLuint *pipelines);
void APIENTRY gl_dispatch_stub_917(GLenum target, GLsizei n, GLuint *ids);
void APIENTRY gl_dispatch_stub_918(GLsizei n, GLuint *renderbuffers);
void APIENTRY gl_dispatch_stub_919(GLsizei n, GLuint *samplers);
void APIENTRY gl_dispatch_stub_920(GLenum target, GLsizei n, GLuint *textures);
void APIENTRY gl_dispatch_stub_921(GLsizei n, GLuint *ids);
void APIENTRY gl_dispatch_stub_922(GLsizei n, GLuint *arrays);
void APIENTRY gl_dispatch_stub_923(GLuint vaobj, GLuint index);
void APIENTRY gl_dispatch_stub_924(GLuint vaobj, GLuint index);
void APIENTRY gl_dispatch_stub_925(GLuint buffer, GLintptr offset, GLsizeiptr length);
void APIENTRY gl_dispatch_stub_926(GLuint texture);
void APIENTRY gl_dispatch_stub_927(GLuint texture, GLint level, GLsizei bufSize, GLvoid *pixels);
void APIENTRY gl_dispatch_stub_928(GLuint buffer, GLenum pname, GLint64 *params);
void APIENTRY gl_dispatch_stub_929(GLuint buffer, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_930(GLuint buffer, GLenum pname, GLvoid **params);
void APIENTRY gl_dispatch_stub_931(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data);
void APIENTRY gl_dispatch_stub_932(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_933(GLuint framebuffer, GLenum pname, GLint *param);
void APIENTRY gl_dispatch_stub_934(GLuint renderbuffer, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_935(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void APIENTRY gl_dispatch_stub_936(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void APIENTRY gl_dispatch_stub_937(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void APIENTRY gl_dispatch_stub_938(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void APIENTRY gl_dispatch_stub_939(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *pixels);
void APIENTRY gl_dispatch_stub_940(GLuint texture, GLint level, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_941(GLuint texture, GLint level, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_942(GLuint texture, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_943(GLuint texture, GLenum pname, GLuint *params);
void APIENTRY gl_dispatch_stub_944(GLuint texture, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_945(GLuint texture, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_946(GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
void APIENTRY gl_dispatch_stub_947(GLuint xfb, GLenum pname, GLuint index, GLint *param);
void APIENTRY gl_dispatch_stub_948(GLuint xfb, GLenum pname, GLint *param);
void APIENTRY gl_dispatch_stub_949(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
void APIENTRY gl_dispatch_stub_950(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
void APIENTRY gl_dispatch_stub_951(GLuint vaobj, GLenum pname, GLint *param);
void APIENTRY gl_dispatch_stub_952(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
void APIENTRY gl_dispatch_stub_953(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
GLvoid * APIENTRY gl_dispatch_stub_954(GLuint buffer, GLenum access);
GLvoid * APIENTRY gl_dispatch_stub_955(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
void APIENTRY gl_dispatch_stub_956(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage);
void APIENTRY gl_dispatch_stub_957(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLbitfield flags);
void APIENTRY gl_dispatch_stub_958(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data);
void APIENTRY gl_dispatch_stub_959(GLuint framebuffer, GLenum buf);
void APIENTRY gl_dispatch_stub_960(GLuint framebuffer, GLsizei n, const GLenum *bufs);
void APIENTRY gl_dispatch_stub_961(GLuint framebuffer, GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_962(GLuint framebuffer, GLenum buf);
void APIENTRY gl_dispatch_stub_963(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void APIENTRY gl_dispatch_stub_964(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
void APIENTRY gl_dispatch_stub_965(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
void APIENTRY gl_dispatch_stub_966(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
void APIENTRY gl_dispatch_stub_967(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void APIENTRY gl_dispatch_stub_968(GLuint texture, GLenum internalformat, GLuint buffer);
void APIENTRY gl_dispatch_stub_969(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
void APIENTRY gl_dispatch_stub_970(GLuint texture, GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_971(GLuint texture, GLenum pname, const GLuint *params);
void APIENTRY gl_dispatch_stub_972(GLuint texture, GLenum pname, GLfloat param);
void APIENTRY gl_dispatch_stub_973(GLuint texture, GLenum pname, const GLfloat *param);
void APIENTRY gl_dispatch_stub_974(GLuint texture, GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_975(GLuint texture, GLenum pname, const GLint *param);
void APIENTRY gl_dispatch_stub_976(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
void APIENTRY gl_dispatch_stub_977(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
void APIENTRY gl_dispatch_stub_978(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void APIENTRY gl_dispatch_stub_979(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
void APIENTRY gl_dispatch_stub_980(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void APIENTRY gl_dispatch_stub_981(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
void APIENTRY gl_dispatch_stub_982(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
void APIENTRY gl_dispatch_stub_983(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
void APIENTRY gl_dispatch_stub_984(GLuint xfb, GLuint index, GLuint buffer);
void APIENTRY gl_dispatch_stub_985(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLboolean APIENTRY gl_dispatch_stub_986(GLuint buffer);
void APIENTRY gl_dispatch_stub_987(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
void APIENTRY gl_dispatch_stub_988(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
void APIENTRY gl_dispatch_stub_989(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void APIENTRY gl_dispatch_stub_990(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void APIENTRY gl_dispatch_stub_991(GLuint vaobj, GLuint bindingindex, GLuint divisor);
void APIENTRY gl_dispatch_stub_992(GLuint vaobj, GLuint buffer);
void APIENTRY gl_dispatch_stub_993(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
void APIENTRY gl_dispatch_stub_994(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
void APIENTRY gl_dispatch_stub_995(GLuint buffer);
void APIENTRY gl_dispatch_stub_996(GLuint buffer, GLintptr offset, GLsizeiptr length);
GLAPI void APIENTRY glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments);
GLAPI void APIENTRY glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
void APIENTRY gl_dispatch_stub_999(GLuint texture, GLint level);
void APIENTRY gl_dispatch_stub_1000(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
void APIENTRY gl_dispatch_stub_1001(GLfloat factor, GLfloat bias);
void APIENTRY gl_dispatch_stub_1002(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height);
void APIENTRY gl_dispatch_stub_1003(const GLfloat *coords);
void APIENTRY gl_dispatch_stub_1004(GLint x, GLint y, GLint z, GLint width, GLint height);
void APIENTRY gl_dispatch_stub_1005(const GLint *coords);
void APIENTRY gl_dispatch_stub_1006(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height);
void APIENTRY gl_dispatch_stub_1007(const GLshort *coords);
void APIENTRY gl_dispatch_stub_1008(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height);
void APIENTRY gl_dispatch_stub_1009(const GLfixed *coords);
void APIENTRY gl_dispatch_stub_1010(GLenum type, GLsizei stride, const GLvoid *pointer);
GLbitfield APIENTRY gl_dispatch_stub_1011(GLfixed *mantissa, GLint *exponent);
void APIENTRY gl_dispatch_stub_1012(GLclampf value, GLboolean invert);
void APIENTRY gl_dispatch_stub_1013(GLenum pattern);
void APIENTRY gl_dispatch_stub_1014(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_1015(GLsizei stride, GLsizei count, const GLboolean *pointer);
void APIENTRY gl_dispatch_stub_1016(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_1017(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_1018(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_1019(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_1020(GLenum target, GLsizei numAttachments, const GLenum *attachments);
void APIENTRY gl_dispatch_stub_1021(GLuint pipeline, GLuint program);
void APIENTRY gl_dispatch_stub_1022(GLuint pipeline);
GLuint APIENTRY gl_dispatch_stub_1023(GLenum type, GLsizei count, const GLchar * const *strings);
void APIENTRY gl_dispatch_stub_1024(GLsizei n, const GLuint *pipelines);
void APIENTRY gl_dispatch_stub_1025(GLsizei n, GLuint *pipelines);
void APIENTRY gl_dispatch_stub_1026(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void APIENTRY gl_dispatch_stub_1027(GLuint pipeline, GLenum pname, GLint *params);
GLboolean APIENTRY gl_dispatch_stub_1028(GLuint pipeline);
void APIENTRY gl_dispatch_stub_1029(GLint first, GLsizei count);
void APIENTRY gl_dispatch_stub_1030(GLuint program, GLint location, GLdouble x);
void APIENTRY gl_dispatch_stub_1031(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void APIENTRY gl_dispatch_stub_1032(GLuint program, GLint location, GLfloat x);
void APIENTRY gl_dispatch_stub_1033(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void APIENTRY gl_dispatch_stub_1034(GLuint program, GLint location, GLint x);
void APIENTRY gl_dispatch_stub_1035(GLuint program, GLint location, GLsizei count, const GLint *value);
void APIENTRY gl_dispatch_stub_1036(GLuint program, GLint location, GLuint x);
void APIENTRY gl_dispatch_stub_1037(GLuint program, GLint location, GLsizei count, const GLuint *value);
void APIENTRY gl_dispatch_stub_1038(GLuint program, GLint location, GLdouble x, GLdouble y);
void APIENTRY gl_dispatch_stub_1039(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void APIENTRY gl_dispatch_stub_1040(GLuint program, GLint location, GLfloat x, GLfloat y);
void APIENTRY gl_dispatch_stub_1041(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void APIENTRY gl_dispatch_stub_1042(GLuint program, GLint location, GLint x, GLint y);
void APIENTRY gl_dispatch_stub_1043(GLuint program, GLint location, GLsizei count, const GLint *value);
void APIENTRY gl_dispatch_stub_1044(GLuint program, GLint location, GLuint x, GLuint y);
void APIENTRY gl_dispatch_stub_1045(GLuint program, GLint location, GLsizei count, const GLuint *value);
void APIENTRY gl_dispatch_stub_1046(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
void APIENTRY gl_dispatch_stub_1047(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void APIENTRY gl_dispatch_stub_1048(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z);
void APIENTRY gl_dispatch_stub_1049(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void APIENTRY gl_dispatch_stub_1050(GLuint program, GLint location, GLint x, GLint y, GLint z);
void APIENTRY gl_dispatch_stub_1051(GLuint program, GLint location, GLsizei count, const GLint *value);
void APIENTRY gl_dispatch_stub_1052(GLuint program, GLint location, GLuint x, GLuint y, GLuint z);
void APIENTRY gl_dispatch_stub_1053(GLuint program, GLint location, GLsizei count, const GLuint *value);
void APIENTRY gl_dispatch_stub_1054(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY gl_dispatch_stub_1055(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void APIENTRY gl_dispatch_stub_1056(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY gl_dispatch_stub_1057(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void APIENTRY gl_dispatch_stub_1058(GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w);
void APIENTRY gl_dispatch_stub_1059(GLuint program, GLint location, GLsizei count, const GLint *value);
void APIENTRY gl_dispatch_stub_1060(GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w);
void APIENTRY gl_dispatch_stub_1061(GLuint program, GLint location, GLsizei count, const GLuint *value);
void APIENTRY gl_dispatch_stub_1062(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY gl_dispatch_stub_1063(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY gl_dispatch_stub_1064(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY gl_dispatch_stub_1065(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY gl_dispatch_stub_1066(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY gl_dispatch_stub_1067(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY gl_dispatch_stub_1068(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY gl_dispatch_stub_1069(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY gl_dispatch_stub_1070(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY gl_dispatch_stub_1071(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY gl_dispatch_stub_1072(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY gl_dispatch_stub_1073(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY gl_dispatch_stub_1074(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY gl_dispatch_stub_1075(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY gl_dispatch_stub_1076(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY gl_dispatch_stub_1077(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY gl_dispatch_stub_1078(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY gl_dispatch_stub_1079(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY gl_dispatch_stub_1080(void);
void APIENTRY gl_dispatch_stub_1081(GLuint pipeline, GLbitfield stages, GLuint program);
void APIENTRY gl_dispatch_stub_1082(GLuint pipeline);
void APIENTRY gl_dispatch_stub_1083(GLDEBUGPROC callback, const GLvoid *userParam);
void APIENTRY gl_dispatch_stub_1084(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
void APIENTRY gl_dispatch_stub_1085(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
GLuint APIENTRY gl_dispatch_stub_1086(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
void APIENTRY gl_dispatch_stub_1087(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
void APIENTRY gl_dispatch_stub_1088(const GLvoid *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
void APIENTRY gl_dispatch_stub_1089(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
void APIENTRY gl_dispatch_stub_1090(const GLvoid *ptr, GLsizei length, const GLchar *label);
void APIENTRY gl_dispatch_stub_1091(void);
void APIENTRY gl_dispatch_stub_1092(GLenum source, GLuint id, GLsizei length, const GLchar *message);
void APIENTRY gl_dispatch_stub_1093(GLfloat red, GLfloat green, GLfloat blue);
void APIENTRY gl_dispatch_stub_1094(const GLfloat *v);
GLAPI void APIENTRY glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount);
void APIENTRY gl_dispatch_stub_1096(GLfloat coord);
void APIENTRY gl_dispatch_stub_1097(const GLfloat *coord);
void APIENTRY gl_dispatch_stub_1098(void);
void APIENTRY gl_dispatch_stub_1099(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY gl_dispatch_stub_1100(const GLdouble *v);
void APIENTRY gl_dispatch_stub_1101(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY gl_dispatch_stub_1102(const GLfloat *v);
void APIENTRY gl_dispatch_stub_1103(GLint x, GLint y, GLint z, GLint w);
void APIENTRY gl_dispatch_stub_1104(const GLint *v);
void APIENTRY gl_dispatch_stub_1105(GLshort x, GLshort y, GLshort z, GLshort w);
void APIENTRY gl_dispatch_stub_1106(const GLshort *v);
void APIENTRY gl_dispatch_stub_1107(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
void APIENTRY gl_dispatch_stub_1108(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride);
GLboolean APIENTRY gl_dispatch_stub_1109(GLsizei n, const GLuint *ids, GLboolean *residences);
void APIENTRY gl_dispatch_stub_1110(GLenum target, GLuint id, const GLfloat *params);
void APIENTRY gl_dispatch_stub_1111(GLenum target, GLuint index, GLenum pname, GLdouble *params);
void APIENTRY gl_dispatch_stub_1112(GLenum target, GLuint index, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_1113(GLuint id, GLenum pname, GLubyte *program);
void APIENTRY gl_dispatch_stub_1114(GLuint id, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_1115(GLenum target, GLuint address, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_1116(GLuint index, GLenum pname, GLdouble *params);
void APIENTRY gl_dispatch_stub_1117(GLuint index, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_1118(GLuint index, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_1119(GLenum target, GLuint id, GLsizei len, const GLubyte *program);
void APIENTRY gl_dispatch_stub_1120(GLenum target, GLuint index, GLsizei num, const GLdouble *params);
void APIENTRY gl_dispatch_stub_1121(GLenum target, GLuint index, GLsizei num, const GLfloat *params);
void APIENTRY gl_dispatch_stub_1122(GLsizei n, const GLuint *ids);
void APIENTRY gl_dispatch_stub_1123(GLenum target, GLuint address, GLenum matrix, GLenum transform);
void APIENTRY gl_dispatch_stub_1124(GLuint index, GLdouble x);
void APIENTRY gl_dispatch_stub_1125(GLuint index, const GLdouble *v);
void APIENTRY gl_dispatch_stub_1126(GLuint index, GLfloat x);
void APIENTRY gl_dispatch_stub_1127(GLuint index, const GLfloat *v);
void APIENTRY gl_dispatch_stub_1128(GLuint index, GLshort x);
void APIENTRY gl_dispatch_stub_1129(GLuint index, const GLshort *v);
void APIENTRY gl_dispatch_stub_1130(GLuint index, GLdouble x, GLdouble y);
void APIENTRY gl_dispatch_stub_1131(GLuint index, const GLdouble *v);
void APIENTRY gl_dispatch_stub_1132(GLuint index, GLfloat x, GLfloat y);
void APIENTRY gl_dispatch_stub_1133(GLuint index, const GLfloat *v);
void APIENTRY gl_dispatch_stub_1134(GLuint index, GLshort x, GLshort y);
void APIENTRY gl_dispatch_stub_1135(GLuint index, const GLshort *v);
void APIENTRY gl_dispatch_stub_1136(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void APIENTRY gl_dispatch_stub_1137(GLuint index, const GLdouble *v);
void APIENTRY gl_dispatch_stub_1138(GLuint index, GLfloat x, GLfloat y, GLfloat z);
void APIENTRY gl_dispatch_stub_1139(GLuint index, const GLfloat *v);
void APIENTRY gl_dispatch_stub_1140(GLuint index, GLshort x, GLshort y, GLshort z);
void APIENTRY gl_dispatch_stub_1141(GLuint index, const GLshort *v);
void APIENTRY gl_dispatch_stub_1142(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY gl_dispatch_stub_1143(GLuint index, const GLdouble *v);
void APIENTRY gl_dispatch_stub_1144(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY gl_dispatch_stub_1145(GLuint index, const GLfloat *v);
void APIENTRY gl_dispatch_stub_1146(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
void APIENTRY gl_dispatch_stub_1147(GLuint index, const GLshort *v);
void APIENTRY gl_dispatch_stub_1148(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
void APIENTRY gl_dispatch_stub_1149(GLuint index, const GLubyte *v);
void APIENTRY gl_dispatch_stub_1150(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_1151(GLuint index, GLsizei n, const GLdouble *v);
void APIENTRY gl_dispatch_stub_1152(GLuint index, GLsizei n, const GLfloat *v);
void APIENTRY gl_dispatch_stub_1153(GLuint index, GLsizei n, const GLshort *v);
void APIENTRY gl_dispatch_stub_1154(GLuint index, GLsizei n, const GLdouble *v);
void APIENTRY gl_dispatch_stub_1155(GLuint index, GLsizei n, const GLfloat *v);
void APIENTRY gl_dispatch_stub_1156(GLuint index, GLsizei n, const GLshort *v);
void APIENTRY gl_dispatch_stub_1157(GLuint index, GLsizei n, const GLdouble *v);
void APIENTRY gl_dispatch_stub_1158(GLuint index, GLsizei n, const GLfloat *v);
void APIENTRY gl_dispatch_stub_1159(GLuint index, GLsizei n, const GLshort *v);
void APIENTRY gl_dispatch_stub_1160(GLuint index, GLsizei n, const GLdouble *v);
void APIENTRY gl_dispatch_stub_1161(GLuint index, GLsizei n, const GLfloat *v);
void APIENTRY gl_dispatch_stub_1162(GLuint index, GLsizei n, const GLshort *v);
void APIENTRY gl_dispatch_stub_1163(GLuint index, GLsizei n, const GLubyte *v);
void APIENTRY gl_dispatch_stub_1164(GLenum pname, GLfloat *param);
void APIENTRY gl_dispatch_stub_1165(GLenum pname, GLint *param);
void APIENTRY gl_dispatch_stub_1166(GLenum pname, const GLfloat *param);
void APIENTRY gl_dispatch_stub_1167(GLenum pname, const GLint *param);
void APIENTRY gl_dispatch_stub_1168(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
void APIENTRY gl_dispatch_stub_1169(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
void APIENTRY gl_dispatch_stub_1170(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
void APIENTRY gl_dispatch_stub_1171(void);
void APIENTRY gl_dispatch_stub_1172(GLuint id);
void APIENTRY gl_dispatch_stub_1173(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
void APIENTRY gl_dispatch_stub_1174(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
void APIENTRY gl_dispatch_stub_1175(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
void APIENTRY gl_dispatch_stub_1176(GLuint id);
void APIENTRY gl_dispatch_stub_1177(void);
GLuint APIENTRY gl_dispatch_stub_1178(GLuint range);
void APIENTRY gl_dispatch_stub_1179(GLuint dst, GLuint coord, GLenum swizzle);
void APIENTRY gl_dispatch_stub_1180(GLuint dst, GLuint interp, GLenum swizzle);
void APIENTRY gl_dispatch_stub_1181(GLuint dst, const GLfloat *value);
void APIENTRY gl_dispatch_stub_1182(GLenum face);
void APIENTRY gl_dispatch_stub_1183(GLuint array);
void APIENTRY gl_dispatch_stub_1184(GLsizei n, GLuint *arrays);
void APIENTRY gl_dispatch_stub_1185(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
void APIENTRY gl_dispatch_stub_1186(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
void APIENTRY gl_dispatch_stub_1187(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY gl_dispatch_stub_1188(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
void APIENTRY gl_dispatch_stub_1189(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY gl_dispatch_stub_1190(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
void APIENTRY gl_dispatch_stub_1191(void);
void APIENTRY gl_dispatch_stub_1192(GLenum coord, GLenum pname, GLfixed *params);
void APIENTRY gl_dispatch_stub_1193(GLenum coord, GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_1194(GLenum coord, GLenum pname, const GLfixed *params);
void APIENTRY gl_dispatch_stub_1195(GLclampd zmin, GLclampd zmax);
void APIENTRY gl_dispatch_stub_1196(GLenum target, GLuint framebuffer);
void APIENTRY gl_dispatch_stub_1197(GLenum target, GLuint renderbuffer);
void APIENTRY gl_dispatch_stub_1198(GLenum target, GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_1199(GLenum target, GLintptr offset, GLsizeiptr size);
void APIENTRY gl_dispatch_stub_1200(GLuint index, GLint x);
void APIENTRY gl_dispatch_stub_1201(GLuint index, GLuint x);
void APIENTRY gl_dispatch_stub_1202(GLuint index, GLint x, GLint y);
void APIENTRY gl_dispatch_stub_1203(GLuint index, const GLint *v);
void APIENTRY gl_dispatch_stub_1204(GLuint index, GLuint x, GLuint y);
void APIENTRY gl_dispatch_stub_1205(GLuint index, const GLuint *v);
void APIENTRY gl_dispatch_stub_1206(GLuint index, GLint x, GLint y, GLint z);
void APIENTRY gl_dispatch_stub_1207(GLuint index, const GLint *v);
void APIENTRY gl_dispatch_stub_1208(GLuint index, GLuint x, GLuint y, GLuint z);
void APIENTRY gl_dispatch_stub_1209(GLuint index, const GLuint *v);
void APIENTRY gl_dispatch_stub_1210(GLuint index, GLint x, GLint y, GLint z, GLint w);
GLAPI void APIENTRY glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
void APIENTRY gl_dispatch_stub_1211(GLuint index, const GLint *v);
GLAPI void APIENTRY glVertexAttribI4iv(GLuint index, const GLint *v);
void APIENTRY gl_dispatch_stub_1212(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
GLAPI void APIENTRY glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
void APIENTRY gl_dispatch_stub_1213(GLuint index, const GLuint *v);
GLAPI void APIENTRY glVertexAttribI4uiv(GLuint index, const GLuint *v);
void APIENTRY gl_dispatch_stub_1214(GLint r, GLint g, GLint b, GLint a);
void APIENTRY gl_dispatch_stub_1215(GLuint r, GLuint g, GLuint b, GLuint a);
void APIENTRY gl_dispatch_stub_1216(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
void APIENTRY gl_dispatch_stub_1217(GLuint monitor);
void APIENTRY gl_dispatch_stub_1218(GLsizei n, GLuint *monitors);
void APIENTRY gl_dispatch_stub_1219(GLuint monitor);
void APIENTRY gl_dispatch_stub_1220(GLsizei n, GLuint *monitors);
void APIENTRY gl_dispatch_stub_1221(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
void APIENTRY gl_dispatch_stub_1222(GLuint group, GLuint counter, GLenum pname, GLvoid *data);
void APIENTRY gl_dispatch_stub_1223(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
void APIENTRY gl_dispatch_stub_1224(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters);
void APIENTRY gl_dispatch_stub_1225(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
void APIENTRY gl_dispatch_stub_1226(GLint *numGroups, GLsizei groupsSize, GLuint *groups);
void APIENTRY gl_dispatch_stub_1227(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
void APIENTRY gl_dispatch_stub_1228(GLenum objectType, GLuint name, GLenum pname, GLint *value);
GLenum APIENTRY gl_dispatch_stub_1229(GLenum objectType, GLuint name, GLenum option);
GLenum APIENTRY gl_dispatch_stub_1230(GLenum objectType, GLuint name, GLenum option);
void APIENTRY gl_dispatch_stub_1231(GLuint program);
GLuint APIENTRY gl_dispatch_stub_1232(GLenum type, const GLchar *string);
void APIENTRY gl_dispatch_stub_1233(GLenum type, GLuint program);
void APIENTRY gl_dispatch_stub_1234(void);
void APIENTRY gl_dispatch_stub_1235(void);
void APIENTRY gl_dispatch_stub_1236(GLintptr surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
void APIENTRY gl_dispatch_stub_1237(const GLvoid *vdpDevice, const GLvoid *getProcAddress);
GLboolean APIENTRY gl_dispatch_stub_1238(GLintptr surface);
void APIENTRY gl_dispatch_stub_1239(GLsizei numSurfaces, const GLintptr *surfaces);
GLintptr APIENTRY gl_dispatch_stub_1240(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
GLintptr APIENTRY gl_dispatch_stub_1241(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
void APIENTRY gl_dispatch_stub_1242(GLintptr surface, GLenum access);
void APIENTRY gl_dispatch_stub_1243(GLsizei numSurfaces, const GLintptr *surfaces);
void APIENTRY gl_dispatch_stub_1244(GLintptr surface);
void APIENTRY gl_dispatch_stub_1245(GLuint queryHandle);
void APIENTRY gl_dispatch_stub_1246(GLuint queryId, GLuint *queryHandle);
void APIENTRY gl_dispatch_stub_1247(GLuint queryHandle);
void APIENTRY gl_dispatch_stub_1248(GLuint queryHandle);
void APIENTRY gl_dispatch_stub_1249(GLuint *queryId);
void APIENTRY gl_dispatch_stub_1250(GLuint queryId, GLuint *nextQueryId);
void APIENTRY gl_dispatch_stub_1251(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue);
void APIENTRY gl_dispatch_stub_1252(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten);
void APIENTRY gl_dispatch_stub_1253(GLchar *queryName, GLuint *queryId);
void APIENTRY gl_dispatch_stub_1254(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask);
void APIENTRY gl_dispatch_stub_1255(GLfloat factor, GLfloat units, GLfloat clamp);
void APIENTRY gl_dispatch_stub_1256(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
void APIENTRY gl_dispatch_stub_1257(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
void APIENTRY gl_dispatch_stub_1258(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
void APIENTRY gl_dispatch_stub_1259(GLenum target, GLvoid *writeOffset);
void APIENTRY gl_dispatch_stub_1260(GLenum target, GLvoid *writeOffset);
void APIENTRY gl_dispatch_stub_1261(GLenum func, GLclampx ref);
void APIENTRY gl_dispatch_stub_1262(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha);
void APIENTRY gl_dispatch_stub_1263(GLclampx depth);
void APIENTRY gl_dispatch_stub_1264(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
void APIENTRY gl_dispatch_stub_1265(GLclampx zNear, GLclampx zFar);
void APIENTRY gl_dispatch_stub_1266(GLenum pname, GLfixed param);
void APIENTRY gl_dispatch_stub_1267(GLenum pname, const GLfixed *params);
void APIENTRY gl_dispatch_stub_1268(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
void APIENTRY gl_dispatch_stub_1269(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);
void APIENTRY gl_dispatch_stub_1270(GLenum pname, GLfixed param);
void APIENTRY gl_dispatch_stub_1271(GLenum pname, const GLfixed *params);
void APIENTRY gl_dispatch_stub_1272(GLenum light, GLenum pname, GLfixed param);
void APIENTRY gl_dispatch_stub_1273(GLenum light, GLenum pname, const GLfixed *params);
void APIENTRY gl_dispatch_stub_1274(GLfixed width);
void APIENTRY gl_dispatch_stub_1275(const GLfixed *m);
void APIENTRY gl_dispatch_stub_1276(GLenum face, GLenum pname, GLfixed param);
void APIENTRY gl_dispatch_stub_1277(GLenum face, GLenum pname, const GLfixed *params);
void APIENTRY gl_dispatch_stub_1278(const GLfixed *m);
void APIENTRY gl_dispatch_stub_1279(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
void APIENTRY gl_dispatch_stub_1280(GLfixed nx, GLfixed ny, GLfixed nz);
void APIENTRY gl_dispatch_stub_1281(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
void APIENTRY gl_dispatch_stub_1282(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);
void APIENTRY gl_dispatch_stub_1283(GLfixed size);
void APIENTRY gl_dispatch_stub_1284(GLfixed factor, GLfixed units);
void APIENTRY gl_dispatch_stub_1285(GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
void APIENTRY gl_dispatch_stub_1286(GLclampx value, GLboolean invert);
void APIENTRY gl_dispatch_stub_1287(GLfixed x, GLfixed y, GLfixed z);
void APIENTRY gl_dispatch_stub_1288(GLenum target, GLenum pname, GLfixed param);
void APIENTRY gl_dispatch_stub_1289(GLenum target, GLenum pname, const GLfixed *params);
void APIENTRY gl_dispatch_stub_1290(GLenum target, GLenum pname, GLfixed param);
void APIENTRY gl_dispatch_stub_1291(GLfixed x, GLfixed y, GLfixed z);
void APIENTRY gl_dispatch_stub_1292(GLenum plane, const GLfloat *equation);
void APIENTRY gl_dispatch_stub_1293(GLenum plane, const GLfixed *equation);
void APIENTRY gl_dispatch_stub_1294(GLenum plane, GLfloat *equation);
void APIENTRY gl_dispatch_stub_1295(GLenum plane, GLfixed *equation);
void APIENTRY gl_dispatch_stub_1296(GLenum pname, GLfixed *params);
void APIENTRY gl_dispatch_stub_1297(GLenum light, GLenum pname, GLfixed *params);
void APIENTRY gl_dispatch_stub_1298(GLenum face, GLenum pname, GLfixed *params);
void APIENTRY gl_dispatch_stub_1299(GLenum target, GLenum pname, GLfixed *params);
void APIENTRY gl_dispatch_stub_1300(GLenum target, GLenum pname, GLfixed *params);
void APIENTRY gl_dispatch_stub_1301(GLenum pname, GLfixed param);
void APIENTRY gl_dispatch_stub_1302(GLenum pname, const GLfixed *params);
void APIENTRY gl_dispatch_stub_1303(GLenum target, GLenum pname, const GLfixed *params);
#undef MAPI_TMP_DEFINES
#endif /* MAPI_TMP_DEFINES */

#ifdef MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN
GLAPI void APIENTRY glCullFace(GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[152];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

GLAPI void APIENTRY glFrontFace(GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[157];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

GLAPI void APIENTRY glHint(GLenum target, GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[158];
   ((void (APIENTRY *)(GLenum target, GLenum mode)) _func)(target, mode);
}

GLAPI void APIENTRY glLineWidth(GLfloat width)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[168];
   ((void (APIENTRY *)(GLfloat width)) _func)(width);
}

GLAPI void APIENTRY glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[176];
   ((void (APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height)) _func)(x, y, width, height);
}

GLAPI void APIENTRY glTexParameterf(GLenum target, GLenum pname, GLfloat param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[178];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfloat param)) _func)(target, pname, param);
}

GLAPI void APIENTRY glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[179];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLfloat *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glTexParameteri(GLenum target, GLenum pname, GLint param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[180];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint param)) _func)(target, pname, param);
}

GLAPI void APIENTRY glTexParameteriv(GLenum target, GLenum pname, const GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[181];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLint *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[183];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)) _func)(target, level, internalformat, width, height, border, format, type, pixels);
}

GLAPI void APIENTRY glClear(GLbitfield mask)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[203];
   ((void (APIENTRY *)(GLbitfield mask)) _func)(mask);
}

GLAPI void APIENTRY glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[206];
   ((void (APIENTRY *)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)) _func)(red, green, blue, alpha);
}

GLAPI void APIENTRY glClearStencil(GLint s)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[207];
   ((void (APIENTRY *)(GLint s)) _func)(s);
}

GLAPI void APIENTRY glStencilMask(GLuint mask)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[209];
   ((void (APIENTRY *)(GLuint mask)) _func)(mask);
}

GLAPI void APIENTRY glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[210];
   ((void (APIENTRY *)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)) _func)(red, green, blue, alpha);
}

GLAPI void APIENTRY glDepthMask(GLboolean flag)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[211];
   ((void (APIENTRY *)(GLboolean flag)) _func)(flag);
}

GLAPI void APIENTRY glDisable(GLenum cap)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[214];
   ((void (APIENTRY *)(GLenum cap)) _func)(cap);
}

GLAPI void APIENTRY glEnable(GLenum cap)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[215];
   ((void (APIENTRY *)(GLenum cap)) _func)(cap);
}

GLAPI void APIENTRY glFinish(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[216];
   ((void (APIENTRY *)(void)) _func)();
}

GLAPI void APIENTRY glFlush(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[217];
   ((void (APIENTRY *)(void)) _func)();
}

GLAPI void APIENTRY glBlendFunc(GLenum sfactor, GLenum dfactor)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[241];
   ((void (APIENTRY *)(GLenum sfactor, GLenum dfactor)) _func)(sfactor, dfactor);
}

GLAPI void APIENTRY glStencilFunc(GLenum func, GLint ref, GLuint mask)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[243];
   ((void (APIENTRY *)(GLenum func, GLint ref, GLuint mask)) _func)(func, ref, mask);
}

GLAPI void APIENTRY glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[244];
   ((void (APIENTRY *)(GLenum fail, GLenum zfail, GLenum zpass)) _func)(fail, zfail, zpass);
}

GLAPI void APIENTRY glDepthFunc(GLenum func)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[245];
   ((void (APIENTRY *)(GLenum func)) _func)(func);
}

GLAPI void APIENTRY glPixelStorei(GLenum pname, GLint param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[250];
   ((void (APIENTRY *)(GLenum pname, GLint param)) _func)(pname, param);
}

GLAPI void APIENTRY glReadBuffer(GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[254];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

GLAPI void APIENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[256];
   ((void (APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)) _func)(x, y, width, height, format, type, pixels);
}

GLAPI void APIENTRY glGetBooleanv(GLenum pname, GLboolean *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[258];
   ((void (APIENTRY *)(GLenum pname, GLboolean *params)) _func)(pname, params);
}

GLAPI GLenum APIENTRY glGetError(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[261];
   return ((GLenum (APIENTRY *)(void)) _func)();
}

GLAPI void APIENTRY glGetFloatv(GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[262];
   ((void (APIENTRY *)(GLenum pname, GLfloat *params)) _func)(pname, params);
}

GLAPI void APIENTRY glGetIntegerv(GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[263];
   ((void (APIENTRY *)(GLenum pname, GLint *params)) _func)(pname, params);
}

GLAPI const GLubyte * APIENTRY glGetString(GLenum name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[275];
   return ((const GLubyte * (APIENTRY *)(GLenum name)) _func)(name);
}

GLAPI void APIENTRY glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[282];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfloat *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[283];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLAPI GLboolean APIENTRY glIsEnabled(GLenum cap)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[286];
   return ((GLboolean (APIENTRY *)(GLenum cap)) _func)(cap);
}

GLAPI void APIENTRY glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[305];
   ((void (APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height)) _func)(x, y, width, height);
}

GLAPI void APIENTRY glBindTexture(GLenum target, GLuint texture)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[307];
   ((void (APIENTRY *)(GLenum target, GLuint texture)) _func)(target, texture);
}

GLAPI void APIENTRY glDrawArrays(GLenum mode, GLint first, GLsizei count)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[310];
   ((void (APIENTRY *)(GLenum mode, GLint first, GLsizei count)) _func)(mode, first, count);
}

GLAPI void APIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[311];
   ((void (APIENTRY *)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)) _func)(mode, count, type, indices);
}

GLAPI void APIENTRY glPolygonOffset(GLfloat factor, GLfloat units)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[319];
   ((void (APIENTRY *)(GLfloat factor, GLfloat units)) _func)(factor, units);
}

GLAPI void APIENTRY glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[324];
   ((void (APIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)) _func)(target, level, internalformat, x, y, width, height, border);
}

GLAPI void APIENTRY glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[326];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(target, level, xoffset, yoffset, x, y, width, height);
}

GLAPI void APIENTRY glDeleteTextures(GLsizei n, const GLuint *textures)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[327];
   ((void (APIENTRY *)(GLsizei n, const GLuint *textures)) _func)(n, textures);
}

GLAPI void APIENTRY glGenTextures(GLsizei n, GLuint *textures)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[328];
   ((void (APIENTRY *)(GLsizei n, GLuint *textures)) _func)(n, textures);
}

GLAPI GLboolean APIENTRY glIsTexture(GLuint texture)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[330];
   return ((GLboolean (APIENTRY *)(GLuint texture)) _func)(texture);
}

GLAPI void APIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[333];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)) _func)(target, level, xoffset, yoffset, width, height, format, type, pixels);
}

GLAPI void APIENTRY glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[336];
   ((void (APIENTRY *)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)) _func)(red, green, blue, alpha);
}

GLAPI void APIENTRY glBlendEquation(GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[337];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

GLAPI void APIENTRY glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[338];
   ((void (APIENTRY *)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)) _func)(mode, start, end, count, type, indices);
}

GLAPI void APIENTRY glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[371];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)) _func)(target, level, internalformat, width, height, depth, border, format, type, pixels);
}

GLAPI void APIENTRY glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[372];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)) _func)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

GLAPI void APIENTRY glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[373];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

GLAPI void APIENTRY glActiveTexture(GLenum texture)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[374];
   ((void (APIENTRY *)(GLenum texture)) _func)(texture);
}

GLAPI void APIENTRY glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[409];
   ((void (APIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)) _func)(target, level, internalformat, width, height, border, imageSize, data);
}

GLAPI void APIENTRY glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[410];
   ((void (APIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)) _func)(target, level, internalformat, width, height, depth, border, imageSize, data);
}

GLAPI void APIENTRY glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[412];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)) _func)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

GLAPI void APIENTRY glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[413];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)) _func)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

GLAPI void APIENTRY glSampleCoverage(GLclampf value, GLboolean invert)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[419];
   ((void (APIENTRY *)(GLclampf value, GLboolean invert)) _func)(value, invert);
}

GLAPI void APIENTRY glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[420];
   ((void (APIENTRY *)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)) _func)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

GLAPI void APIENTRY glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[424];
   ((void (APIENTRY *)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)) _func)(mode, first, count, primcount);
}

GLAPI void APIENTRY glBeginQuery(GLenum target, GLuint id)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[460];
   ((void (APIENTRY *)(GLenum target, GLuint id)) _func)(target, id);
}

GLAPI void APIENTRY glBindBuffer(GLenum target, GLuint buffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[461];
   ((void (APIENTRY *)(GLenum target, GLuint buffer)) _func)(target, buffer);
}

GLAPI void APIENTRY glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[462];
   ((void (APIENTRY *)(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)) _func)(target, size, data, usage);
}

GLAPI void APIENTRY glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[463];
   ((void (APIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)) _func)(target, offset, size, data);
}

GLAPI void APIENTRY glDeleteBuffers(GLsizei n, const GLuint *buffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[464];
   ((void (APIENTRY *)(GLsizei n, const GLuint *buffer)) _func)(n, buffer);
}

GLAPI void APIENTRY glDeleteQueries(GLsizei n, const GLuint *ids)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[465];
   ((void (APIENTRY *)(GLsizei n, const GLuint *ids)) _func)(n, ids);
}

GLAPI void APIENTRY glEndQuery(GLenum target)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[466];
   ((void (APIENTRY *)(GLenum target)) _func)(target);
}

GLAPI void APIENTRY glGenBuffers(GLsizei n, GLuint *buffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[467];
   ((void (APIENTRY *)(GLsizei n, GLuint *buffer)) _func)(n, buffer);
}

GLAPI void APIENTRY glGenQueries(GLsizei n, GLuint *ids)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[468];
   ((void (APIENTRY *)(GLsizei n, GLuint *ids)) _func)(n, ids);
}

GLAPI void APIENTRY glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[469];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glGetBufferPointerv(GLenum target, GLenum pname, GLvoid **params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[470];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLvoid **params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[473];
   ((void (APIENTRY *)(GLuint id, GLenum pname, GLuint *params)) _func)(id, pname, params);
}

GLAPI void APIENTRY glGetQueryiv(GLenum target, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[474];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLAPI GLboolean APIENTRY glIsBuffer(GLuint buffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[475];
   return ((GLboolean (APIENTRY *)(GLuint buffer)) _func)(buffer);
}

GLAPI GLboolean APIENTRY glIsQuery(GLuint id)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[476];
   return ((GLboolean (APIENTRY *)(GLuint id)) _func)(id);
}

GLAPI GLboolean APIENTRY glUnmapBuffer(GLenum target)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[478];
   return ((GLboolean (APIENTRY *)(GLenum target)) _func)(target);
}

GLAPI void APIENTRY glAttachShader(GLuint program, GLuint shader)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[479];
   ((void (APIENTRY *)(GLuint program, GLuint shader)) _func)(program, shader);
}

GLAPI void APIENTRY glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[480];
   ((void (APIENTRY *)(GLuint program, GLuint index, const GLchar *name)) _func)(program, index, name);
}

GLAPI void APIENTRY glBlendEquationSeparate(GLenum modeRGB, GLenum modeA)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[481];
   ((void (APIENTRY *)(GLenum modeRGB, GLenum modeA)) _func)(modeRGB, modeA);
}

GLAPI void APIENTRY glCompileShader(GLuint shader)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[482];
   ((void (APIENTRY *)(GLuint shader)) _func)(shader);
}

GLAPI GLuint APIENTRY glCreateProgram(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[483];
   return ((GLuint (APIENTRY *)(void)) _func)();
}

GLAPI GLuint APIENTRY glCreateShader(GLenum type)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[484];
   return ((GLuint (APIENTRY *)(GLenum type)) _func)(type);
}

GLAPI void APIENTRY glDeleteProgram(GLuint program)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[485];
   ((void (APIENTRY *)(GLuint program)) _func)(program);
}

GLAPI void APIENTRY glDeleteShader(GLuint program)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[486];
   ((void (APIENTRY *)(GLuint program)) _func)(program);
}

GLAPI void APIENTRY glDetachShader(GLuint program, GLuint shader)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[487];
   ((void (APIENTRY *)(GLuint program, GLuint shader)) _func)(program, shader);
}

GLAPI void APIENTRY glDisableVertexAttribArray(GLuint index)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[488];
   ((void (APIENTRY *)(GLuint index)) _func)(index);
}

GLAPI void APIENTRY glDrawBuffers(GLsizei n, const GLenum *bufs)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[489];
   ((void (APIENTRY *)(GLsizei n, const GLenum *bufs)) _func)(n, bufs);
}

GLAPI void APIENTRY glEnableVertexAttribArray(GLuint index)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[490];
   ((void (APIENTRY *)(GLuint index)) _func)(index);
}

GLAPI void APIENTRY glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[491];
   ((void (APIENTRY *)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)) _func)(program, index, bufSize, length, size, type, name);
}

GLAPI void APIENTRY glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[492];
   ((void (APIENTRY *)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)) _func)(program, index, bufSize, length, size, type, name);
}

GLAPI void APIENTRY glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[493];
   ((void (APIENTRY *)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj)) _func)(program, maxCount, count, obj);
}

GLAPI GLint APIENTRY glGetAttribLocation(GLuint program, const GLchar *name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[494];
   return ((GLint (APIENTRY *)(GLuint program, const GLchar *name)) _func)(program, name);
}

GLAPI void APIENTRY glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[495];
   ((void (APIENTRY *)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)) _func)(program, bufSize, length, infoLog);
}

GLAPI void APIENTRY glGetProgramiv(GLuint program, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[496];
   ((void (APIENTRY *)(GLuint program, GLenum pname, GLint *params)) _func)(program, pname, params);
}

GLAPI void APIENTRY glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[497];
   ((void (APIENTRY *)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)) _func)(shader, bufSize, length, infoLog);
}

GLAPI void APIENTRY glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[498];
   ((void (APIENTRY *)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)) _func)(shader, bufSize, length, source);
}

GLAPI void APIENTRY glGetShaderiv(GLuint shader, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[499];
   ((void (APIENTRY *)(GLuint shader, GLenum pname, GLint *params)) _func)(shader, pname, params);
}

GLAPI GLint APIENTRY glGetUniformLocation(GLuint program, const GLchar *name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[500];
   return ((GLint (APIENTRY *)(GLuint program, const GLchar *name)) _func)(program, name);
}

GLAPI void APIENTRY glGetUniformfv(GLuint program, GLint location, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[501];
   ((void (APIENTRY *)(GLuint program, GLint location, GLfloat *params)) _func)(program, location, params);
}

GLAPI void APIENTRY glGetUniformiv(GLuint program, GLint location, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[502];
   ((void (APIENTRY *)(GLuint program, GLint location, GLint *params)) _func)(program, location, params);
}

GLAPI void APIENTRY glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[503];
   ((void (APIENTRY *)(GLuint index, GLenum pname, GLvoid **pointer)) _func)(index, pname, pointer);
}

GLAPI void APIENTRY glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[505];
   ((void (APIENTRY *)(GLuint index, GLenum pname, GLfloat *params)) _func)(index, pname, params);
}

GLAPI void APIENTRY glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[506];
   ((void (APIENTRY *)(GLuint index, GLenum pname, GLint *params)) _func)(index, pname, params);
}

GLAPI GLboolean APIENTRY glIsProgram(GLuint program)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[507];
   return ((GLboolean (APIENTRY *)(GLuint program)) _func)(program);
}

GLAPI GLboolean APIENTRY glIsShader(GLuint shader)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[508];
   return ((GLboolean (APIENTRY *)(GLuint shader)) _func)(shader);
}

GLAPI void APIENTRY glLinkProgram(GLuint program)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[509];
   ((void (APIENTRY *)(GLuint program)) _func)(program);
}

GLAPI void APIENTRY glShaderSource(GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[510];
   ((void (APIENTRY *)(GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length)) _func)(shader, count, string, length);
}

GLAPI void APIENTRY glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[511];
   ((void (APIENTRY *)(GLenum face, GLenum func, GLint ref, GLuint mask)) _func)(face, func, ref, mask);
}

GLAPI void APIENTRY glStencilMaskSeparate(GLenum face, GLuint mask)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[512];
   ((void (APIENTRY *)(GLenum face, GLuint mask)) _func)(face, mask);
}

GLAPI void APIENTRY glStencilOpSeparate(GLenum face, GLenum sfail, GLenum zfail, GLenum zpass)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[513];
   ((void (APIENTRY *)(GLenum face, GLenum sfail, GLenum zfail, GLenum zpass)) _func)(face, sfail, zfail, zpass);
}

GLAPI void APIENTRY glUniform1f(GLint location, GLfloat v0)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[514];
   ((void (APIENTRY *)(GLint location, GLfloat v0)) _func)(location, v0);
}

GLAPI void APIENTRY glUniform1fv(GLint location, GLsizei count, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[515];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLfloat *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniform1i(GLint location, GLint v0)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[516];
   ((void (APIENTRY *)(GLint location, GLint v0)) _func)(location, v0);
}

GLAPI void APIENTRY glUniform1iv(GLint location, GLsizei count, const GLint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[517];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLint *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniform2f(GLint location, GLfloat v0, GLfloat v1)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[518];
   ((void (APIENTRY *)(GLint location, GLfloat v0, GLfloat v1)) _func)(location, v0, v1);
}

GLAPI void APIENTRY glUniform2fv(GLint location, GLsizei count, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[519];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLfloat *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniform2i(GLint location, GLint v0, GLint v1)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[520];
   ((void (APIENTRY *)(GLint location, GLint v0, GLint v1)) _func)(location, v0, v1);
}

GLAPI void APIENTRY glUniform2iv(GLint location, GLsizei count, const GLint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[521];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLint *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[522];
   ((void (APIENTRY *)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)) _func)(location, v0, v1, v2);
}

GLAPI void APIENTRY glUniform3fv(GLint location, GLsizei count, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[523];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLfloat *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[524];
   ((void (APIENTRY *)(GLint location, GLint v0, GLint v1, GLint v2)) _func)(location, v0, v1, v2);
}

GLAPI void APIENTRY glUniform3iv(GLint location, GLsizei count, const GLint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[525];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLint *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[526];
   ((void (APIENTRY *)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)) _func)(location, v0, v1, v2, v3);
}

GLAPI void APIENTRY glUniform4fv(GLint location, GLsizei count, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[527];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLfloat *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[528];
   ((void (APIENTRY *)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)) _func)(location, v0, v1, v2, v3);
}

GLAPI void APIENTRY glUniform4iv(GLint location, GLsizei count, const GLint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[529];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLint *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[530];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

GLAPI void APIENTRY glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[531];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

GLAPI void APIENTRY glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[532];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

GLAPI void APIENTRY glUseProgram(GLuint program)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[533];
   ((void (APIENTRY *)(GLuint program)) _func)(program);
}

GLAPI void APIENTRY glValidateProgram(GLuint program)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[534];
   ((void (APIENTRY *)(GLuint program)) _func)(program);
}

GLAPI void APIENTRY glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[563];
   ((void (APIENTRY *)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)) _func)(index, size, type, normalized, stride, pointer);
}

GLAPI void APIENTRY glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[564];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

GLAPI void APIENTRY glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[565];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

GLAPI void APIENTRY glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[566];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

GLAPI void APIENTRY glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[567];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

GLAPI void APIENTRY glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[568];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

GLAPI void APIENTRY glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[569];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

GLAPI void APIENTRY glBeginTransformFeedback(GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[571];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

GLAPI void APIENTRY glBindBufferBase(GLenum target, GLuint index, GLuint buffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[572];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLuint buffer)) _func)(target, index, buffer);
}

GLAPI void APIENTRY glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[573];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)) _func)(target, index, buffer, offset, size);
}

GLAPI void APIENTRY glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[576];
   ((void (APIENTRY *)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)) _func)(buffer, drawbuffer, depth, stencil);
}

GLAPI void APIENTRY glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[577];
   ((void (APIENTRY *)(GLenum buffer, GLint drawbuffer, const GLfloat *value)) _func)(buffer, drawbuffer, value);
}

GLAPI void APIENTRY glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[578];
   ((void (APIENTRY *)(GLenum buffer, GLint drawbuffer, const GLint *value)) _func)(buffer, drawbuffer, value);
}

GLAPI void APIENTRY glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[579];
   ((void (APIENTRY *)(GLenum buffer, GLint drawbuffer, const GLuint *value)) _func)(buffer, drawbuffer, value);
}

GLAPI void APIENTRY glEndTransformFeedback(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[584];
   ((void (APIENTRY *)(void)) _func)();
}

GLAPI GLint APIENTRY glGetFragDataLocation(GLuint program, const GLchar *name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[586];
   return ((GLint (APIENTRY *)(GLuint program, const GLchar *name)) _func)(program, name);
}

GLAPI void APIENTRY glGetIntegeri_v(GLenum value, GLuint index, GLint *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[587];
   ((void (APIENTRY *)(GLenum value, GLuint index, GLint *data)) _func)(value, index, data);
}

GLAPI const GLubyte * APIENTRY glGetStringi(GLenum name, GLuint index)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[588];
   return ((const GLubyte * (APIENTRY *)(GLenum name, GLuint index)) _func)(name, index);
}

GLAPI void APIENTRY glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[591];
   ((void (APIENTRY *)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)) _func)(program, index, bufSize, length, size, type, name);
}

GLAPI void APIENTRY glGetUniformuiv(GLuint program, GLint location, GLuint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[592];
   ((void (APIENTRY *)(GLuint program, GLint location, GLuint *params)) _func)(program, location, params);
}

GLAPI void APIENTRY glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[593];
   ((void (APIENTRY *)(GLuint index, GLenum pname, GLint *params)) _func)(index, pname, params);
}

GLAPI void APIENTRY glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[594];
   ((void (APIENTRY *)(GLuint index, GLenum pname, GLuint *params)) _func)(index, pname, params);
}

GLAPI void APIENTRY glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar * const *varyings, GLenum bufferMode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[598];
   ((void (APIENTRY *)(GLuint program, GLsizei count, const GLchar * const *varyings, GLenum bufferMode)) _func)(program, count, varyings, bufferMode);
}

GLAPI void APIENTRY glUniform1ui(GLint location, GLuint x)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[599];
   ((void (APIENTRY *)(GLint location, GLuint x)) _func)(location, x);
}

GLAPI void APIENTRY glUniform1uiv(GLint location, GLsizei count, const GLuint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[600];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLuint *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniform2ui(GLint location, GLuint x, GLuint y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[601];
   ((void (APIENTRY *)(GLint location, GLuint x, GLuint y)) _func)(location, x, y);
}

GLAPI void APIENTRY glUniform2uiv(GLint location, GLsizei count, const GLuint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[602];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLuint *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniform3ui(GLint location, GLuint x, GLuint y, GLuint z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[603];
   ((void (APIENTRY *)(GLint location, GLuint x, GLuint y, GLuint z)) _func)(location, x, y, z);
}

GLAPI void APIENTRY glUniform3uiv(GLint location, GLsizei count, const GLuint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[604];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLuint *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniform4ui(GLint location, GLuint x, GLuint y, GLuint z, GLuint w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[605];
   ((void (APIENTRY *)(GLint location, GLuint x, GLuint y, GLuint z, GLuint w)) _func)(location, x, y, z, w);
}

GLAPI void APIENTRY glUniform4uiv(GLint location, GLsizei count, const GLuint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[606];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLuint *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[613];
   ((void (APIENTRY *)(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(index, size, type, stride, pointer);
}

GLAPI void APIENTRY glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[617];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint64 *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glGetInteger64i_v(GLenum cap, GLuint index, GLint64 *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[618];
   ((void (APIENTRY *)(GLenum cap, GLuint index, GLint64 *data)) _func)(cap, index, data);
}

GLAPI void APIENTRY glVertexAttribDivisor(GLuint index, GLuint divisor)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[619];
   ((void (APIENTRY *)(GLuint index, GLuint divisor)) _func)(index, divisor);
}

GLAPI void APIENTRY glVertexAttrib1f(GLuint index, GLfloat x)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[640];
   ((void (APIENTRY *)(GLuint index, GLfloat x)) _func)(index, x);
}

GLAPI void APIENTRY glVertexAttrib1fv(GLuint index, const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[641];
   ((void (APIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

GLAPI void APIENTRY glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[642];
   ((void (APIENTRY *)(GLuint index, GLfloat x, GLfloat y)) _func)(index, x, y);
}

GLAPI void APIENTRY glVertexAttrib2fv(GLuint index, const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[643];
   ((void (APIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

GLAPI void APIENTRY glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[644];
   ((void (APIENTRY *)(GLuint index, GLfloat x, GLfloat y, GLfloat z)) _func)(index, x, y, z);
}

GLAPI void APIENTRY glVertexAttrib3fv(GLuint index, const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[645];
   ((void (APIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

GLAPI void APIENTRY glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[646];
   ((void (APIENTRY *)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)) _func)(index, x, y, z, w);
}

GLAPI void APIENTRY glVertexAttrib4fv(GLuint index, const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[647];
   ((void (APIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

GLAPI void APIENTRY glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[658];
   ((void (APIENTRY *)(GLenum mode, GLint first, GLsizei count, GLsizei primcount)) _func)(mode, first, count, primcount);
}

GLAPI void APIENTRY glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[659];
   ((void (APIENTRY *)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)) _func)(mode, count, type, indices, primcount);
}

GLAPI void APIENTRY glBindFramebuffer(GLenum target, GLuint framebuffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[660];
   ((void (APIENTRY *)(GLenum target, GLuint framebuffer)) _func)(target, framebuffer);
}

GLAPI void APIENTRY glBindRenderbuffer(GLenum target, GLuint renderbuffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[661];
   ((void (APIENTRY *)(GLenum target, GLuint renderbuffer)) _func)(target, renderbuffer);
}

GLAPI void APIENTRY glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[662];
   ((void (APIENTRY *)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)) _func)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

GLAPI GLenum APIENTRY glCheckFramebufferStatus(GLenum target)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[663];
   return ((GLenum (APIENTRY *)(GLenum target)) _func)(target);
}

GLAPI void APIENTRY glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[664];
   ((void (APIENTRY *)(GLsizei n, const GLuint *framebuffers)) _func)(n, framebuffers);
}

GLAPI void APIENTRY glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[665];
   ((void (APIENTRY *)(GLsizei n, const GLuint *renderbuffers)) _func)(n, renderbuffers);
}

GLAPI void APIENTRY glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[666];
   ((void (APIENTRY *)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)) _func)(target, attachment, renderbuffertarget, renderbuffer);
}

GLAPI void APIENTRY glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[668];
   ((void (APIENTRY *)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)) _func)(target, attachment, textarget, texture, level);
}

GLAPI void APIENTRY glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[670];
   ((void (APIENTRY *)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)) _func)(target, attachment, texture, level, layer);
}

GLAPI void APIENTRY glGenFramebuffers(GLsizei n, GLuint *framebuffers)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[671];
   ((void (APIENTRY *)(GLsizei n, GLuint *framebuffers)) _func)(n, framebuffers);
}

GLAPI void APIENTRY glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[672];
   ((void (APIENTRY *)(GLsizei n, GLuint *renderbuffers)) _func)(n, renderbuffers);
}

GLAPI void APIENTRY glGenerateMipmap(GLenum target)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[673];
   ((void (APIENTRY *)(GLenum target)) _func)(target);
}

GLAPI void APIENTRY glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[674];
   ((void (APIENTRY *)(GLenum target, GLenum attachment, GLenum pname, GLint *params)) _func)(target, attachment, pname, params);
}

GLAPI void APIENTRY glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[675];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLAPI GLboolean APIENTRY glIsFramebuffer(GLuint framebuffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[676];
   return ((GLboolean (APIENTRY *)(GLuint framebuffer)) _func)(framebuffer);
}

GLAPI GLboolean APIENTRY glIsRenderbuffer(GLuint renderbuffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[677];
   return ((GLboolean (APIENTRY *)(GLuint renderbuffer)) _func)(renderbuffer);
}

GLAPI void APIENTRY glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[678];
   ((void (APIENTRY *)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)) _func)(target, internalformat, width, height);
}

GLAPI void APIENTRY glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[679];
   ((void (APIENTRY *)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)) _func)(target, samples, internalformat, width, height);
}

GLAPI void APIENTRY glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[680];
   ((void (APIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr length)) _func)(target, offset, length);
}

GLAPI GLvoid * APIENTRY glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[681];
   return ((GLvoid * (APIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)) _func)(target, offset, length, access);
}

GLAPI void APIENTRY glBindVertexArray(GLuint array)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[682];
   ((void (APIENTRY *)(GLuint array)) _func)(array);
}

GLAPI void APIENTRY glDeleteVertexArrays(GLsizei n, const GLuint *arrays)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[683];
   ((void (APIENTRY *)(GLsizei n, const GLuint *arrays)) _func)(n, arrays);
}

GLAPI void APIENTRY glGenVertexArrays(GLsizei n, GLuint *arrays)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[684];
   ((void (APIENTRY *)(GLsizei n, GLuint *arrays)) _func)(n, arrays);
}

GLAPI GLboolean APIENTRY glIsVertexArray(GLuint array)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[685];
   return ((GLboolean (APIENTRY *)(GLuint array)) _func)(array);
}

GLAPI void APIENTRY glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[686];
   ((void (APIENTRY *)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)) _func)(program, uniformBlockIndex, bufSize, length, uniformBlockName);
}

GLAPI void APIENTRY glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[687];
   ((void (APIENTRY *)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)) _func)(program, uniformBlockIndex, pname, params);
}

GLAPI void APIENTRY glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[689];
   ((void (APIENTRY *)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)) _func)(program, uniformCount, uniformIndices, pname, params);
}

GLAPI GLuint APIENTRY glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[690];
   return ((GLuint (APIENTRY *)(GLuint program, const GLchar *uniformBlockName)) _func)(program, uniformBlockName);
}

GLAPI void APIENTRY glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar * const *uniformNames, GLuint *uniformIndices)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[691];
   ((void (APIENTRY *)(GLuint program, GLsizei uniformCount, const GLchar * const *uniformNames, GLuint *uniformIndices)) _func)(program, uniformCount, uniformNames, uniformIndices);
}

GLAPI void APIENTRY glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[692];
   ((void (APIENTRY *)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)) _func)(program, uniformBlockIndex, uniformBlockBinding);
}

GLAPI void APIENTRY glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[693];
   ((void (APIENTRY *)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)) _func)(readTarget, writeTarget, readOffset, writeOffset, size);
}

GLAPI GLenum APIENTRY glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[694];
   return ((GLenum (APIENTRY *)(GLsync sync, GLbitfield flags, GLuint64 timeout)) _func)(sync, flags, timeout);
}

GLAPI void APIENTRY glDeleteSync(GLsync sync)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[695];
   ((void (APIENTRY *)(GLsync sync)) _func)(sync);
}

GLAPI GLsync APIENTRY glFenceSync(GLenum condition, GLbitfield flags)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[696];
   return ((GLsync (APIENTRY *)(GLenum condition, GLbitfield flags)) _func)(condition, flags);
}

GLAPI void APIENTRY glGetInteger64v(GLenum pname, GLint64 *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[697];
   ((void (APIENTRY *)(GLenum pname, GLint64 *params)) _func)(pname, params);
}

GLAPI void APIENTRY glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[698];
   ((void (APIENTRY *)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)) _func)(sync, pname, bufSize, length, values);
}

GLAPI GLboolean APIENTRY glIsSync(GLsync sync)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[699];
   return ((GLboolean (APIENTRY *)(GLsync sync)) _func)(sync);
}

GLAPI void APIENTRY glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[700];
   ((void (APIENTRY *)(GLsync sync, GLbitfield flags, GLuint64 timeout)) _func)(sync, flags, timeout);
}

GLAPI void APIENTRY glBindSampler(GLuint unit, GLuint sampler)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[716];
   ((void (APIENTRY *)(GLuint unit, GLuint sampler)) _func)(unit, sampler);
}

GLAPI void APIENTRY glDeleteSamplers(GLsizei count, const GLuint *samplers)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[717];
   ((void (APIENTRY *)(GLsizei count, const GLuint *samplers)) _func)(count, samplers);
}

GLAPI void APIENTRY glGenSamplers(GLsizei count, GLuint *samplers)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[718];
   ((void (APIENTRY *)(GLsizei count, GLuint *samplers)) _func)(count, samplers);
}

GLAPI void APIENTRY glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[721];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, GLfloat *params)) _func)(sampler, pname, params);
}

GLAPI void APIENTRY glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[722];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, GLint *params)) _func)(sampler, pname, params);
}

GLAPI GLboolean APIENTRY glIsSampler(GLuint sampler)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[723];
   return ((GLboolean (APIENTRY *)(GLuint sampler)) _func)(sampler);
}

GLAPI void APIENTRY glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[726];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, GLfloat param)) _func)(sampler, pname, param);
}

GLAPI void APIENTRY glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[727];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, const GLfloat *params)) _func)(sampler, pname, params);
}

GLAPI void APIENTRY glSamplerParameteri(GLuint sampler, GLenum pname, GLint param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[728];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, GLint param)) _func)(sampler, pname, param);
}

GLAPI void APIENTRY glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[729];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, const GLint *params)) _func)(sampler, pname, params);
}

GLAPI void APIENTRY glBindTransformFeedback(GLenum target, GLuint id)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[791];
   ((void (APIENTRY *)(GLenum target, GLuint id)) _func)(target, id);
}

GLAPI void APIENTRY glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[792];
   ((void (APIENTRY *)(GLsizei n, const GLuint *ids)) _func)(n, ids);
}

GLAPI void APIENTRY glGenTransformFeedbacks(GLsizei n, GLuint *ids)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[794];
   ((void (APIENTRY *)(GLsizei n, GLuint *ids)) _func)(n, ids);
}

GLAPI GLboolean APIENTRY glIsTransformFeedback(GLuint id)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[795];
   return ((GLboolean (APIENTRY *)(GLuint id)) _func)(id);
}

GLAPI void APIENTRY glPauseTransformFeedback(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[796];
   ((void (APIENTRY *)(void)) _func)();
}

GLAPI void APIENTRY glResumeTransformFeedback(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[797];
   ((void (APIENTRY *)(void)) _func)();
}

GLAPI void APIENTRY glClearDepthf(GLclampf depth)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[802];
   ((void (APIENTRY *)(GLclampf depth)) _func)(depth);
}

GLAPI void APIENTRY glDepthRangef(GLclampf zNear, GLclampf zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[803];
   ((void (APIENTRY *)(GLclampf zNear, GLclampf zFar)) _func)(zNear, zFar);
}

GLAPI void APIENTRY glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[804];
   ((void (APIENTRY *)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)) _func)(shadertype, precisiontype, range, precision);
}

GLAPI void APIENTRY glReleaseShaderCompiler(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[805];
   ((void (APIENTRY *)(void)) _func)();
}

GLAPI void APIENTRY glShaderBinary(GLsizei n, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[806];
   ((void (APIENTRY *)(GLsizei n, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)) _func)(n, shaders, binaryformat, binary, length);
}

GLAPI void APIENTRY glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[807];
   ((void (APIENTRY *)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)) _func)(program, bufSize, length, binaryFormat, binary);
}

GLAPI void APIENTRY glProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[808];
   ((void (APIENTRY *)(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length)) _func)(program, binaryFormat, binary, length);
}

GLAPI void APIENTRY glProgramParameteri(GLuint program, GLenum pname, GLint value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[809];
   ((void (APIENTRY *)(GLuint program, GLenum pname, GLint value)) _func)(program, pname, value);
}

GLAPI void APIENTRY glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[855];
   ((void (APIENTRY *)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)) _func)(target, internalformat, pname, bufSize, params);
}

GLAPI void APIENTRY glTexStorage2D(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[860];
   ((void (APIENTRY *)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height)) _func)(target, levels, internalFormat, width, height);
}

GLAPI void APIENTRY glTexStorage3D(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[861];
   ((void (APIENTRY *)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth)) _func)(target, levels, internalFormat, width, height, depth);
}

GLAPI void APIENTRY glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[997];
   ((void (APIENTRY *)(GLenum target, GLsizei numAttachments, const GLenum *attachments)) _func)(target, numAttachments, attachments);
}

GLAPI void APIENTRY glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[998];
   ((void (APIENTRY *)(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(target, numAttachments, attachments, x, y, width, height);
}

GLAPI void APIENTRY glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1095];
   ((void (APIENTRY *)(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount)) _func)(mode, count, type, indices, primcount);
}

GLAPI void APIENTRY glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1210];
   ((void (APIENTRY *)(GLuint index, GLint x, GLint y, GLint z, GLint w)) _func)(index, x, y, z, w);
}

GLAPI void APIENTRY glVertexAttribI4iv(GLuint index, const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1211];
   ((void (APIENTRY *)(GLuint index, const GLint *v)) _func)(index, v);
}

GLAPI void APIENTRY glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1212];
   ((void (APIENTRY *)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)) _func)(index, x, y, z, w);
}

GLAPI void APIENTRY glVertexAttribI4uiv(GLuint index, const GLuint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1213];
   ((void (APIENTRY *)(GLuint index, const GLuint *v)) _func)(index, v);
}

/* does not need public_entries */
#undef MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN
#endif /* MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN */

#ifdef MAPI_TMP_STUB_ASM_GCC_NO_HIDDEN
__asm__(
STUB_ASM_ENTRY("glCullFace")"\n"
"\t"STUB_ASM_CODE("152")"\n"

STUB_ASM_ENTRY("glFrontFace")"\n"
"\t"STUB_ASM_CODE("157")"\n"

STUB_ASM_ENTRY("glHint")"\n"
"\t"STUB_ASM_CODE("158")"\n"

STUB_ASM_ENTRY("glLineWidth")"\n"
"\t"STUB_ASM_CODE("168")"\n"

STUB_ASM_ENTRY("glScissor")"\n"
"\t"STUB_ASM_CODE("176")"\n"

STUB_ASM_ENTRY("glTexParameterf")"\n"
"\t"STUB_ASM_CODE("178")"\n"

STUB_ASM_ENTRY("glTexParameterfv")"\n"
"\t"STUB_ASM_CODE("179")"\n"

STUB_ASM_ENTRY("glTexParameteri")"\n"
"\t"STUB_ASM_CODE("180")"\n"

STUB_ASM_ENTRY("glTexParameteriv")"\n"
"\t"STUB_ASM_CODE("181")"\n"

STUB_ASM_ENTRY("glTexImage2D")"\n"
"\t"STUB_ASM_CODE("183")"\n"

STUB_ASM_ENTRY("glClear")"\n"
"\t"STUB_ASM_CODE("203")"\n"

STUB_ASM_ENTRY("glClearColor")"\n"
"\t"STUB_ASM_CODE("206")"\n"

STUB_ASM_ENTRY("glClearStencil")"\n"
"\t"STUB_ASM_CODE("207")"\n"

STUB_ASM_ENTRY("glStencilMask")"\n"
"\t"STUB_ASM_CODE("209")"\n"

STUB_ASM_ENTRY("glColorMask")"\n"
"\t"STUB_ASM_CODE("210")"\n"

STUB_ASM_ENTRY("glDepthMask")"\n"
"\t"STUB_ASM_CODE("211")"\n"

STUB_ASM_ENTRY("glDisable")"\n"
"\t"STUB_ASM_CODE("214")"\n"

STUB_ASM_ENTRY("glEnable")"\n"
"\t"STUB_ASM_CODE("215")"\n"

STUB_ASM_ENTRY("glFinish")"\n"
"\t"STUB_ASM_CODE("216")"\n"

STUB_ASM_ENTRY("glFlush")"\n"
"\t"STUB_ASM_CODE("217")"\n"

STUB_ASM_ENTRY("glBlendFunc")"\n"
"\t"STUB_ASM_CODE("241")"\n"

STUB_ASM_ENTRY("glStencilFunc")"\n"
"\t"STUB_ASM_CODE("243")"\n"

STUB_ASM_ENTRY("glStencilOp")"\n"
"\t"STUB_ASM_CODE("244")"\n"

STUB_ASM_ENTRY("glDepthFunc")"\n"
"\t"STUB_ASM_CODE("245")"\n"

STUB_ASM_ENTRY("glPixelStorei")"\n"
"\t"STUB_ASM_CODE("250")"\n"

STUB_ASM_ENTRY("glReadBuffer")"\n"
"\t"STUB_ASM_CODE("254")"\n"

STUB_ASM_ENTRY("glReadPixels")"\n"
"\t"STUB_ASM_CODE("256")"\n"

STUB_ASM_ENTRY("glGetBooleanv")"\n"
"\t"STUB_ASM_CODE("258")"\n"

STUB_ASM_ENTRY("glGetError")"\n"
"\t"STUB_ASM_CODE("261")"\n"

STUB_ASM_ENTRY("glGetFloatv")"\n"
"\t"STUB_ASM_CODE("262")"\n"

STUB_ASM_ENTRY("glGetIntegerv")"\n"
"\t"STUB_ASM_CODE("263")"\n"

STUB_ASM_ENTRY("glGetString")"\n"
"\t"STUB_ASM_CODE("275")"\n"

STUB_ASM_ENTRY("glGetTexParameterfv")"\n"
"\t"STUB_ASM_CODE("282")"\n"

STUB_ASM_ENTRY("glGetTexParameteriv")"\n"
"\t"STUB_ASM_CODE("283")"\n"

STUB_ASM_ENTRY("glIsEnabled")"\n"
"\t"STUB_ASM_CODE("286")"\n"

STUB_ASM_ENTRY("glViewport")"\n"
"\t"STUB_ASM_CODE("305")"\n"

STUB_ASM_ENTRY("glBindTexture")"\n"
"\t"STUB_ASM_CODE("307")"\n"

STUB_ASM_ENTRY("glDrawArrays")"\n"
"\t"STUB_ASM_CODE("310")"\n"

STUB_ASM_ENTRY("glDrawElements")"\n"
"\t"STUB_ASM_CODE("311")"\n"

STUB_ASM_ENTRY("glPolygonOffset")"\n"
"\t"STUB_ASM_CODE("319")"\n"

STUB_ASM_ENTRY("glCopyTexImage2D")"\n"
"\t"STUB_ASM_CODE("324")"\n"

STUB_ASM_ENTRY("glCopyTexSubImage2D")"\n"
"\t"STUB_ASM_CODE("326")"\n"

STUB_ASM_ENTRY("glDeleteTextures")"\n"
"\t"STUB_ASM_CODE("327")"\n"

STUB_ASM_ENTRY("glGenTextures")"\n"
"\t"STUB_ASM_CODE("328")"\n"

STUB_ASM_ENTRY("glIsTexture")"\n"
"\t"STUB_ASM_CODE("330")"\n"

STUB_ASM_ENTRY("glTexSubImage2D")"\n"
"\t"STUB_ASM_CODE("333")"\n"

STUB_ASM_ENTRY("glBlendColor")"\n"
"\t"STUB_ASM_CODE("336")"\n"

STUB_ASM_ENTRY("glBlendEquation")"\n"
"\t"STUB_ASM_CODE("337")"\n"

STUB_ASM_ENTRY("glDrawRangeElements")"\n"
"\t"STUB_ASM_CODE("338")"\n"

STUB_ASM_ENTRY("glTexImage3D")"\n"
"\t"STUB_ASM_CODE("371")"\n"

STUB_ASM_ENTRY("glTexSubImage3D")"\n"
"\t"STUB_ASM_CODE("372")"\n"

STUB_ASM_ENTRY("glCopyTexSubImage3D")"\n"
"\t"STUB_ASM_CODE("373")"\n"

STUB_ASM_ENTRY("glActiveTexture")"\n"
"\t"STUB_ASM_CODE("374")"\n"

STUB_ASM_ENTRY("glCompressedTexImage2D")"\n"
"\t"STUB_ASM_CODE("409")"\n"

STUB_ASM_ENTRY("glCompressedTexImage3D")"\n"
"\t"STUB_ASM_CODE("410")"\n"

STUB_ASM_ENTRY("glCompressedTexSubImage2D")"\n"
"\t"STUB_ASM_CODE("412")"\n"

STUB_ASM_ENTRY("glCompressedTexSubImage3D")"\n"
"\t"STUB_ASM_CODE("413")"\n"

STUB_ASM_ENTRY("glSampleCoverage")"\n"
"\t"STUB_ASM_CODE("419")"\n"

STUB_ASM_ENTRY("glBlendFuncSeparate")"\n"
"\t"STUB_ASM_CODE("420")"\n"

STUB_ASM_ENTRY("glMultiDrawArraysEXT")"\n"
"\t"STUB_ASM_CODE("424")"\n"

STUB_ASM_ENTRY("glBeginQuery")"\n"
"\t"STUB_ASM_CODE("460")"\n"

STUB_ASM_ENTRY("glBindBuffer")"\n"
"\t"STUB_ASM_CODE("461")"\n"

STUB_ASM_ENTRY("glBufferData")"\n"
"\t"STUB_ASM_CODE("462")"\n"

STUB_ASM_ENTRY("glBufferSubData")"\n"
"\t"STUB_ASM_CODE("463")"\n"

STUB_ASM_ENTRY("glDeleteBuffers")"\n"
"\t"STUB_ASM_CODE("464")"\n"

STUB_ASM_ENTRY("glDeleteQueries")"\n"
"\t"STUB_ASM_CODE("465")"\n"

STUB_ASM_ENTRY("glEndQuery")"\n"
"\t"STUB_ASM_CODE("466")"\n"

STUB_ASM_ENTRY("glGenBuffers")"\n"
"\t"STUB_ASM_CODE("467")"\n"

STUB_ASM_ENTRY("glGenQueries")"\n"
"\t"STUB_ASM_CODE("468")"\n"

STUB_ASM_ENTRY("glGetBufferParameteriv")"\n"
"\t"STUB_ASM_CODE("469")"\n"

STUB_ASM_ENTRY("glGetBufferPointerv")"\n"
"\t"STUB_ASM_CODE("470")"\n"

STUB_ASM_ENTRY("glGetQueryObjectuiv")"\n"
"\t"STUB_ASM_CODE("473")"\n"

STUB_ASM_ENTRY("glGetQueryiv")"\n"
"\t"STUB_ASM_CODE("474")"\n"

STUB_ASM_ENTRY("glIsBuffer")"\n"
"\t"STUB_ASM_CODE("475")"\n"

STUB_ASM_ENTRY("glIsQuery")"\n"
"\t"STUB_ASM_CODE("476")"\n"

STUB_ASM_ENTRY("glUnmapBuffer")"\n"
"\t"STUB_ASM_CODE("478")"\n"

STUB_ASM_ENTRY("glAttachShader")"\n"
"\t"STUB_ASM_CODE("479")"\n"

STUB_ASM_ENTRY("glBindAttribLocation")"\n"
"\t"STUB_ASM_CODE("480")"\n"

STUB_ASM_ENTRY("glBlendEquationSeparate")"\n"
"\t"STUB_ASM_CODE("481")"\n"

STUB_ASM_ENTRY("glCompileShader")"\n"
"\t"STUB_ASM_CODE("482")"\n"

STUB_ASM_ENTRY("glCreateProgram")"\n"
"\t"STUB_ASM_CODE("483")"\n"

STUB_ASM_ENTRY("glCreateShader")"\n"
"\t"STUB_ASM_CODE("484")"\n"

STUB_ASM_ENTRY("glDeleteProgram")"\n"
"\t"STUB_ASM_CODE("485")"\n"

STUB_ASM_ENTRY("glDeleteShader")"\n"
"\t"STUB_ASM_CODE("486")"\n"

STUB_ASM_ENTRY("glDetachShader")"\n"
"\t"STUB_ASM_CODE("487")"\n"

STUB_ASM_ENTRY("glDisableVertexAttribArray")"\n"
"\t"STUB_ASM_CODE("488")"\n"

STUB_ASM_ENTRY("glDrawBuffers")"\n"
"\t"STUB_ASM_CODE("489")"\n"

STUB_ASM_ENTRY("glEnableVertexAttribArray")"\n"
"\t"STUB_ASM_CODE("490")"\n"

STUB_ASM_ENTRY("glGetActiveAttrib")"\n"
"\t"STUB_ASM_CODE("491")"\n"

STUB_ASM_ENTRY("glGetActiveUniform")"\n"
"\t"STUB_ASM_CODE("492")"\n"

STUB_ASM_ENTRY("glGetAttachedShaders")"\n"
"\t"STUB_ASM_CODE("493")"\n"

STUB_ASM_ENTRY("glGetAttribLocation")"\n"
"\t"STUB_ASM_CODE("494")"\n"

STUB_ASM_ENTRY("glGetProgramInfoLog")"\n"
"\t"STUB_ASM_CODE("495")"\n"

STUB_ASM_ENTRY("glGetProgramiv")"\n"
"\t"STUB_ASM_CODE("496")"\n"

STUB_ASM_ENTRY("glGetShaderInfoLog")"\n"
"\t"STUB_ASM_CODE("497")"\n"

STUB_ASM_ENTRY("glGetShaderSource")"\n"
"\t"STUB_ASM_CODE("498")"\n"

STUB_ASM_ENTRY("glGetShaderiv")"\n"
"\t"STUB_ASM_CODE("499")"\n"

STUB_ASM_ENTRY("glGetUniformLocation")"\n"
"\t"STUB_ASM_CODE("500")"\n"

STUB_ASM_ENTRY("glGetUniformfv")"\n"
"\t"STUB_ASM_CODE("501")"\n"

STUB_ASM_ENTRY("glGetUniformiv")"\n"
"\t"STUB_ASM_CODE("502")"\n"

STUB_ASM_ENTRY("glGetVertexAttribPointerv")"\n"
"\t"STUB_ASM_CODE("503")"\n"

STUB_ASM_ENTRY("glGetVertexAttribfv")"\n"
"\t"STUB_ASM_CODE("505")"\n"

STUB_ASM_ENTRY("glGetVertexAttribiv")"\n"
"\t"STUB_ASM_CODE("506")"\n"

STUB_ASM_ENTRY("glIsProgram")"\n"
"\t"STUB_ASM_CODE("507")"\n"

STUB_ASM_ENTRY("glIsShader")"\n"
"\t"STUB_ASM_CODE("508")"\n"

STUB_ASM_ENTRY("glLinkProgram")"\n"
"\t"STUB_ASM_CODE("509")"\n"

STUB_ASM_ENTRY("glShaderSource")"\n"
"\t"STUB_ASM_CODE("510")"\n"

STUB_ASM_ENTRY("glStencilFuncSeparate")"\n"
"\t"STUB_ASM_CODE("511")"\n"

STUB_ASM_ENTRY("glStencilMaskSeparate")"\n"
"\t"STUB_ASM_CODE("512")"\n"

STUB_ASM_ENTRY("glStencilOpSeparate")"\n"
"\t"STUB_ASM_CODE("513")"\n"

STUB_ASM_ENTRY("glUniform1f")"\n"
"\t"STUB_ASM_CODE("514")"\n"

STUB_ASM_ENTRY("glUniform1fv")"\n"
"\t"STUB_ASM_CODE("515")"\n"

STUB_ASM_ENTRY("glUniform1i")"\n"
"\t"STUB_ASM_CODE("516")"\n"

STUB_ASM_ENTRY("glUniform1iv")"\n"
"\t"STUB_ASM_CODE("517")"\n"

STUB_ASM_ENTRY("glUniform2f")"\n"
"\t"STUB_ASM_CODE("518")"\n"

STUB_ASM_ENTRY("glUniform2fv")"\n"
"\t"STUB_ASM_CODE("519")"\n"

STUB_ASM_ENTRY("glUniform2i")"\n"
"\t"STUB_ASM_CODE("520")"\n"

STUB_ASM_ENTRY("glUniform2iv")"\n"
"\t"STUB_ASM_CODE("521")"\n"

STUB_ASM_ENTRY("glUniform3f")"\n"
"\t"STUB_ASM_CODE("522")"\n"

STUB_ASM_ENTRY("glUniform3fv")"\n"
"\t"STUB_ASM_CODE("523")"\n"

STUB_ASM_ENTRY("glUniform3i")"\n"
"\t"STUB_ASM_CODE("524")"\n"

STUB_ASM_ENTRY("glUniform3iv")"\n"
"\t"STUB_ASM_CODE("525")"\n"

STUB_ASM_ENTRY("glUniform4f")"\n"
"\t"STUB_ASM_CODE("526")"\n"

STUB_ASM_ENTRY("glUniform4fv")"\n"
"\t"STUB_ASM_CODE("527")"\n"

STUB_ASM_ENTRY("glUniform4i")"\n"
"\t"STUB_ASM_CODE("528")"\n"

STUB_ASM_ENTRY("glUniform4iv")"\n"
"\t"STUB_ASM_CODE("529")"\n"

STUB_ASM_ENTRY("glUniformMatrix2fv")"\n"
"\t"STUB_ASM_CODE("530")"\n"

STUB_ASM_ENTRY("glUniformMatrix3fv")"\n"
"\t"STUB_ASM_CODE("531")"\n"

STUB_ASM_ENTRY("glUniformMatrix4fv")"\n"
"\t"STUB_ASM_CODE("532")"\n"

STUB_ASM_ENTRY("glUseProgram")"\n"
"\t"STUB_ASM_CODE("533")"\n"

STUB_ASM_ENTRY("glValidateProgram")"\n"
"\t"STUB_ASM_CODE("534")"\n"

STUB_ASM_ENTRY("glVertexAttribPointer")"\n"
"\t"STUB_ASM_CODE("563")"\n"

STUB_ASM_ENTRY("glUniformMatrix2x3fv")"\n"
"\t"STUB_ASM_CODE("564")"\n"

STUB_ASM_ENTRY("glUniformMatrix2x4fv")"\n"
"\t"STUB_ASM_CODE("565")"\n"

STUB_ASM_ENTRY("glUniformMatrix3x2fv")"\n"
"\t"STUB_ASM_CODE("566")"\n"

STUB_ASM_ENTRY("glUniformMatrix3x4fv")"\n"
"\t"STUB_ASM_CODE("567")"\n"

STUB_ASM_ENTRY("glUniformMatrix4x2fv")"\n"
"\t"STUB_ASM_CODE("568")"\n"

STUB_ASM_ENTRY("glUniformMatrix4x3fv")"\n"
"\t"STUB_ASM_CODE("569")"\n"

STUB_ASM_ENTRY("glBeginTransformFeedback")"\n"
"\t"STUB_ASM_CODE("571")"\n"

STUB_ASM_ENTRY("glBindBufferBase")"\n"
"\t"STUB_ASM_CODE("572")"\n"

STUB_ASM_ENTRY("glBindBufferRange")"\n"
"\t"STUB_ASM_CODE("573")"\n"

STUB_ASM_ENTRY("glClearBufferfi")"\n"
"\t"STUB_ASM_CODE("576")"\n"

STUB_ASM_ENTRY("glClearBufferfv")"\n"
"\t"STUB_ASM_CODE("577")"\n"

STUB_ASM_ENTRY("glClearBufferiv")"\n"
"\t"STUB_ASM_CODE("578")"\n"

STUB_ASM_ENTRY("glClearBufferuiv")"\n"
"\t"STUB_ASM_CODE("579")"\n"

STUB_ASM_ENTRY("glEndTransformFeedback")"\n"
"\t"STUB_ASM_CODE("584")"\n"

STUB_ASM_ENTRY("glGetFragDataLocation")"\n"
"\t"STUB_ASM_CODE("586")"\n"

STUB_ASM_ENTRY("glGetIntegeri_v")"\n"
"\t"STUB_ASM_CODE("587")"\n"

STUB_ASM_ENTRY("glGetStringi")"\n"
"\t"STUB_ASM_CODE("588")"\n"

STUB_ASM_ENTRY("glGetTransformFeedbackVarying")"\n"
"\t"STUB_ASM_CODE("591")"\n"

STUB_ASM_ENTRY("glGetUniformuiv")"\n"
"\t"STUB_ASM_CODE("592")"\n"

STUB_ASM_ENTRY("glGetVertexAttribIiv")"\n"
"\t"STUB_ASM_CODE("593")"\n"

STUB_ASM_ENTRY("glGetVertexAttribIuiv")"\n"
"\t"STUB_ASM_CODE("594")"\n"

STUB_ASM_ENTRY("glTransformFeedbackVaryings")"\n"
"\t"STUB_ASM_CODE("598")"\n"

STUB_ASM_ENTRY("glUniform1ui")"\n"
"\t"STUB_ASM_CODE("599")"\n"

STUB_ASM_ENTRY("glUniform1uiv")"\n"
"\t"STUB_ASM_CODE("600")"\n"

STUB_ASM_ENTRY("glUniform2ui")"\n"
"\t"STUB_ASM_CODE("601")"\n"

STUB_ASM_ENTRY("glUniform2uiv")"\n"
"\t"STUB_ASM_CODE("602")"\n"

STUB_ASM_ENTRY("glUniform3ui")"\n"
"\t"STUB_ASM_CODE("603")"\n"

STUB_ASM_ENTRY("glUniform3uiv")"\n"
"\t"STUB_ASM_CODE("604")"\n"

STUB_ASM_ENTRY("glUniform4ui")"\n"
"\t"STUB_ASM_CODE("605")"\n"

STUB_ASM_ENTRY("glUniform4uiv")"\n"
"\t"STUB_ASM_CODE("606")"\n"

STUB_ASM_ENTRY("glVertexAttribIPointer")"\n"
"\t"STUB_ASM_CODE("613")"\n"

STUB_ASM_ENTRY("glGetBufferParameteri64v")"\n"
"\t"STUB_ASM_CODE("617")"\n"

STUB_ASM_ENTRY("glGetInteger64i_v")"\n"
"\t"STUB_ASM_CODE("618")"\n"

STUB_ASM_ENTRY("glVertexAttribDivisor")"\n"
"\t"STUB_ASM_CODE("619")"\n"

STUB_ASM_ENTRY("glVertexAttrib1f")"\n"
"\t"STUB_ASM_CODE("640")"\n"

STUB_ASM_ENTRY("glVertexAttrib1fv")"\n"
"\t"STUB_ASM_CODE("641")"\n"

STUB_ASM_ENTRY("glVertexAttrib2f")"\n"
"\t"STUB_ASM_CODE("642")"\n"

STUB_ASM_ENTRY("glVertexAttrib2fv")"\n"
"\t"STUB_ASM_CODE("643")"\n"

STUB_ASM_ENTRY("glVertexAttrib3f")"\n"
"\t"STUB_ASM_CODE("644")"\n"

STUB_ASM_ENTRY("glVertexAttrib3fv")"\n"
"\t"STUB_ASM_CODE("645")"\n"

STUB_ASM_ENTRY("glVertexAttrib4f")"\n"
"\t"STUB_ASM_CODE("646")"\n"

STUB_ASM_ENTRY("glVertexAttrib4fv")"\n"
"\t"STUB_ASM_CODE("647")"\n"

STUB_ASM_ENTRY("glDrawArraysInstanced")"\n"
"\t"STUB_ASM_CODE("658")"\n"

STUB_ASM_ENTRY("glDrawElementsInstanced")"\n"
"\t"STUB_ASM_CODE("659")"\n"

STUB_ASM_ENTRY("glBindFramebuffer")"\n"
"\t"STUB_ASM_CODE("660")"\n"

STUB_ASM_ENTRY("glBindRenderbuffer")"\n"
"\t"STUB_ASM_CODE("661")"\n"

STUB_ASM_ENTRY("glBlitFramebuffer")"\n"
"\t"STUB_ASM_CODE("662")"\n"

STUB_ASM_ENTRY("glCheckFramebufferStatus")"\n"
"\t"STUB_ASM_CODE("663")"\n"

STUB_ASM_ENTRY("glDeleteFramebuffers")"\n"
"\t"STUB_ASM_CODE("664")"\n"

STUB_ASM_ENTRY("glDeleteRenderbuffers")"\n"
"\t"STUB_ASM_CODE("665")"\n"

STUB_ASM_ENTRY("glFramebufferRenderbuffer")"\n"
"\t"STUB_ASM_CODE("666")"\n"

STUB_ASM_ENTRY("glFramebufferTexture2D")"\n"
"\t"STUB_ASM_CODE("668")"\n"

STUB_ASM_ENTRY("glFramebufferTextureLayer")"\n"
"\t"STUB_ASM_CODE("670")"\n"

STUB_ASM_ENTRY("glGenFramebuffers")"\n"
"\t"STUB_ASM_CODE("671")"\n"

STUB_ASM_ENTRY("glGenRenderbuffers")"\n"
"\t"STUB_ASM_CODE("672")"\n"

STUB_ASM_ENTRY("glGenerateMipmap")"\n"
"\t"STUB_ASM_CODE("673")"\n"

STUB_ASM_ENTRY("glGetFramebufferAttachmentParameteriv")"\n"
"\t"STUB_ASM_CODE("674")"\n"

STUB_ASM_ENTRY("glGetRenderbufferParameteriv")"\n"
"\t"STUB_ASM_CODE("675")"\n"

STUB_ASM_ENTRY("glIsFramebuffer")"\n"
"\t"STUB_ASM_CODE("676")"\n"

STUB_ASM_ENTRY("glIsRenderbuffer")"\n"
"\t"STUB_ASM_CODE("677")"\n"

STUB_ASM_ENTRY("glRenderbufferStorage")"\n"
"\t"STUB_ASM_CODE("678")"\n"

STUB_ASM_ENTRY("glRenderbufferStorageMultisample")"\n"
"\t"STUB_ASM_CODE("679")"\n"

STUB_ASM_ENTRY("glFlushMappedBufferRange")"\n"
"\t"STUB_ASM_CODE("680")"\n"

STUB_ASM_ENTRY("glMapBufferRange")"\n"
"\t"STUB_ASM_CODE("681")"\n"

STUB_ASM_ENTRY("glBindVertexArray")"\n"
"\t"STUB_ASM_CODE("682")"\n"

STUB_ASM_ENTRY("glDeleteVertexArrays")"\n"
"\t"STUB_ASM_CODE("683")"\n"

STUB_ASM_ENTRY("glGenVertexArrays")"\n"
"\t"STUB_ASM_CODE("684")"\n"

STUB_ASM_ENTRY("glIsVertexArray")"\n"
"\t"STUB_ASM_CODE("685")"\n"

STUB_ASM_ENTRY("glGetActiveUniformBlockName")"\n"
"\t"STUB_ASM_CODE("686")"\n"

STUB_ASM_ENTRY("glGetActiveUniformBlockiv")"\n"
"\t"STUB_ASM_CODE("687")"\n"

STUB_ASM_ENTRY("glGetActiveUniformsiv")"\n"
"\t"STUB_ASM_CODE("689")"\n"

STUB_ASM_ENTRY("glGetUniformBlockIndex")"\n"
"\t"STUB_ASM_CODE("690")"\n"

STUB_ASM_ENTRY("glGetUniformIndices")"\n"
"\t"STUB_ASM_CODE("691")"\n"

STUB_ASM_ENTRY("glUniformBlockBinding")"\n"
"\t"STUB_ASM_CODE("692")"\n"

STUB_ASM_ENTRY("glCopyBufferSubData")"\n"
"\t"STUB_ASM_CODE("693")"\n"

STUB_ASM_ENTRY("glClientWaitSync")"\n"
"\t"STUB_ASM_CODE("694")"\n"

STUB_ASM_ENTRY("glDeleteSync")"\n"
"\t"STUB_ASM_CODE("695")"\n"

STUB_ASM_ENTRY("glFenceSync")"\n"
"\t"STUB_ASM_CODE("696")"\n"

STUB_ASM_ENTRY("glGetInteger64v")"\n"
"\t"STUB_ASM_CODE("697")"\n"

STUB_ASM_ENTRY("glGetSynciv")"\n"
"\t"STUB_ASM_CODE("698")"\n"

STUB_ASM_ENTRY("glIsSync")"\n"
"\t"STUB_ASM_CODE("699")"\n"

STUB_ASM_ENTRY("glWaitSync")"\n"
"\t"STUB_ASM_CODE("700")"\n"

STUB_ASM_ENTRY("glBindSampler")"\n"
"\t"STUB_ASM_CODE("716")"\n"

STUB_ASM_ENTRY("glDeleteSamplers")"\n"
"\t"STUB_ASM_CODE("717")"\n"

STUB_ASM_ENTRY("glGenSamplers")"\n"
"\t"STUB_ASM_CODE("718")"\n"

STUB_ASM_ENTRY("glGetSamplerParameterfv")"\n"
"\t"STUB_ASM_CODE("721")"\n"

STUB_ASM_ENTRY("glGetSamplerParameteriv")"\n"
"\t"STUB_ASM_CODE("722")"\n"

STUB_ASM_ENTRY("glIsSampler")"\n"
"\t"STUB_ASM_CODE("723")"\n"

STUB_ASM_ENTRY("glSamplerParameterf")"\n"
"\t"STUB_ASM_CODE("726")"\n"

STUB_ASM_ENTRY("glSamplerParameterfv")"\n"
"\t"STUB_ASM_CODE("727")"\n"

STUB_ASM_ENTRY("glSamplerParameteri")"\n"
"\t"STUB_ASM_CODE("728")"\n"

STUB_ASM_ENTRY("glSamplerParameteriv")"\n"
"\t"STUB_ASM_CODE("729")"\n"

STUB_ASM_ENTRY("glBindTransformFeedback")"\n"
"\t"STUB_ASM_CODE("791")"\n"

STUB_ASM_ENTRY("glDeleteTransformFeedbacks")"\n"
"\t"STUB_ASM_CODE("792")"\n"

STUB_ASM_ENTRY("glGenTransformFeedbacks")"\n"
"\t"STUB_ASM_CODE("794")"\n"

STUB_ASM_ENTRY("glIsTransformFeedback")"\n"
"\t"STUB_ASM_CODE("795")"\n"

STUB_ASM_ENTRY("glPauseTransformFeedback")"\n"
"\t"STUB_ASM_CODE("796")"\n"

STUB_ASM_ENTRY("glResumeTransformFeedback")"\n"
"\t"STUB_ASM_CODE("797")"\n"

STUB_ASM_ENTRY("glClearDepthf")"\n"
"\t"STUB_ASM_CODE("802")"\n"

STUB_ASM_ENTRY("glDepthRangef")"\n"
"\t"STUB_ASM_CODE("803")"\n"

STUB_ASM_ENTRY("glGetShaderPrecisionFormat")"\n"
"\t"STUB_ASM_CODE("804")"\n"

STUB_ASM_ENTRY("glReleaseShaderCompiler")"\n"
"\t"STUB_ASM_CODE("805")"\n"

STUB_ASM_ENTRY("glShaderBinary")"\n"
"\t"STUB_ASM_CODE("806")"\n"

STUB_ASM_ENTRY("glGetProgramBinary")"\n"
"\t"STUB_ASM_CODE("807")"\n"

STUB_ASM_ENTRY("glProgramBinary")"\n"
"\t"STUB_ASM_CODE("808")"\n"

STUB_ASM_ENTRY("glProgramParameteri")"\n"
"\t"STUB_ASM_CODE("809")"\n"

STUB_ASM_ENTRY("glGetInternalformativ")"\n"
"\t"STUB_ASM_CODE("855")"\n"

STUB_ASM_ENTRY("glTexStorage2D")"\n"
"\t"STUB_ASM_CODE("860")"\n"

STUB_ASM_ENTRY("glTexStorage3D")"\n"
"\t"STUB_ASM_CODE("861")"\n"

STUB_ASM_ENTRY("glInvalidateFramebuffer")"\n"
"\t"STUB_ASM_CODE("997")"\n"

STUB_ASM_ENTRY("glInvalidateSubFramebuffer")"\n"
"\t"STUB_ASM_CODE("998")"\n"

STUB_ASM_ENTRY("glMultiDrawElementsEXT")"\n"
"\t"STUB_ASM_CODE("1095")"\n"

STUB_ASM_ENTRY("glVertexAttribI4i")"\n"
"\t"STUB_ASM_CODE("1210")"\n"

STUB_ASM_ENTRY("glVertexAttribI4iv")"\n"
"\t"STUB_ASM_CODE("1211")"\n"

STUB_ASM_ENTRY("glVertexAttribI4ui")"\n"
"\t"STUB_ASM_CODE("1212")"\n"

STUB_ASM_ENTRY("glVertexAttribI4uiv")"\n"
"\t"STUB_ASM_CODE("1213")"\n"

);
#undef MAPI_TMP_STUB_ASM_GCC_NO_HIDDEN
#endif /* MAPI_TMP_STUB_ASM_GCC_NO_HIDDEN */
