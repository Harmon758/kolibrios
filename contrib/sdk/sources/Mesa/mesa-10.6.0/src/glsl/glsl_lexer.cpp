#line 2 "glsl_lexer.cpp"

#line 4 "glsl_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE _mesa_glsl_lexer_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via _mesa_glsl_lexer_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void _mesa_glsl_lexer_restart (FILE *input_file ,yyscan_t yyscanner );
void _mesa_glsl_lexer__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_glsl_lexer__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void _mesa_glsl_lexer__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void _mesa_glsl_lexer__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void _mesa_glsl_lexer_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void _mesa_glsl_lexer_pop_buffer_state (yyscan_t yyscanner );

static void _mesa_glsl_lexer_ensure_buffer_stack (yyscan_t yyscanner );
static void _mesa_glsl_lexer__load_buffer_state (yyscan_t yyscanner );
static void _mesa_glsl_lexer__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER _mesa_glsl_lexer__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE _mesa_glsl_lexer__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_glsl_lexer__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_glsl_lexer__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *_mesa_glsl_lexer_alloc (yy_size_t ,yyscan_t yyscanner );
void *_mesa_glsl_lexer_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void _mesa_glsl_lexer_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer _mesa_glsl_lexer__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        _mesa_glsl_lexer_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            _mesa_glsl_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        _mesa_glsl_lexer_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            _mesa_glsl_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define _mesa_glsl_lexer_wrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 263
#define YY_END_OF_BUFFER 264
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1038] =
    {   0,
        0,    0,   16,   16,    0,    0,  264,  262,    1,   22,
      262,  262,  262,  262,  262,  262,  262,  262,  176,  174,
      262,  262,  262,  261,  262,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  262,    1,  262,   21,   16,
       20,   21,   19,   17,   18,   14,   13,    1,  158,  167,
      159,  170,  164,  153,  166,  154,  173,  178,  165,  179,
      176,    0,    0,  176,    0,  174,  174,  162,  155,  157,
      156,  163,  261,  171,  161,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,   31,  261,

      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,   35,  261,  261,   62,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      172,  160,    1,    0,    0,    2,    0,    0,    0,    0,
       16,   15,   19,   18,    0,  178,    0,    0,  177,    0,
      179,    0,    0,    0,  180,  175,  168,  169,  261,  187,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  261,  261,   34,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,   27,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,   63,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,    0,    0,    0,    0,   15,    0,  178,
      182,    0,  177,    0,    0,    0,  179,  183,  180,    0,
        0,  175,  261,  261,  261,   25,  261,  261,  245,  238,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      261,   33,  190,  261,  261,  261,  261,   69,  261,  261,
      195,  208,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  205,  241,   50,   51,   52,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  193,  185,  261,  261,   28,  261,
      261,  261,  261,  261,  261,  261,   47,   48,   49,  151,
      261,  261,  261,    0,    0,    0,    0,    0,  177,  181,
      184,  261,  261,  261,   29,   38,   39,   40,  261,  188,
      261,  261,   24,  261,  261,  261,  219,  220,  221,  261,

      216,  217,  218,  261,  186,  261,  209,   26,  231,  232,
      233,  243,  213,  214,  215,  261,  261,  261,   64,  211,
      261,  261,  261,   41,   42,   43,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  258,  261,  261,
      261,  261,  261,  261,  261,  261,  206,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  189,  261,
      261,  240,   44,   45,   46,  261,  261,   32,  261,    0,
        0,    0,    0,  248,  261,  261,  261,  261,  246,  261,
      261,  261,  261,  261,  261,  207,  202,  251,  261,  261,
      261,  261,  261,  261,  198,  261,  261,  261,  152,   53,

       54,   55,   56,   57,   58,   59,   60,   61,  261,  261,
      261,  261,  212,  194,  261,  261,  200,  261,  261,  261,
       37,  261,  259,  237,   70,  201,  150,  261,  249,  196,
      261,  261,  261,  261,  261,  261,  261,  261,  261,    0,
        0,    0,    0,  261,  261,  261,  261,  261,  197,   36,
      222,  223,  224,  225,  226,  227,  228,  229,  230,  261,
      261,  261,  261,  261,  261,  107,  108,  109,  261,  261,
      261,  261,  261,  242,  261,  261,  261,  261,  106,  261,
      261,  261,  261,  261,  261,  261,  261,  191,  261,  261,
      261,  261,  261,   65,  261,  261,   66,  261,  261,    0,

        0,    0,    0,    0,  261,  261,   67,  144,   30,  203,
      118,  119,  120,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  199,  261,  261,
      261,  147,  257,  146,  261,  261,  261,  261,  261,  261,
      261,  261,  192,  129,  130,  131,  261,  261,  210,  261,
      145,  261,    0,    0,    6,    0,    0,    0,   12,    3,
      261,   23,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  116,  261,  261,  261,  111,  204,   68,  261,  261,
      261,  261,  261,  239,  261,  247,  244,  252,   72,   73,
       74,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  148,    0,    0,    0,
        0,    0,    0,    0,  261,  261,  261,  127,  261,  261,
      122,  261,  261,  261,  261,  261,  261,  261,  261,   83,
       84,   85,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  260,  261,  261,  138,  261,
      261,  133,   89,   90,   91,  261,  261,    4,    0,    5,
        0,    0,    0,    0,    0,    0,  149,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  110,  261,  112,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,   95,  261,  261,  261,  261,   75,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
        0,    0,    0,    0,  261,  261,  261,  121,  123,  261,
      113,  261,  114,  261,  261,  261,  261,  261,   96,  261,
      261,   86,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  132,  134,  261,
      261,  261,   97,  261,  261,   92,    0,    0,    0,  124,
      125,  261,  261,  261,  140,  261,  261,  141,  261,  261,
      261,  261,  261,  261,  261,   71,  261,  261,  261,  261,
      234,  261,  235,  250,  261,  261,  261,  135,  136,  261,
      261,  261,  261,  261,  261,  261,  261,    0,    0,    0,

      261,  261,  261,  261,  117,  115,  261,  261,  261,  253,
      255,  261,   76,  261,   77,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  254,  256,  261,    0,
        0,    0,    0,  128,  126,  261,  261,   87,   88,  261,
      261,  261,   78,  261,  261,  261,   79,  261,  261,  261,
      139,  137,   93,   94,  261,  261,    0,    0,    0,    0,
      261,  261,  261,  261,  261,  261,   98,  261,  101,  261,
      261,  261,  261,    0,    0,    0,    0,  261,  261,   99,
      102,  261,  261,  261,  261,   80,  261,  100,  103,    0,
        0,    0,    7,    0,    0,  142,  143,  261,  261,  261,

      261,  105,    0,    0,    8,    0,    0,  261,  261,  236,
      261,    0,    0,    0,   81,   82,  261,    0,    0,    0,
        9,  261,    0,    0,   10,  104,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   11,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    1,    7,    8,    1,    9,
       10,   11,   12,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   21,   21,   22,   22,   23,    1,   24,
       25,   26,    1,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   34,   34,   34,   35,   36,   34,   37,   34,
       34,   38,   39,   40,   41,   34,   34,   42,   34,   34,
        1,    1,    1,   43,   44,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   34,   61,   62,   63,   64,   65,   66,   67,
       68,   69,    1,   70,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[71] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    1,    1,    4,    4,    4,    4,
        4,    3,    5,    5,    6,    5,    5,    5,    5,    5,
        5,    5,    1,    5,    4,    4,    4,    4,    4,    3,
        5,    5,    5,    5,    5,    6,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1
    } ;

static yyconst flex_int16_t yy_base[1050] =
    {   0,
        0,   69,   75,  145, 1409, 1408, 1410, 1413,   70, 1413,
     1384, 1383,   94, 1382,   91,   92,   90, 1381,  202,  256,
       89, 1380,   95,    0,   79,   68,   64,   79,  124,   76,
      131, 1345,  127,  141,   81,   88,   82, 1339,  140,  146,
      182,  179,  149,  193,  148,  183,  252,  176, 1413,  140,
     1413, 1387,  243, 1413,    0, 1413, 1413,  208, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413,  305, 1413,  346,
      188,  282,  272, 1413,    0,    0, 1413, 1376, 1413, 1413,
     1413, 1375,    0, 1413, 1413, 1336, 1341,  123, 1338, 1347,
     1346, 1332, 1335, 1347,  254, 1341, 1328, 1344, 1324, 1338,

     1324, 1321, 1321, 1327,  170,  212, 1321, 1332, 1317, 1323,
     1327, 1328,    0, 1319, 1330,  279, 1329, 1324, 1304,  249,
     1308, 1322, 1312,  226, 1305,  220, 1318, 1320,  271, 1299,
     1307, 1304, 1293, 1302,  152,  222, 1307, 1302, 1305, 1293,
     1296,  117,  255,  265, 1306, 1293, 1306,   83, 1299, 1298,
     1413, 1413,  326,  343,  345, 1413, 1283, 1296, 1287, 1298,
      339,    0,  353,    0,  367, 1413, 1314, 1295,  380,  401,
     1413, 1312, 1293,  421,  396,  288, 1413, 1413, 1289,    0,
     1284, 1279, 1283, 1293, 1290,  246, 1273, 1273, 1285, 1276,
      187, 1287, 1284, 1267, 1283, 1281, 1278, 1269, 1276, 1262,

     1260, 1273, 1258, 1275,    0, 1272, 1259, 1267, 1264, 1268,
     1269, 1262, 1259, 1247, 1246, 1260, 1263, 1250, 1259, 1246,
     1253, 1243,  331, 1249, 1252, 1242, 1250, 1238, 1242, 1233,
     1248, 1247, 1237, 1244,  294, 1227, 1246, 1229, 1227, 1238,
     1227, 1222, 1220, 1222, 1233, 1218, 1220, 1217, 1229, 1228,
     1231, 1212,  332, 1221, 1216, 1214, 1224, 1202,  340, 1221,
     1223, 1211, 1203, 1202, 1206, 1218, 1201,    0,  437,  412,
     1413,  453, 1413, 1229, 1210,  460,  451, 1413, 1413, 1227,
     1208, 1413, 1192, 1203, 1202,    0, 1199,  406,    0,    0,
     1192, 1190, 1190, 1191, 1186, 1195, 1183, 1201,  414, 1189,

      430,    0,    0, 1183, 1194, 1193, 1193,    0, 1177,  469,
        0,    0, 1179,  472, 1187, 1188, 1178, 1172, 1171, 1172,
     1171, 1171,  475, 1166,    0,    0, 1162, 1161, 1160, 1162,
     1163, 1168, 1162, 1158, 1172, 1167, 1167, 1165, 1164, 1157,
     1151, 1153, 1152, 1155, 1155, 1147, 1150, 1145, 1154, 1159,
     1146, 1143, 1156, 1146,    0,    0, 1153, 1149,    0, 1140,
     1140, 1146, 1136, 1144,  478, 1141,    0,    0,    0,    0,
     1130, 1143, 1142, 1141, 1140, 1137, 1125,  492,  467, 1413,
     1413, 1137, 1138, 1138,    0,    0,    0,    0, 1124,    0,
     1133, 1123,    0, 1122, 1123, 1117, 1110, 1109, 1108, 1125,

        0,    0,    0, 1115,    0, 1111,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1122,  487, 1121,    0,    0,
     1119, 1115, 1111,    0,    0,    0, 1103,  500,  506,  509,
     1108, 1104, 1110, 1100, 1098, 1112, 1096,    0, 1096, 1110,
     1098, 1094, 1101, 1095, 1107, 1102,    0, 1100, 1097, 1101,
     1084, 1082, 1085, 1092, 1098, 1093, 1092, 1079,    0, 1081,
     1082,    0,    0,    0,    0, 1079, 1083,    0, 1076, 1076,
     1131, 1075, 1078,    0, 1086, 1065, 1075, 1069,    0, 1062,
     1062, 1076,  512,  515,  518,    0, 1078,    0,  522, 1092,
     1091, 1090, 1055, 1054,    0, 1072, 1071, 1066,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 1054, 1068,
     1054, 1051,    0,    0, 1057,  344,    0, 1053, 1061, 1060,
        0, 1052, 1044,    0,    0,    0,    0, 1041,    0,    0,
     1040, 1052,  525, 1044, 1051, 1050, 1047, 1041, 1038, 1033,
      543, 1049, 1034, 1028, 1028, 1042, 1026, 1039,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1031,
     1056, 1055, 1054, 1019, 1018,  190,  519,    0, 1031, 1034,
     1032, 1020, 1016,    0, 1029, 1026, 1025, 1014,    0, 1013,
     1003, 1021, 1006, 1009,  549, 1014, 1017,    0, 1035, 1034,
     1033,  998,  997,    0, 1012,  998,    0, 1009, 1001, 1003,

      567,  573, 1053,  996, 1000, 1003,    0,    0,    0,    0,
     1024,  371,    0, 1000, 1003,  987,  995,  985, 1006,  995,
      991,  992,  992,  991,  976,  579,  989,    0,  990,  978,
      977,    0,    0,    0,  973, 1003, 1002, 1001,  966,  965,
      961,  969,    0,  999,  574,    0,  975,  978,    0,  585,
        0,  955,  963,  603, 1413,  624,    0,  630,  614, 1413,
      963,    0,  959,  958,  979,  968,  966,  966,  953,  968,
      951,  984,  963,  964,  959,  980,    0,    0,  976,  975,
      974,  939,  938,    0,  938,    0,    0,    0,  377,  627,
      962,  949,  952,  934,  947,  934,  933,  954,  943,  941,

      941,  959,  958,  957,  922,  921,    0,  926,  658,  665,
      458,  943,  933,  921,  917,  918,  917,  950,  929,  926,
      947,  928,  924,  926,  909,  906,  920,  906,  905,  938,
      601,    0,  914,  917,  909,  900,  908,  898,  919,  908,
      904,  906,  904,  904,  898,    0,  885,  882,  915,  892,
      889,  908,  907,  653,    0,  878,  856, 1413,  461, 1413,
      690,    0,  696,  871,  854,  836,    0,  853,  852,  835,
      832,  833,  831,  823,  831,  821,  827,    0,  828,    0,
      825,  824,  823,  844,  833,  830,  830,  813,  816,  829,
      812,  845,  824,  825,  822,   24,  572,  132,  235,  269,

      258,  293,  315,  329,  339,  345,  388,  386,  395,  402,
      482,  434,  436,  450,  453,  454,  486,    0,    0,  487,
      510,  486,  517,  526,  506,  528,  513,  518,  554,  535,
      551,  588,  568,  573,  581,  585,  570,  572,  588,  575,
      594,  595,  605,  600,  591,  596,  608,    0,    0,  609,
      610,  611,  661,  643,  645,  668,  661,  646,  644,    0,
        0,  657,  658,  652,    0,  653,  651,    0,  652,  676,
      677,  662,  661,  665,  666,    0,  660,  670,  662,  670,
      693,  674,    0,    0,  673,  690,  691,    0,    0,  692,
      693,  694,  695,  680,  679,  682,  683,  743,  744,  694,

      680,  681,  705,  706,    0,    0,  684,  686,  694,    0,
        0,  695,  718,  692,  720,  715,  709,  696,  718,  716,
      709,  698,  699,  700,  701,  709,    0,    0,  710,  770,
      771,  772,  706,    0,    0,  728,  729,    0,    0,  733,
      734,  729,    0,  730,  715,  739,    0,  717,  727,  750,
        0,    0,    0,    0,  743,  744,  732,  789,  742,  744,
      735,  736,  728,  729,  753,  754,    0,  753,  763,  737,
      773,  737,  738,  742,  758,  807,  809,  744,  746,    0,
        0,  765,  766,  756,  764,    0,  780,    0,    0,  775,
      819,  820, 1413,  823,  822,    0,    0,  767,  768,  762,

      788,    0,  773,  833, 1413,  834,  787,  772,  773,    0,
      792,  788,  792,  842,    0,    0,  787,  802,  847,  848,
     1413,  785,  795,  852, 1413,    0,  792,  854,  857,  858,
      859,  808,  809,  865,  866, 1413, 1413,  904,  910,  914,
      918,  922,  926,  930,  934,  938,  942,  946,  948
    } ;

static yyconst flex_int16_t yy_def[1050] =
    {   0,
     1037,    1, 1038, 1038, 1039, 1039, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1040, 1037, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1041, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
       19, 1037, 1037, 1037, 1042,   20, 1037, 1037, 1037, 1037,
     1037, 1037, 1040, 1037, 1037, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,

     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1043, 1037, 1041, 1037, 1037, 1037, 1037,   70, 1037,
     1037, 1037, 1037, 1037, 1044, 1042, 1037, 1037, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,

     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1037, 1037, 1037, 1037, 1043, 1037, 1045,
     1037, 1037, 1037, 1037, 1037, 1037, 1046, 1037, 1037, 1037,
     1037, 1037, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,

     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1037, 1037, 1037, 1037, 1037, 1047, 1037,
     1037, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,

     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1037,
     1037, 1037, 1037, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,

     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1037,
     1037, 1037, 1037, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1037,

     1037, 1037, 1037, 1037, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1037, 1037, 1037, 1037, 1048, 1037, 1037, 1037,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,

     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1037, 1037, 1037,
     1048, 1037, 1037, 1037, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1037, 1037, 1037,
     1037, 1049, 1037, 1037, 1037, 1037, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,

     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1049, 1037, 1037, 1037, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1037, 1037, 1037, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1037, 1037, 1037,

     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1037,
     1037, 1037, 1037, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1037, 1037, 1037, 1037,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1037, 1037, 1037, 1037, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1037,
     1037, 1037, 1037, 1037, 1037, 1040, 1040, 1040, 1040, 1040,

     1040, 1040, 1037, 1037, 1037, 1037, 1037, 1040, 1040, 1040,
     1040, 1037, 1037, 1037, 1040, 1040, 1040, 1037, 1037, 1037,
     1037, 1040, 1037, 1037, 1037, 1040, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037,    0, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037
    } ;

static yyconst flex_int16_t yy_nxt[1484] =
    {   0,
        8,    9,   10,    9,   11,    8,   12,   13,    8,    8,
       14,   15,   16,   17,   18,   19,   20,   20,   20,   20,
       20,   20,    8,   21,   22,   23,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   25,   24,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   24,   24,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   24,   24,   24,   46,
       47,   58,  841,   58,   48,   49,   50,   51,   50,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   52,
       49,   53,   53,   53,   53,   53,   53,   54,   49,   49,

       49,   61,   64,   84,   66,   68,   68,   68,   68,   68,
       68,   68,   78,   79,   86,   65,   67,   49,   62,   81,
       82,   85,   89,   92,   90,  119,  123,   93,   91,   87,
       88,  101,  121,  102,   94,  260,  122,   95,  261,  120,
      124,  161,  103,  161,   49,   49,   50,   51,   50,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   52,
       49,   53,   53,   53,   53,   53,   53,   54,   49,   49,
       49,  110,   96,  251,  252,  104,   97,  155,  156,  111,
       98,  181,   99,  105,  126,  182,  106,   49,  100,  107,
      113,  112,  844,  114,  129,  108,  242,  115,  116,  149,

      127,  142,  117,  128,  130,  118,  143,  151,  150,   58,
      144,   58,  243,  145,   49,   70,  616,   71,   71,   71,
       71,   71,   71,   72,  157,  201,  131,  138,  617, 1037,
      139,  158,   73,  132,  133,  159,  202,  146,  134,  140,
      160,  147,   74,   75,  135,  136,  141,  137,  295,  296,
       73,  148,  152,  153, 1037,   58,  203,  154,  163,  163,
      163,  163,  163,  163,  163,   74,  229,  244,   75,   70,
      204,   76,   76,   76,   76,   76,   76,   76,  226,  845,
      230,  245,  231,  174,  174,  227,   73,  175,  175,  175,
      175,  175,  175,  175,  289,   70,   77,   72,   72,   72,

       72,   72,   72,   72,   73,  189,  221,  253,  290,  255,
      190,  191,   73,  846,  222,  234,  254,  256,  847,   77,
       68,   68,   68,   68,   68,   68,   68,  153,  282,   58,
       73,  154,  235,  236,  213,  165,  166,  214,  215,  167,
      161,  216,  161,  217,  155,  156,  155,  156,  327,  328,
      329,  282,  341,  165,  166,  848,  342,  367,  368,  369,
      168,  169,  169,  169,  169,  169,  169,  169,  163,  163,
      163,  163,  163,  163,  163,  849,  170,  171,  269,  269,
      172,  360,  270,  270,  270,  270,  270,  270,  270,  850,
      361,  157,  579,  157,  170,  171,  580,  664,  158,  851,

      158,  173,  159,  736,  159,  852,  665,  160,  666,  160,
      272,  273,  276,  276,  274,  737,  277,  277,  277,  277,
      277,  277,  277,  386,  387,  388,  853,  279,  272,  273,
      280,  397,  398,  399,  854,  275,  175,  175,  175,  175,
      175,  175,  175,  166,  855,  279,  167,  401,  402,  403,
      856,  281,  270,  270,  270,  270,  270,  270,  270,  654,
      655,  166,  759,  760,  378,  378,  857,  168,  379,  379,
      379,  379,  379,  379,  379,  277,  277,  277,  277,  277,
      277,  277,  171,  759,  760,  172,  409,  410,  411,  413,
      414,  415,  424,  425,  426,  463,  464,  465,  273,  858,

      171,  274,  859,  490,  491,  492,  173,  379,  379,  379,
      379,  379,  379,  379,  493,  494,  273,  500,  501,  502,
      860,  861,  275,  503,  504,  505,  506,  507,  508,  551,
      552,  553,  554,  555,  556,  557,  558,  559,  561,  562,
      563,  589,  590,  591,  541,  618,  862,  863,  864,  564,
      565,  865,  592,  593,  619,  866,  620,  621,  601,  602,
      602,  602,  602,  602,  602,  636,  637,  638,  654,  655,
      867,  868,  869,  870,  654,  655,  639,  640,  871,  641,
      872,  873,  656,  656,  656,  656,  656,  656,  658,  658,
      658,  658,  658,  658,  658,  679,  680,  681,  842,  874,

      697,  702,  703,  704,  654,  655,  682,  683,  657,  698,
      843,  699,  705,  706,  875,  659,  876,  877,  709,  710,
      710,  710,  710,  710,  710,  654,  655,  783,  878,  879,
      880,  654,  655,  657,  881,  882,  784,  883,  785,  656,
      656,  656,  656,  656,  656,  658,  658,  658,  658,  658,
      658,  658,  712,  738,  884,  885,  886,  887,  888,  759,
      760,  713,  739,  889,  740,  741,  759,  760,  890,  891,
      892,  893,  714,  761,  761,  761,  761,  761,  761,  806,
      763,  763,  763,  763,  763,  763,  763,  894,  807,  895,
      808,  759,  760,  896,  897,  898,  899,  759,  760,  762,

      900,  901,  902,  903,  904,  761,  761,  761,  761,  761,
      761,  763,  763,  763,  763,  763,  763,  763,  905,  906,
      907,  908,  909,  910,  762,  911,  912,  913,  914,  915,
      916,  917,  918,  919,  920,  921,  922,  923,  924,  925,
      926,  927,  928,  929,  930,  931,  933,  934,  935,  936,
      937,  938,  932,  939,  940,  941,  942,  943,  944,  945,
      946,  947,  948,  949,  950,  951,  952,  953,  954,  955,
      956,  930,  931,  958,  960,  961,  962,  963,  964,  932,
      965,  966,  967,  968,  969,  970,  971,  972,  973,  974,
      958,  975,  977,  978,  979,  980,  981,  982,  983,  976,

      984,  985,  986,  987,  988,  989,  990,  991,  992,  996,
      994,  997,  998,  999, 1000, 1001,  993,  995, 1002, 1003,
     1004,  992,  957, 1006,  994, 1008, 1009, 1010, 1005,  993,
      959,  995, 1011, 1012, 1004, 1006, 1013, 1015, 1016, 1017,
     1018, 1019, 1005, 1020, 1014, 1022, 1023,  959, 1024, 1020,
     1026, 1021, 1027, 1024, 1028, 1029, 1025, 1021, 1029, 1031,
     1031, 1025, 1030, 1033, 1034, 1030, 1035, 1035,  840,  839,
      838,  837,  836,  835, 1036, 1036,  834,  833,  832,  831,
     1007,  830,  829,  828,  827,  826,  825,  824,  823,  822,
      821,  820, 1007,  819,  818,  817,  816,  815,  814,  813,

      812,  810, 1032, 1032,   55,   55,   55,   55,   55,   55,
       56,   56,   56,   56,   56,   56,   83,   83,   83,   83,
      164,  164,  164,  164,  176,  176,  268,  809,  268,  268,
      268,  268,  175,  805,  804,  175,  270,  803,  802,  270,
      277,  801,  800,  277,  379,  799,  798,  379,  711,  711,
      811,  811,  797,  796,  795,  794,  793,  792,  791,  790,
      789,  788,  787,  786,  782,  781,  780,  779,  778,  777,
      776,  775,  774,  773,  772,  771,  770,  769,  768,  767,
      766,  765,  764,  758,  757,  756,  755,  754,  753,  752,
      751,  750,  749,  748,  747,  746,  745,  744,  743,  742,

      735,  734,  733,  732,  731,  730,  729,  728,  727,  726,
      725,  724,  723,  722,  721,  720,  719,  718,  717,  716,
      715,  708,  707,  701,  700,  696,  695,  694,  693,  692,
      691,  690,  689,  688,  687,  686,  685,  684,  678,  677,
      676,  675,  674,  673,  672,  671,  670,  669,  668,  667,
      663,  662,  661,  660,  659,  653,  652,  651,  650,  649,
      648,  647,  646,  645,  644,  643,  642,  635,  634,  633,
      632,  631,  630,  629,  628,  627,  626,  625,  624,  623,
      622,  615,  614,  613,  612,  611,  610,  609,  608,  607,
      606,  605,  604,  603,  600,  599,  598,  597,  596,  595,

      594,  588,  587,  586,  585,  584,  583,  582,  581,  578,
      577,  576,  575,  574,  573,  572,  571,  570,  569,  568,
      567,  566,  560,  550,  549,  548,  547,  546,  545,  544,
      543,  542,  541,  540,  539,  538,  537,  536,  535,  534,
      533,  532,  531,  530,  529,  528,  527,  526,  525,  524,
      523,  522,  521,  520,  519,  518,  517,  516,  515,  514,
      513,  512,  511,  510,  509,  499,  498,  497,  496,  495,
      489,  488,  487,  486,  485,  484,  483,  482,  481,  480,
      479,  478,  477,  476,  475,  474,  473,  472,  471,  470,
      469,  468,  467,  466,  462,  461,  460,  459,  458,  457,

      456,  455,  454,  453,  452,  451,  450,  449,  448,  447,
      446,  445,  444,  443,  442,  441,  440,  439,  438,  437,
      436,  435,  434,  433,  432,  431,  430,  429,  428,  427,
      423,  422,  421,  420,  419,  418,  417,  416,  412,  408,
      407,  406,  405,  404,  400,  396,  395,  394,  393,  392,
      391,  390,  389,  385,  384,  383,  382,  381,  381,  380,
      380,  377,  376,  375,  374,  373,  372,  371,  370,  366,
      365,  364,  363,  362,  359,  358,  357,  356,  355,  354,
      353,  352,  351,  350,  349,  348,  347,  346,  345,  344,
      343,  340,  339,  338,  337,  336,  335,  334,  333,  332,

      331,  330,  326,  325,  324,  323,  322,  321,  320,  319,
      318,  317,  316,  315,  314,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  300,  299,
      298,  297,  294,  293,  292,  291,  288,  287,  286,  285,
      284,  283,  278,  278,  271,  271,  267,  266,  265,  264,
      263,  262,  259,  258,  257,  250,  249,  248,  247,  246,
      241,  240,  239,  238,  237,  233,  232,  228,  225,  224,
      223,  220,  219,  218,  212,  211,  210,  209,  208,  207,
      206,  205,  200,  199,  198,  197,  196,  195,  194,  193,
      192,  188,  187,  186,  185,  184,  183,  180,  179,  178,

      177,  162,  125,  109,   80,   69,   63,   60,   59, 1037,
       57,   57,    7, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037
    } ;

static yyconst flex_int16_t yy_chk[1484] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    9,  796,    9,    2,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,   13,   15,   25,   16,   17,   17,   17,   17,   17,
       17,   17,   21,   21,   26,   15,   16,    3,   13,   23,
       23,   25,   27,   28,   27,   35,   37,   28,   27,   26,
       26,   30,   36,   30,   28,  148,   36,   28,  148,   35,
       37,   50,   30,   50,    3,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,   33,   29,  142,  142,   31,   29,   48,   48,   33,
       29,   88,   29,   31,   39,   88,   31,    4,   29,   31,
       34,   33,  798,   34,   40,   31,  135,   34,   34,   45,

       39,   43,   34,   39,   40,   34,   43,   46,   45,   58,
       43,   58,  135,   43,    4,   19,  566,   19,   19,   19,
       19,   19,   19,   19,   48,  105,   41,   42,  566,   71,
       42,   48,   19,   41,   41,   48,  105,   44,   41,   42,
       48,   44,   19,   19,   41,   41,   42,   41,  191,  191,
       19,   44,   46,   47,   71,   47,  106,   47,   53,   53,
       53,   53,   53,   53,   53,   19,  126,  136,   19,   20,
      106,   20,   20,   20,   20,   20,   20,   20,  124,  799,
      126,  136,  126,   73,   73,  124,   20,   73,   73,   73,
       73,   73,   73,   73,  186,   72,   20,   72,   72,   72,

       72,   72,   72,   72,   20,   95,  120,  143,  186,  144,
       95,   95,   72,  800,  120,  129,  143,  144,  801,   20,
       68,   68,   68,   68,   68,   68,   68,  153,  176,  153,
       72,  153,  129,  129,  116,   68,   68,  116,  116,   68,
      161,  116,  161,  116,  154,  154,  155,  155,  223,  223,
      223,  176,  235,   68,   68,  802,  235,  259,  259,  259,
       68,   70,   70,   70,   70,   70,   70,   70,  163,  163,
      163,  163,  163,  163,  163,  803,   70,   70,  165,  165,
       70,  253,  165,  165,  165,  165,  165,  165,  165,  804,
      253,  154,  516,  155,   70,   70,  516,  612,  154,  805,

      155,   70,  154,  689,  155,  806,  612,  154,  612,  155,
      169,  169,  170,  170,  169,  689,  170,  170,  170,  170,
      170,  170,  170,  288,  288,  288,  807,  175,  169,  169,
      175,  299,  299,  299,  808,  169,  174,  174,  174,  174,
      174,  174,  174,  270,  809,  175,  270,  301,  301,  301,
      810,  175,  269,  269,  269,  269,  269,  269,  269,  711,
      711,  270,  759,  759,  272,  272,  812,  270,  272,  272,
      272,  272,  272,  272,  272,  276,  276,  276,  276,  276,
      276,  276,  277,  811,  811,  277,  310,  310,  310,  314,
      314,  314,  323,  323,  323,  365,  365,  365,  379,  813,

      277,  379,  814,  417,  417,  417,  277,  378,  378,  378,
      378,  378,  378,  378,  417,  417,  379,  428,  428,  428,
      815,  816,  379,  429,  429,  429,  430,  430,  430,  483,
      483,  483,  484,  484,  484,  485,  485,  485,  489,  489,
      489,  533,  533,  533,  541,  567,  817,  820,  821,  489,
      489,  822,  533,  533,  567,  823,  567,  567,  541,  541,
      541,  541,  541,  541,  541,  585,  585,  585,  601,  601,
      824,  825,  826,  827,  602,  602,  585,  585,  828,  585,
      829,  830,  601,  601,  601,  601,  601,  601,  602,  602,
      602,  602,  602,  602,  602,  626,  626,  626,  797,  831,

      645,  650,  650,  650,  654,  654,  626,  626,  601,  645,
      797,  645,  650,  650,  832,  659,  833,  834,  654,  654,
      654,  654,  654,  654,  654,  656,  656,  731,  835,  836,
      837,  658,  658,  601,  838,  839,  731,  840,  731,  656,
      656,  656,  656,  656,  656,  658,  658,  658,  658,  658,
      658,  658,  659,  690,  841,  842,  843,  844,  845,  709,
      709,  659,  690,  846,  690,  690,  710,  710,  847,  850,
      851,  852,  659,  709,  709,  709,  709,  709,  709,  754,
      710,  710,  710,  710,  710,  710,  710,  853,  754,  854,
      754,  761,  761,  855,  856,  857,  858,  763,  763,  709,

      859,  862,  863,  864,  866,  761,  761,  761,  761,  761,
      761,  763,  763,  763,  763,  763,  763,  763,  867,  869,
      870,  871,  872,  873,  709,  874,  875,  877,  878,  879,
      880,  881,  882,  885,  886,  887,  890,  891,  892,  893,
      894,  895,  896,  897,  898,  899,  900,  901,  902,  903,
      904,  907,  899,  908,  909,  912,  913,  914,  915,  916,
      917,  918,  919,  920,  921,  922,  923,  924,  925,  926,
      929,  930,  931,  932,  933,  936,  937,  940,  941,  931,
      942,  944,  945,  946,  948,  949,  950,  955,  956,  957,
      958,  959,  960,  961,  962,  963,  964,  965,  966,  959,

      968,  969,  970,  971,  972,  973,  974,  975,  976,  978,
      977,  979,  982,  983,  984,  985,  976,  977,  987,  990,
      991,  992,  930,  995,  994,  998,  999, 1000,  991,  992,
      932,  994, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1011,
     1012, 1013, 1004, 1014, 1007, 1017, 1018,  958, 1019, 1020,
     1022, 1014, 1023, 1024, 1027, 1028, 1019, 1020, 1029, 1030,
     1031, 1024, 1028, 1032, 1033, 1029, 1034, 1035,  795,  794,
      793,  792,  791,  790, 1034, 1035,  789,  788,  787,  786,
      995,  785,  784,  783,  782,  781,  779,  777,  776,  775,
      774,  773, 1006,  772,  771,  770,  769,  768,  766,  765,

      764,  757, 1030, 1031, 1038, 1038, 1038, 1038, 1038, 1038,
     1039, 1039, 1039, 1039, 1039, 1039, 1040, 1040, 1040, 1040,
     1041, 1041, 1041, 1041, 1042, 1042, 1043,  756, 1043, 1043,
     1043, 1043, 1044,  753,  752, 1044, 1045,  751,  750, 1045,
     1046,  749,  748, 1046, 1047,  747,  745, 1047, 1048, 1048,
     1049, 1049,  744,  743,  742,  741,  740,  739,  738,  737,
      736,  735,  734,  733,  730,  729,  728,  727,  726,  725,
      724,  723,  722,  721,  720,  719,  718,  717,  716,  715,
      714,  713,  712,  708,  706,  705,  704,  703,  702,  701,
      700,  699,  698,  697,  696,  695,  694,  693,  692,  691,

      685,  683,  682,  681,  680,  679,  676,  675,  674,  673,
      672,  671,  670,  669,  668,  667,  666,  665,  664,  663,
      661,  653,  652,  648,  647,  644,  642,  641,  640,  639,
      638,  637,  636,  635,  631,  630,  629,  627,  625,  624,
      623,  622,  621,  620,  619,  618,  617,  616,  615,  614,
      611,  606,  605,  604,  603,  600,  599,  598,  596,  595,
      593,  592,  591,  590,  589,  587,  586,  584,  583,  582,
      581,  580,  578,  577,  576,  575,  573,  572,  571,  570,
      569,  565,  564,  563,  562,  561,  560,  548,  547,  546,
      545,  544,  543,  542,  540,  539,  538,  537,  536,  535,

      534,  532,  531,  528,  523,  522,  520,  519,  518,  515,
      512,  511,  510,  509,  498,  497,  496,  494,  493,  492,
      491,  490,  487,  482,  481,  480,  478,  477,  476,  475,
      473,  472,  471,  470,  469,  467,  466,  461,  460,  458,
      457,  456,  455,  454,  453,  452,  451,  450,  449,  448,
      446,  445,  444,  443,  442,  441,  440,  439,  437,  436,
      435,  434,  433,  432,  431,  427,  423,  422,  421,  418,
      416,  406,  404,  400,  399,  398,  397,  396,  395,  394,
      392,  391,  389,  384,  383,  382,  377,  376,  375,  374,
      373,  372,  371,  366,  364,  363,  362,  361,  360,  358,

      357,  354,  353,  352,  351,  350,  349,  348,  347,  346,
      345,  344,  343,  342,  341,  340,  339,  338,  337,  336,
      335,  334,  333,  332,  331,  330,  329,  328,  327,  324,
      322,  321,  320,  319,  318,  317,  316,  315,  313,  309,
      307,  306,  305,  304,  300,  298,  297,  296,  295,  294,
      293,  292,  291,  287,  285,  284,  283,  281,  280,  275,
      274,  267,  266,  265,  264,  263,  262,  261,  260,  258,
      257,  256,  255,  254,  252,  251,  250,  249,  248,  247,
      246,  245,  244,  243,  242,  241,  240,  239,  238,  237,
      236,  234,  233,  232,  231,  230,  229,  228,  227,  226,

      225,  224,  222,  221,  220,  219,  218,  217,  216,  215,
      214,  213,  212,  211,  210,  209,  208,  207,  206,  204,
      203,  202,  201,  200,  199,  198,  197,  196,  195,  194,
      193,  192,  190,  189,  188,  187,  185,  184,  183,  182,
      181,  179,  173,  172,  168,  167,  160,  159,  158,  157,
      150,  149,  147,  146,  145,  141,  140,  139,  138,  137,
      134,  133,  132,  131,  130,  128,  127,  125,  123,  122,
      121,  119,  118,  117,  115,  114,  112,  111,  110,  109,
      108,  107,  104,  103,  102,  101,  100,   99,   98,   97,
       96,   94,   93,   92,   91,   90,   89,   87,   86,   82,

       78,   52,   38,   32,   22,   18,   14,   12,   11,    7,
        6,    5, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../src/glsl/glsl_lexer.ll"
#line 2 "../../../src/glsl/glsl_lexer.ll"
/*
 * Copyright © 2008, 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include <ctype.h>
#include <limits.h>
#include "util/strtod.h"
#include "ast.h"
#include "glsl_parser_extras.h"
#include "glsl_parser.h"

static int classify_identifier(struct _mesa_glsl_parse_state *, const char *);

#ifdef _MSC_VER
#define YY_NO_UNISTD_H
#endif

#define YY_USER_ACTION						\
   do {								\
      yylloc->first_column = yycolumn + 1;			\
      yylloc->first_line = yylloc->last_line = yylineno + 1;	\
      yycolumn += yyleng;					\
      yylloc->last_column = yycolumn + 1;			\
   } while(0);

#define YY_USER_INIT yylineno = 0; yycolumn = 0; yylloc->source = 0;

/* A macro for handling reserved words and keywords across language versions.
 *
 * Certain words start out as identifiers, become reserved words in
 * later language revisions, and finally become language keywords.
 * This may happen at different times in desktop GLSL and GLSL ES.
 *
 * For example, consider the following lexer rule:
 * samplerBuffer       KEYWORD(130, 0, 140, 0, SAMPLERBUFFER)
 *
 * This means that "samplerBuffer" will be treated as:
 * - a keyword (SAMPLERBUFFER token)         ...in GLSL >= 1.40
 * - a reserved word - error                 ...in GLSL >= 1.30
 * - an identifier                           ...in GLSL <  1.30 or GLSL ES
 */
#define KEYWORD(reserved_glsl, reserved_glsl_es,			\
                allowed_glsl, allowed_glsl_es, token)			\
   KEYWORD_WITH_ALT(reserved_glsl, reserved_glsl_es,			\
                    allowed_glsl, allowed_glsl_es, false, token)

/**
 * Like the KEYWORD macro, but the word is also treated as a keyword
 * if the given boolean expression is true.
 */
#define KEYWORD_WITH_ALT(reserved_glsl, reserved_glsl_es,		\
                         allowed_glsl, allowed_glsl_es,			\
                         alt_expr, token)				\
   do {									\
      if (yyextra->is_version(allowed_glsl, allowed_glsl_es)		\
          || (alt_expr)) {						\
	 return token;							\
      } else if (yyextra->is_version(reserved_glsl,			\
                                     reserved_glsl_es)) {		\
	 _mesa_glsl_error(yylloc, yyextra,				\
			  "illegal use of reserved word `%s'", yytext);	\
	 return ERROR_TOK;						\
      } else {								\
	 void *mem_ctx = yyextra;					\
	 yylval->identifier = ralloc_strdup(mem_ctx, yytext);		\
	 return classify_identifier(yyextra, yytext);			\
      }									\
   } while (0)

/**
 * A macro for handling keywords that have been present in GLSL since
 * its origin, but were changed into reserved words in GLSL 3.00 ES.
 */
#define DEPRECATED_ES_KEYWORD(token)					\
   do {									\
      if (yyextra->is_version(0, 300)) {				\
	 _mesa_glsl_error(yylloc, yyextra,				\
			  "illegal use of reserved word `%s'", yytext);	\
	 return ERROR_TOK;						\
      } else {								\
         return token;							\
      }									\
   } while (0)

static int
literal_integer(char *text, int len, struct _mesa_glsl_parse_state *state,
		YYSTYPE *lval, YYLTYPE *lloc, int base)
{
   bool is_uint = (text[len - 1] == 'u' ||
		   text[len - 1] == 'U');
   const char *digits = text;

   /* Skip "0x" */
   if (base == 16)
      digits += 2;

#ifdef _MSC_VER
   unsigned __int64 value = _strtoui64(digits, NULL, base);
#else
   unsigned long long value = strtoull(digits, NULL, base);
#endif

   lval->n = (int)value;

   if (value > UINT_MAX) {
      /* Note that signed 0xffffffff is valid, not out of range! */
      if (state->is_version(130, 300)) {
	 _mesa_glsl_error(lloc, state,
			  "literal value `%s' out of range", text);
      } else {
	 _mesa_glsl_warning(lloc, state,
			    "literal value `%s' out of range", text);
      }
   } else if (base == 10 && !is_uint && (unsigned)value > (unsigned)INT_MAX + 1) {
      /* Tries to catch unintentionally providing a negative value.
       * Note that -2147483648 is parsed as -(2147483648), so we don't
       * want to warn for INT_MAX.
       */
      _mesa_glsl_warning(lloc, state,
			 "signed literal value `%s' is interpreted as %d",
			 text, lval->n);
   }
   return is_uint ? UINTCONSTANT : INTCONSTANT;
}

#define LITERAL_INTEGER(base) \
   literal_integer(yytext, yyleng, yyextra, yylval, yylloc, base)

/* Note: When adding any start conditions to this list, you must also
* update the "Internal compiler error" catch-all rule near the end of
* this file. */

#line 1256 "glsl_lexer.cpp"

#define INITIAL 0
#define PP 1
#define PRAGMA 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct _mesa_glsl_parse_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int _mesa_glsl_lexer_lex_init (yyscan_t* scanner);

int _mesa_glsl_lexer_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int _mesa_glsl_lexer_lex_destroy (yyscan_t yyscanner );

int _mesa_glsl_lexer_get_debug (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE _mesa_glsl_lexer_get_extra (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *_mesa_glsl_lexer_get_in (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *_mesa_glsl_lexer_get_out (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t _mesa_glsl_lexer_get_leng (yyscan_t yyscanner );

char *_mesa_glsl_lexer_get_text (yyscan_t yyscanner );

int _mesa_glsl_lexer_get_lineno (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_lineno (int line_number ,yyscan_t yyscanner );

int _mesa_glsl_lexer_get_column  (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * _mesa_glsl_lexer_get_lval (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *_mesa_glsl_lexer_get_lloc (yyscan_t yyscanner );
    
        void _mesa_glsl_lexer_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int _mesa_glsl_lexer_wrap (yyscan_t yyscanner );
#else
extern int _mesa_glsl_lexer_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int _mesa_glsl_lexer_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int _mesa_glsl_lexer_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			_mesa_glsl_lexer_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				_mesa_glsl_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		_mesa_glsl_lexer__load_buffer_state(yyscanner );
		}

	{
#line 169 "../../../src/glsl/glsl_lexer.ll"


#line 1536 "glsl_lexer.cpp"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1038 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1037 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 171 "../../../src/glsl/glsl_lexer.ll"
;
	YY_BREAK
/* Preprocessor tokens. */ 
case 2:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 174 "../../../src/glsl/glsl_lexer.ll"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 175 "../../../src/glsl/glsl_lexer.ll"
{ BEGIN PP; return VERSION_TOK; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 176 "../../../src/glsl/glsl_lexer.ll"
{ BEGIN PP; return EXTENSION; }
	YY_BREAK
case 5:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 177 "../../../src/glsl/glsl_lexer.ll"
{
				   /* Eat characters until the first digit is
				    * encountered
				    */
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
				      ptr++;

				   /* Subtract one from the line number because
				    * yylineno is zero-based instead of
				    * one-based.
				    */
				   yylineno = strtol(ptr, &ptr, 0) - 1;

                                   /* From GLSL 3.30 and GLSL ES on, after processing the
                                    * line directive (including its new-line), the implementation
                                    * will behave as if it is compiling at the line number passed
                                    * as argument. It was line number + 1 in older specifications.
                                    */
                                   if (yyextra->is_version(330, 100))
                                      yylineno--;

				   yylloc->source = strtol(ptr, NULL, 0);
				}
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 201 "../../../src/glsl/glsl_lexer.ll"
{
				   /* Eat characters until the first digit is
				    * encountered
				    */
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
				      ptr++;

				   /* Subtract one from the line number because
				    * yylineno is zero-based instead of
				    * one-based.
				    */
				   yylineno = strtol(ptr, &ptr, 0) - 1;

                                   /* From GLSL 3.30 and GLSL ES on, after processing the
                                    * line directive (including its new-line), the implementation
                                    * will behave as if it is compiling at the line number passed
                                    * as argument. It was line number + 1 in older specifications.
                                    */
                                   if (yyextra->is_version(330, 100))
                                      yylineno--;
				}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 223 "../../../src/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_DEBUG_ON;
				}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 227 "../../../src/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_DEBUG_OFF;
				}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 231 "../../../src/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_OPTIMIZE_ON;
				}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 235 "../../../src/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_OPTIMIZE_OFF;
				}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 239 "../../../src/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_INVARIANT_ALL;
				}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 243 "../../../src/glsl/glsl_lexer.ll"
{ BEGIN PRAGMA; }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 245 "../../../src/glsl/glsl_lexer.ll"
{ BEGIN 0; yylineno++; yycolumn = 0; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 246 "../../../src/glsl/glsl_lexer.ll"
{ }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 248 "../../../src/glsl/glsl_lexer.ll"
{ }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 249 "../../../src/glsl/glsl_lexer.ll"
{ }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 250 "../../../src/glsl/glsl_lexer.ll"
return COLON;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 251 "../../../src/glsl/glsl_lexer.ll"
{
				   void *mem_ctx = yyextra;
				   yylval->identifier = ralloc_strdup(mem_ctx, yytext);
				   return IDENTIFIER;
				}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 256 "../../../src/glsl/glsl_lexer.ll"
{
				    yylval->n = strtol(yytext, NULL, 10);
				    return INTCONSTANT;
				}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 260 "../../../src/glsl/glsl_lexer.ll"
{ BEGIN 0; yylineno++; yycolumn = 0; return EOL; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 261 "../../../src/glsl/glsl_lexer.ll"
{ return yytext[0]; }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 263 "../../../src/glsl/glsl_lexer.ll"
{ yylineno++; yycolumn = 0; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 265 "../../../src/glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(ATTRIBUTE);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 266 "../../../src/glsl/glsl_lexer.ll"
return CONST_TOK;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 267 "../../../src/glsl/glsl_lexer.ll"
return BOOL_TOK;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 268 "../../../src/glsl/glsl_lexer.ll"
return FLOAT_TOK;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 269 "../../../src/glsl/glsl_lexer.ll"
return INT_TOK;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 270 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UINT_TOK);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 272 "../../../src/glsl/glsl_lexer.ll"
return BREAK;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 273 "../../../src/glsl/glsl_lexer.ll"
return CONTINUE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 274 "../../../src/glsl/glsl_lexer.ll"
return DO;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 275 "../../../src/glsl/glsl_lexer.ll"
return WHILE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 276 "../../../src/glsl/glsl_lexer.ll"
return ELSE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 277 "../../../src/glsl/glsl_lexer.ll"
return FOR;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 278 "../../../src/glsl/glsl_lexer.ll"
return IF;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 279 "../../../src/glsl/glsl_lexer.ll"
return DISCARD;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 280 "../../../src/glsl/glsl_lexer.ll"
return RETURN;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 282 "../../../src/glsl/glsl_lexer.ll"
return BVEC2;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 283 "../../../src/glsl/glsl_lexer.ll"
return BVEC3;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 284 "../../../src/glsl/glsl_lexer.ll"
return BVEC4;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 285 "../../../src/glsl/glsl_lexer.ll"
return IVEC2;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 286 "../../../src/glsl/glsl_lexer.ll"
return IVEC3;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 287 "../../../src/glsl/glsl_lexer.ll"
return IVEC4;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 288 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UVEC2);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 289 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UVEC3);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 290 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UVEC4);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 291 "../../../src/glsl/glsl_lexer.ll"
return VEC2;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 292 "../../../src/glsl/glsl_lexer.ll"
return VEC3;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 293 "../../../src/glsl/glsl_lexer.ll"
return VEC4;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 294 "../../../src/glsl/glsl_lexer.ll"
return MAT2X2;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 295 "../../../src/glsl/glsl_lexer.ll"
return MAT3X3;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 296 "../../../src/glsl/glsl_lexer.ll"
return MAT4X4;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 297 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT2X2);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 298 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT2X3);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 299 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT2X4);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 300 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT3X2);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 301 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT3X3);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 302 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT3X4);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 303 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT4X2);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 304 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT4X3);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 305 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT4X4);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 307 "../../../src/glsl/glsl_lexer.ll"
return IN_TOK;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 308 "../../../src/glsl/glsl_lexer.ll"
return OUT_TOK;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 309 "../../../src/glsl/glsl_lexer.ll"
return INOUT_TOK;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 310 "../../../src/glsl/glsl_lexer.ll"
return UNIFORM;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 311 "../../../src/glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(VARYING);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 312 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, CENTROID);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 313 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 100, 120, 100, INVARIANT);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 314 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 100, 130, 300, FLAT);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 315 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SMOOTH);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 316 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, NOPERSPECTIVE);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 318 "../../../src/glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER1D);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 319 "../../../src/glsl/glsl_lexer.ll"
return SAMPLER2D;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 320 "../../../src/glsl/glsl_lexer.ll"
return SAMPLER3D;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 321 "../../../src/glsl/glsl_lexer.ll"
return SAMPLERCUBE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 322 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, SAMPLER1DARRAY);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 323 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SAMPLER2DARRAY);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 324 "../../../src/glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER1DSHADOW);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 325 "../../../src/glsl/glsl_lexer.ll"
return SAMPLER2DSHADOW;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 326 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SAMPLERCUBESHADOW);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 327 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, SAMPLER1DARRAYSHADOW);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 328 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SAMPLER2DARRAYSHADOW);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 329 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, ISAMPLER1D);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 330 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLER2D);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 331 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLER3D);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 332 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLERCUBE);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 333 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, ISAMPLER1DARRAY);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 334 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLER2DARRAY);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 335 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, USAMPLER1D);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 336 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLER2D);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 337 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLER3D);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 338 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLERCUBE);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 339 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, USAMPLER1DARRAY);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 340 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLER2DARRAY);
	YY_BREAK
/* additional keywords in ARB_texture_multisample, included in GLSL 1.50 */
/* these are reserved but not defined in GLSL 3.00 */
case 95:
YY_RULE_SETUP
#line 344 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, SAMPLER2DMS);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 345 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, ISAMPLER2DMS);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 346 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, USAMPLER2DMS);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 347 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, SAMPLER2DMSARRAY);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 348 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, ISAMPLER2DMSARRAY);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 349 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, USAMPLER2DMSARRAY);
	YY_BREAK
/* keywords available with ARB_texture_cube_map_array_enable extension on desktop GLSL */
case 101:
YY_RULE_SETUP
#line 352 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 0, 400, 0, yyextra->ARB_texture_cube_map_array_enable, SAMPLERCUBEARRAY);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 353 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 0, 400, 0, yyextra->ARB_texture_cube_map_array_enable, ISAMPLERCUBEARRAY);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 354 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 0, 400, 0, yyextra->ARB_texture_cube_map_array_enable, USAMPLERCUBEARRAY);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 355 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 0, 400, 0, yyextra->ARB_texture_cube_map_array_enable, SAMPLERCUBEARRAYSHADOW);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 357 "../../../src/glsl/glsl_lexer.ll"
{
			  if (yyextra->OES_EGL_image_external_enable)
			     return SAMPLEREXTERNALOES;
			  else
			     return IDENTIFIER;
		}
	YY_BREAK
/* keywords available with ARB_gpu_shader5 */
case 106:
YY_RULE_SETUP
#line 365 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 0, 400, 0, yyextra->ARB_gpu_shader5_enable, PRECISE);
	YY_BREAK
/* keywords available with ARB_shader_image_load_store */
case 107:
YY_RULE_SETUP
#line 368 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE1D);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 369 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE2D);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 370 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE3D);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 371 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE2DRECT);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 372 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGECUBE);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 373 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGEBUFFER);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 374 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE1DARRAY);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 375 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE2DARRAY);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 376 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGECUBEARRAY);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 377 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE2DMS);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 378 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE2DMSARRAY);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 379 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE1D);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 380 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE2D);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 381 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE3D);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 382 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE2DRECT);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 383 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGECUBE);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 384 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGEBUFFER);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 385 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE1DARRAY);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 386 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE2DARRAY);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 387 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGECUBEARRAY);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 388 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE2DMS);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 389 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE2DMSARRAY);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 390 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE1D);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 391 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE2D);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 392 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE3D);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 393 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE2DRECT);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 394 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGECUBE);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 395 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGEBUFFER);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 396 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE1DARRAY);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 397 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE2DARRAY);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 398 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGECUBEARRAY);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 399 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE2DMS);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 400 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE2DMSARRAY);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 401 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE1DSHADOW);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 402 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE2DSHADOW);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 403 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE1DARRAYSHADOW);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 404 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE2DARRAYSHADOW);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 406 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, COHERENT);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 407 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 420, 0, yyextra->ARB_shader_image_load_store_enable, VOLATILE);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 408 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, RESTRICT);
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 409 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, READONLY);
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 410 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, WRITEONLY);
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 412 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_atomic_counters_enable, ATOMIC_UINT);
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 414 "../../../src/glsl/glsl_lexer.ll"
return STRUCT;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 415 "../../../src/glsl/glsl_lexer.ll"
return VOID_TOK;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 417 "../../../src/glsl/glsl_lexer.ll"
{
		  if ((yyextra->is_version(140, 300))
		      || yyextra->AMD_conservative_depth_enable
		      || yyextra->ARB_conservative_depth_enable
		      || yyextra->ARB_explicit_attrib_location_enable
		      || yyextra->ARB_explicit_uniform_location_enable
                      || yyextra->has_separate_shader_objects()
		      || yyextra->ARB_uniform_buffer_object_enable
		      || yyextra->ARB_fragment_coord_conventions_enable
                      || yyextra->ARB_shading_language_420pack_enable
                      || yyextra->ARB_compute_shader_enable) {
		      return LAYOUT_TOK;
		   } else {
		      void *mem_ctx = yyextra;
		      yylval->identifier = ralloc_strdup(mem_ctx, yytext);
		      return classify_identifier(yyextra, yytext);
		   }
		}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 436 "../../../src/glsl/glsl_lexer.ll"
return INC_OP;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 437 "../../../src/glsl/glsl_lexer.ll"
return DEC_OP;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 438 "../../../src/glsl/glsl_lexer.ll"
return LE_OP;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 439 "../../../src/glsl/glsl_lexer.ll"
return GE_OP;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 440 "../../../src/glsl/glsl_lexer.ll"
return EQ_OP;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 441 "../../../src/glsl/glsl_lexer.ll"
return NE_OP;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 442 "../../../src/glsl/glsl_lexer.ll"
return AND_OP;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 443 "../../../src/glsl/glsl_lexer.ll"
return OR_OP;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 444 "../../../src/glsl/glsl_lexer.ll"
return XOR_OP;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 445 "../../../src/glsl/glsl_lexer.ll"
return LEFT_OP;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 446 "../../../src/glsl/glsl_lexer.ll"
return RIGHT_OP;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 448 "../../../src/glsl/glsl_lexer.ll"
return MUL_ASSIGN;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 449 "../../../src/glsl/glsl_lexer.ll"
return DIV_ASSIGN;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 450 "../../../src/glsl/glsl_lexer.ll"
return ADD_ASSIGN;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 451 "../../../src/glsl/glsl_lexer.ll"
return MOD_ASSIGN;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 452 "../../../src/glsl/glsl_lexer.ll"
return LEFT_ASSIGN;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 453 "../../../src/glsl/glsl_lexer.ll"
return RIGHT_ASSIGN;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 454 "../../../src/glsl/glsl_lexer.ll"
return AND_ASSIGN;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 455 "../../../src/glsl/glsl_lexer.ll"
return XOR_ASSIGN;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 456 "../../../src/glsl/glsl_lexer.ll"
return OR_ASSIGN;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 457 "../../../src/glsl/glsl_lexer.ll"
return SUB_ASSIGN;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 459 "../../../src/glsl/glsl_lexer.ll"
{
			    return LITERAL_INTEGER(10);
			}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 462 "../../../src/glsl/glsl_lexer.ll"
{
			    return LITERAL_INTEGER(16);
			}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 465 "../../../src/glsl/glsl_lexer.ll"
{
			    return LITERAL_INTEGER(8);
			}
	YY_BREAK
case 177:
#line 470 "../../../src/glsl/glsl_lexer.ll"
case 178:
#line 471 "../../../src/glsl/glsl_lexer.ll"
case 179:
#line 472 "../../../src/glsl/glsl_lexer.ll"
case 180:
YY_RULE_SETUP
#line 472 "../../../src/glsl/glsl_lexer.ll"
{
			    yylval->real = _mesa_strtof(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 181:
#line 478 "../../../src/glsl/glsl_lexer.ll"
case 182:
#line 479 "../../../src/glsl/glsl_lexer.ll"
case 183:
#line 480 "../../../src/glsl/glsl_lexer.ll"
case 184:
YY_RULE_SETUP
#line 480 "../../../src/glsl/glsl_lexer.ll"
{
			    if (!yyextra->is_version(400, 0) &&
			        !yyextra->ARB_gpu_shader_fp64_enable)
			        return ERROR_TOK;
			    yylval->dreal = _mesa_strtod(yytext, NULL);
			    return DOUBLECONSTANT;
			}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 488 "../../../src/glsl/glsl_lexer.ll"
{
			    yylval->n = 1;
			    return BOOLCONSTANT;
			}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 492 "../../../src/glsl/glsl_lexer.ll"
{
			    yylval->n = 0;
			    return BOOLCONSTANT;
			}
	YY_BREAK
/* Reserved words in GLSL 1.10. */
case 187:
YY_RULE_SETUP
#line 499 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, ASM);
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 500 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, CLASS);
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 501 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, UNION);
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 502 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, ENUM);
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 503 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, TYPEDEF);
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 504 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, TEMPLATE);
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 505 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, THIS);
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 506 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 140, 300, yyextra->ARB_uniform_buffer_object_enable, PACKED_TOK);
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 507 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, GOTO);
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 508 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 130, 300, SWITCH);
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 509 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 130, 300, DEFAULT);
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 510 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INLINE_TOK);
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 511 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, NOINLINE);
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 512 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, PUBLIC_TOK);
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 513 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, STATIC);
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 514 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, EXTERN);
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 515 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, EXTERNAL);
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 516 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INTERFACE);
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 517 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, LONG_TOK);
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 518 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SHORT_TOK);
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 519 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DOUBLE_TOK);
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 520 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HALF);
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 521 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FIXED_TOK);
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 522 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, UNSIGNED);
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 523 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INPUT_TOK);
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 524 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, OUTPUT);
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 525 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC2);
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 526 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC3);
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 527 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC4);
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 528 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DVEC2);
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 529 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DVEC3);
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 530 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DVEC4);
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 531 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT2X2);
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 532 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT3X3);
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 533 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT4X4);
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 534 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT2X2);
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 535 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT2X3);
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 536 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT2X4);
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 537 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT3X2);
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 538 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT3X3);
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 539 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT3X4);
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 540 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT4X2);
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 541 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT4X3);
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 542 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT4X4);
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 543 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC2);
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 544 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC3);
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 545 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC4);
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 546 "../../../src/glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER2DRECT);
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 547 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SAMPLER3DRECT);
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 548 "../../../src/glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER2DRECTSHADOW);
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 549 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SIZEOF);
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 550 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, CAST);
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 551 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, NAMESPACE);
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 552 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, USING);
	YY_BREAK
/* Additional reserved words in GLSL 1.20. */
case 241:
YY_RULE_SETUP
#line 555 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, LOWP);
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 556 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, MEDIUMP);
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 557 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, HIGHP);
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 558 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, PRECISION);
	YY_BREAK
/* Additional reserved words in GLSL 1.30. */
case 245:
YY_RULE_SETUP
#line 561 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, CASE);
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 562 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, COMMON);
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 563 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, PARTITION);
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 564 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, ACTIVE);
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 565 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 100, 0, 0, SUPERP);
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 566 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 140, 0, SAMPLERBUFFER);
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 567 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, FILTER);
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 568 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 0, 140, 0, yyextra->ARB_uniform_buffer_object_enable && !yyextra->es_shader, ROW_MAJOR);
	YY_BREAK
/* Additional reserved words in GLSL 1.40 */
case 253:
YY_RULE_SETUP
#line 571 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(140, 300, 140, 0, ISAMPLER2DRECT);
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 572 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(140, 300, 140, 0, USAMPLER2DRECT);
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 573 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(140, 300, 140, 0, ISAMPLERBUFFER);
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 574 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(140, 300, 140, 0, USAMPLERBUFFER);
	YY_BREAK
/* Additional reserved words in GLSL ES 3.00 */
case 257:
YY_RULE_SETUP
#line 577 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(0, 300, 0, 0, RESOURCE);
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 578 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(0, 300, 0, 0, PATCH);
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 579 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 300, 400, 0, yyextra->ARB_gpu_shader5_enable, SAMPLE);
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 580 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(0, 300, 0, 0, SUBROUTINE);
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 583 "../../../src/glsl/glsl_lexer.ll"
{
			    struct _mesa_glsl_parse_state *state = yyextra;
			    void *ctx = state;	
			    if (state->es_shader && strlen(yytext) > 1024) {
			       _mesa_glsl_error(yylloc, state,
			                        "Identifier `%s' exceeds 1024 characters",
			                        yytext);
			    } else {
			      yylval->identifier = ralloc_strdup(ctx, yytext);
			    }
			    return classify_identifier(state, yytext);
			}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 596 "../../../src/glsl/glsl_lexer.ll"
{ return yytext[0]; }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 598 "../../../src/glsl/glsl_lexer.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3030 "glsl_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PP):
case YY_STATE_EOF(PRAGMA):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * _mesa_glsl_lexer_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( _mesa_glsl_lexer_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of _mesa_glsl_lexer_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					_mesa_glsl_lexer_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			_mesa_glsl_lexer_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) _mesa_glsl_lexer_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1038 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1038 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1037);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					_mesa_glsl_lexer_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( _mesa_glsl_lexer_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void _mesa_glsl_lexer_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        _mesa_glsl_lexer_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            _mesa_glsl_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	_mesa_glsl_lexer__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	_mesa_glsl_lexer__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void _mesa_glsl_lexer__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		_mesa_glsl_lexer_pop_buffer_state();
	 *		_mesa_glsl_lexer_push_buffer_state(new_buffer);
     */
	_mesa_glsl_lexer_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	_mesa_glsl_lexer__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (_mesa_glsl_lexer_wrap()) processing, but the only time this flag
	 * is looked at is after _mesa_glsl_lexer_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void _mesa_glsl_lexer__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE _mesa_glsl_lexer__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) _mesa_glsl_lexer_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) _mesa_glsl_lexer_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer__create_buffer()" );

	b->yy_is_our_buffer = 1;

	_mesa_glsl_lexer__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with _mesa_glsl_lexer__create_buffer()
 * @param yyscanner The scanner object.
 */
    void _mesa_glsl_lexer__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		_mesa_glsl_lexer_free((void *) b->yy_ch_buf ,yyscanner );

	_mesa_glsl_lexer_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a _mesa_glsl_lexer_restart() or at EOF.
 */
    static void _mesa_glsl_lexer__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	_mesa_glsl_lexer__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then _mesa_glsl_lexer__init_buffer was _probably_
     * called from _mesa_glsl_lexer_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void _mesa_glsl_lexer__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		_mesa_glsl_lexer__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void _mesa_glsl_lexer_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	_mesa_glsl_lexer_ensure_buffer_stack(yyscanner);

	/* This block is copied from _mesa_glsl_lexer__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from _mesa_glsl_lexer__switch_to_buffer. */
	_mesa_glsl_lexer__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void _mesa_glsl_lexer_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	_mesa_glsl_lexer__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		_mesa_glsl_lexer__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void _mesa_glsl_lexer_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)_mesa_glsl_lexer_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)_mesa_glsl_lexer_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE _mesa_glsl_lexer__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) _mesa_glsl_lexer_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	_mesa_glsl_lexer__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to _mesa_glsl_lexer_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       _mesa_glsl_lexer__scan_bytes() instead.
 */
YY_BUFFER_STATE _mesa_glsl_lexer__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return _mesa_glsl_lexer__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to _mesa_glsl_lexer_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE _mesa_glsl_lexer__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) _mesa_glsl_lexer_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = _mesa_glsl_lexer__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in _mesa_glsl_lexer__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE _mesa_glsl_lexer_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int _mesa_glsl_lexer_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int _mesa_glsl_lexer_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *_mesa_glsl_lexer_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *_mesa_glsl_lexer_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t _mesa_glsl_lexer_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *_mesa_glsl_lexer_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void _mesa_glsl_lexer_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void _mesa_glsl_lexer_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "_mesa_glsl_lexer_set_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void _mesa_glsl_lexer_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "_mesa_glsl_lexer_set_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see _mesa_glsl_lexer__switch_to_buffer
 */
void _mesa_glsl_lexer_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void _mesa_glsl_lexer_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int _mesa_glsl_lexer_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void _mesa_glsl_lexer_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * _mesa_glsl_lexer_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void _mesa_glsl_lexer_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *_mesa_glsl_lexer_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void _mesa_glsl_lexer_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* _mesa_glsl_lexer_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int _mesa_glsl_lexer_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) _mesa_glsl_lexer_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* _mesa_glsl_lexer_lex_init_extra has the same functionality as _mesa_glsl_lexer_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to _mesa_glsl_lexer_alloc in
 * the yyextra field.
 */

int _mesa_glsl_lexer_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    _mesa_glsl_lexer_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) _mesa_glsl_lexer_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    _mesa_glsl_lexer_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from _mesa_glsl_lexer_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * _mesa_glsl_lexer_lex_init()
     */
    return 0;
}

/* _mesa_glsl_lexer_lex_destroy is for both reentrant and non-reentrant scanners. */
int _mesa_glsl_lexer_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		_mesa_glsl_lexer__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		_mesa_glsl_lexer_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	_mesa_glsl_lexer_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        _mesa_glsl_lexer_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * _mesa_glsl_lexer_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    _mesa_glsl_lexer_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *_mesa_glsl_lexer_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *_mesa_glsl_lexer_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void _mesa_glsl_lexer_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see _mesa_glsl_lexer_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 598 "../../../src/glsl/glsl_lexer.ll"



int
classify_identifier(struct _mesa_glsl_parse_state *state, const char *name)
{
   if (state->symbols->get_variable(name) || state->symbols->get_function(name))
      return IDENTIFIER;
   else if (state->symbols->get_type(name))
      return TYPE_IDENTIFIER;
   else
      return NEW_IDENTIFIER;
}

void
_mesa_glsl_lexer_ctor(struct _mesa_glsl_parse_state *state, const char *string)
{
   _mesa_glsl_lexer_lex_init_extra(state,& state->scanner);
   _mesa_glsl_lexer__scan_string(string,state->scanner);
}

void
_mesa_glsl_lexer_dtor(struct _mesa_glsl_parse_state *state)
{
   _mesa_glsl_lexer_lex_destroy(state->scanner);
}

