#line 2 "glsl_lexer.cpp"

#line 4 "glsl_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE _mesa_glsl_lexer_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via _mesa_glsl_lexer_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void _mesa_glsl_lexer_restart (FILE *input_file ,yyscan_t yyscanner );
void _mesa_glsl_lexer__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_glsl_lexer__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void _mesa_glsl_lexer__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void _mesa_glsl_lexer__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void _mesa_glsl_lexer_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void _mesa_glsl_lexer_pop_buffer_state (yyscan_t yyscanner );

static void _mesa_glsl_lexer_ensure_buffer_stack (yyscan_t yyscanner );
static void _mesa_glsl_lexer__load_buffer_state (yyscan_t yyscanner );
static void _mesa_glsl_lexer__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER _mesa_glsl_lexer__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE _mesa_glsl_lexer__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_glsl_lexer__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_glsl_lexer__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *_mesa_glsl_lexer_alloc (yy_size_t ,yyscan_t yyscanner );
void *_mesa_glsl_lexer_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void _mesa_glsl_lexer_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer _mesa_glsl_lexer__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        _mesa_glsl_lexer_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            _mesa_glsl_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        _mesa_glsl_lexer_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            _mesa_glsl_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define _mesa_glsl_lexer_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 234
#define YY_END_OF_BUFFER 235
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[960] =
    {   0,
        0,    0,   16,   16,    0,    0,  235,  233,    1,   21,
      233,  233,  233,  233,  233,  233,  233,  233,  131,  129,
      233,  233,  233,  232,  233,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  233,    1,  233,  234,   16,
       20,  234,   19,   17,   18,   14,   13,    1,  113,  122,
      114,  125,  119,  108,  121,  109,  128,  133,  120,  134,
      131,    0,    0,  136,  131,    0,  129,  129,  117,  110,
      112,  111,  118,  232,  126,  116,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,   30,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,   34,  232,  232,   61,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      127,  115,    1,    0,    0,    2,    0,    0,    0,    0,
       16,   15,   19,   18,    0,  133,  132,    0,  134,    0,
      135,  130,  123,  124,  232,  139,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,   33,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
       26,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,   62,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,    0,    0,
        0,    0,   15,    0,  133,    0,  132,    0,  134,  135,
      130,  232,  232,  232,   24,  232,  232,  186,  179,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,   32,
      142,  232,  232,  232,  232,   68,  232,  232,  147,  161,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  158,  182,   49,   50,   51,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  145,  137,  232,  232,   27,  232,  232,  232,
      232,  232,  232,  232,   46,   47,   48,  106,  232,  232,
      232,    0,    0,    0,    0,    0,  132,  232,  232,  232,
       28,   37,   38,   39,  232,  140,  232,  232,   23,  232,
      232,  232,  232,  169,  170,  171,  232,  138,  232,  162,
       25,  172,  173,  174,  184,  166,  167,  168,  232,  232,

      232,   63,  164,  232,  232,  232,   40,   41,   42,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      229,  232,  232,  232,  232,  232,  232,  232,  232,  159,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  141,  232,  232,  181,   43,   44,   45,  232,  232,
       31,  232,    0,    0,    0,    0,  189,  232,  232,  232,
      232,  187,  232,  232,  232,  160,  155,  192,  232,  232,
      232,  232,  232,  232,  150,  232,  232,  232,  107,   52,
       53,   54,   55,   56,   57,   58,   59,   60,  232,  232,
      232,  232,  165,  146,  232,  232,  153,  232,  232,  232,

       36,  232,  230,  178,   69,  154,  105,  232,  190,  148,
      232,  232,  232,  232,  232,  232,  232,  232,  232,    0,
        0,    0,    0,  232,  232,  232,  232,  232,  149,   35,
      232,  232,  232,  232,  232,  232,  193,  194,  195,  232,
      232,  232,  232,  232,  183,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  143,  232,  232,
      232,  232,  232,   64,  232,  232,   65,  232,  232,    0,
        0,    0,    0,    0,  232,  232,   66,  223,   29,  156,
      197,  198,  199,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  151,  232,  232,  232,  225,

      227,  224,  232,  232,  232,  232,  232,  232,  232,  232,
      144,  201,  202,  203,  232,  232,  163,  232,  152,  232,
        0,    0,    6,    0,    0,    0,   12,    3,  232,   22,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  196,
      157,   67,  232,  232,  232,  232,  232,  180,  232,  188,
      185,  218,   71,   72,   73,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  226,    0,
        0,    0,    0,    0,    0,    0,  232,  232,  232,  232,
      200,  232,  232,  232,  232,  232,   82,   83,   84,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  231,  232,  232,  232,  204,   88,   89,   90,
      232,  232,    4,    0,    5,    0,    0,    0,    0,    0,
        0,  228,  232,  232,  232,  232,  232,  232,  232,  215,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
       94,  232,  232,  232,  232,   74,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,    0,    0,    0,    0,
      232,  232,  216,  205,  232,  206,  232,  232,  232,   95,
      232,  232,   85,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  217,  232,  232,
       96,  232,  232,   91,    0,    0,    0,  207,  208,  232,

      211,  232,  212,  232,  232,  232,  232,  232,  232,   70,
      232,  232,  232,  232,  175,  232,  176,  191,  232,  232,
      232,  209,  210,  232,  232,  232,  232,  232,  232,    0,
        0,    0,  232,  232,  232,  232,  232,  219,  221,  232,
       75,  232,   76,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  220,  222,  232,    0,    0,    0,    0,  232,
      232,   86,   87,  232,  232,  232,   77,  232,  232,  232,
       78,  232,  232,  232,   92,   93,  232,  232,    0,    0,
        0,    0,  232,  232,  232,  232,  232,  232,   97,  232,
      100,  232,  232,  232,  232,    0,    0,    0,    0,  232,

      232,   98,  101,  232,  232,  232,  232,   79,  232,   99,
      102,    0,    0,    0,    7,    0,    0,  213,  214,  232,
      232,  232,  232,  104,    0,    0,    8,    0,    0,  232,
      232,  177,  232,    0,    0,    0,   80,   81,  232,    0,
        0,    0,    9,  232,    0,    0,   10,  103,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   11,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    1,    7,    8,    1,    9,
       10,   11,   12,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   21,   21,   22,   22,   23,    1,   24,
       25,   26,    1,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   34,   34,   34,   35,   36,   34,   37,   34,
       34,   38,   39,   40,   41,   34,   34,   42,   34,   34,
        1,    1,    1,   43,   44,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   34,   61,   62,   63,   64,   65,   66,   67,
       68,   69,    1,   70,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[71] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    1,    1,    4,    4,    4,    4,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    1,    5,    4,    4,    4,    4,    3,    3,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1
    } ;

static yyconst flex_int16_t yy_base[970] =
    {   0,
        0,   69,   75,  145, 1329, 1328, 1330, 1333,   70, 1333,
     1304, 1303,   94, 1302,   91,   92,   90, 1301,  202,  256,
       89, 1300,   95,    0,   79,   68,   64,   79,  124,   76,
      131, 1265,  127,  141,   81,   88,   82, 1259,  136,  126,
      183,  177,  149,  168,  134,  180,  206,  251, 1333,  140,
     1333, 1307,  239, 1333,    0, 1333, 1333,  228, 1333, 1333,
     1333, 1333, 1333, 1333, 1333, 1333, 1333,  231, 1333,  233,
      137,  307,  273, 1333, 1333,    0,    0, 1333, 1296, 1333,
     1333, 1333, 1295,    0, 1333, 1333, 1256, 1261,  115, 1258,
     1267, 1266, 1252, 1255, 1267,  244, 1261, 1248, 1245, 1259,

     1245, 1242, 1242, 1248,  126,  180, 1242, 1253, 1238, 1244,
     1248, 1249,    0, 1240, 1251,  254, 1250, 1245, 1225,  143,
     1229, 1243, 1233,  188, 1226,  271, 1239, 1241,  285, 1220,
     1228, 1225, 1214, 1223,  223,  252, 1228, 1223, 1226, 1214,
     1217,  246,  246,  226, 1227, 1214, 1227,   83, 1220, 1219,
     1333, 1333,  329,  334,  340, 1333, 1204, 1217, 1208, 1219,
      342,    0,  333,    0,  346, 1333,  329,  390, 1333,  353,
      397,  281, 1333, 1333, 1214,    0, 1209, 1204, 1208, 1218,
     1215,  328, 1198, 1198, 1210, 1201,  278, 1212, 1209, 1209,
     1207, 1204, 1195, 1202, 1188, 1186, 1199, 1184, 1201,    0,

     1198, 1185, 1193, 1190, 1194, 1195, 1188, 1185, 1173, 1172,
     1186, 1189, 1176, 1185, 1172, 1179, 1169,  362, 1175, 1178,
     1168, 1176, 1164, 1168, 1159, 1174, 1173, 1163, 1170,  325,
     1153, 1172, 1155, 1153, 1164, 1153, 1148, 1146, 1148, 1159,
     1144, 1146, 1143, 1155, 1154, 1157, 1138,  326, 1147, 1142,
     1140, 1150, 1128,  402, 1147, 1149, 1137, 1129, 1128, 1132,
     1144, 1127,    0,  414,  421,  438, 1333,  445,  456, 1333,
     1333, 1122, 1133, 1132,    0, 1129,  405,    0,    0, 1122,
     1120, 1120, 1121, 1116, 1125, 1113, 1131, 1119,  408,    0,
        0, 1113, 1124, 1123, 1123,    0, 1107,  426,    0,    0,

     1109,  450, 1117, 1118, 1108, 1102, 1101, 1102, 1101, 1101,
      461, 1096,    0,    0, 1092, 1091, 1090, 1092, 1093, 1098,
     1092, 1088, 1102, 1097, 1097, 1095, 1094, 1087, 1081, 1083,
     1082, 1085, 1085, 1077, 1080, 1075, 1084, 1089, 1076, 1073,
     1086, 1076,    0,    0, 1083, 1079,    0, 1070, 1070, 1076,
     1066, 1074,  464, 1071,    0,    0,    0,    0, 1060, 1073,
     1072, 1071, 1070, 1067, 1055,  473,  480, 1067, 1068, 1068,
        0,    0,    0,    0, 1054,    0, 1063, 1053,    0, 1052,
     1053, 1047, 1058,    0,    0,    0, 1048,    0, 1044,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1055,  486,

     1054,    0,    0, 1052, 1048, 1044,    0,    0,    0, 1036,
      467,  489,  498, 1041, 1037, 1043, 1033, 1031, 1045, 1029,
        0, 1029, 1043, 1031, 1027, 1034, 1028, 1040, 1035,    0,
     1033, 1030, 1034, 1017, 1015, 1018, 1025, 1031, 1026, 1025,
     1012,    0, 1014, 1015,    0,    0,    0,    0, 1012, 1016,
        0, 1009, 1009, 1064, 1008, 1011,    0, 1019,  998, 1008,
     1002,    0,  995,  995, 1009,    0, 1011,    0,  503, 1025,
     1024, 1023,  988,  987,    0, 1005, 1004,  999,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  987, 1001,
      987,  984,    0,    0,  990,  989,    0,  985,  993,  992,

        0,  984,  976,    0,    0,    0,    0,  973,    0,    0,
      972,  984,  506,  976,  983,  982,  979,  973,  970,  965,
      524,  981,  966,  960,  960,  974,  958,  971,    0,    0,
      963,  988,  987,  986,  951,  950,  359,  365,    0,  963,
      966,  964,  952,  948,    0,  961,  958,  957,  946,  945,
      935,  953,  938,  941,  519,  946,  949,    0,  967,  966,
      965,  930,  929,    0,  944,  930,    0,  941,  933,  935,
      549,  555,  985,  928,  932,  935,    0,    0,    0,    0,
      956,  955,    0,  931,  934,  918,  926,  916,  924,  925,
      925,  924,  909,  561,  922,    0,  923,  911,  910,    0,

        0,    0,  906,  936,  935,  934,  899,  898,  894,  902,
        0,  932,  931,    0,  907,  910,    0,  564,    0,  887,
      895,  582, 1333,  592,    0,  603,  594, 1333,  895,    0,
      891,  890,  900,  900,  887,  902,  885,  900,  895,    0,
        0,    0,  913,  912,  911,  876,  875,    0,  875,    0,
        0,    0,  500,  590,  899,  886,  889,  871,  884,  871,
      870,  880,  880,  898,  897,  896,  861,  860,    0,  865,
      628,  638,  446,  882,  872,  860,  856,  857,  856,  867,
        0,  870,  866,  868,  864,  850,  883,  526,    0,  859,
      862,  854,  845,  853,  843,  864,  853,  849,  851,  849,

      849,  848,    0,  835,  834,  845,    0,  866,  600,    0,
      842,  845, 1333,  508, 1333,  648,    0,  659,  860,  843,
      825,    0,  842,  841,  824,  816,  824,  814,  822,    0,
      819,  818,  839,  828,  826,  826,  809,  812,  827,  810,
      843,  822,  823,  820,  817,  522,  804,  819,  818,  794,
      772,  771,  792,  781,  779,  779,  526,  794,  762,  772,
      755,  754,    0,  782,  754,  780,  752,  756,  755,  788,
      767,  764,  784,  761,  764,  760,  760,  743,  740,  754,
       10,  170,  176,  190,  209,  241,  247,    0,  326,  332,
      368,  350,  352,  425,  478,  468,  476,    0,    0,  502,

        0,  503,    0,  511,  514,  499,  500,  525,  526,    0,
      520,  538,  539,  553,  576,  559,    0,    0,  571,  589,
      590,    0,    0,  592,  594,  582,  589,  602,  610,  670,
      680,  620,  629,  638,  616,  617,  625,    0,    0,  626,
      649,  624,  652,  647,  641,  628,  651,  649,  642,  631,
      632,  640,    0,    0,  641,  701,  702,  703,  637,  659,
      660,    0,    0,  664,  665,  660,    0,  661,  646,  670,
        0,  648,  658,  681,    0,    0,  674,  675,  663,  720,
      673,  675,  666,  667,  659,  660,  684,  685,    0,  684,
      694,  668,  704,  668,  669,  673,  689,  738,  740,  675,

      677,    0,    0,  696,  697,  687,  695,    0,  711,    0,
        0,  706,  750,  751, 1333,  754,  753,    0,    0,  698,
      699,  693,  719,    0,  704,  764, 1333,  765,  718,  703,
      704,    0,  723,  719,  723,  773,    0,    0,  718,  733,
      778,  779, 1333,  716,  726,  783, 1333,    0,  723,  785,
      788,  789,  790,  739,  740,  796,  797, 1333, 1333,  835,
      840,  843,  846,  797,  798,  849,  853,  856,  858
    } ;

static yyconst flex_int16_t yy_def[970] =
    {   0,
      959,    1,  960,  960,  961,  961,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  962,  959,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  963,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  964,  959,  965,
       19,  959,  959,  959,  959,  966,   20,  959,  959,  959,
      959,  959,  959,  962,  959,  959,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,

      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  967,  959,  963,  959,  959,  965,  959,  959,  959,
      959,  966,  959,  959,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,

      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  959,  959,
      959,  959,  967,  959,  959,  959,  959,  959,  959,  959,
      959,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,

      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  959,  959,  959,  959,  959,  959,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,

      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  959,  959,  959,  959,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,

      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  959,
      959,  959,  959,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  959,
      959,  959,  959,  959,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,

      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      959,  959,  959,  959,  968,  959,  959,  959,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  959,
      959,  959,  968,  959,  959,  959,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,

      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  959,  959,  959,  959,  969,  959,  959,  959,
      959,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  969,  959,  959,  959,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  959,  959,  959,  962,  962,  962,

      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  959,
      959,  959,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  959,  959,  959,  959,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  959,  959,
      959,  959,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  959,  959,  959,  959,  962,

      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  959,  959,  959,  959,  959,  959,  962,  962,  962,
      962,  962,  962,  962,  959,  959,  959,  959,  959,  962,
      962,  962,  962,  959,  959,  959,  962,  962,  962,  959,
      959,  959,  959,  962,  959,  959,  959,  962,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,    0,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959
    } ;

static yyconst flex_int16_t yy_nxt[1404] =
    {   0,
        8,    9,   10,    9,   11,    8,   12,   13,    8,    8,
       14,   15,   16,   17,   18,   19,   20,   20,   20,   20,
       20,   20,    8,   21,   22,   23,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   25,   24,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   24,   24,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   24,   24,   24,   46,
       47,   58,  817,   58,   48,   49,   50,   51,   50,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   52,
       49,   53,   53,   53,   53,   53,   53,   54,   49,   49,

       49,   61,   64,   85,   66,   68,   68,   68,   68,   68,
       68,   68,   79,   80,   87,   65,   67,   49,   62,   82,
       83,   86,   90,   93,   91,  119,  123,   94,   92,   88,
       89,  101,  121,  102,   95,  255,  122,   96,  256,  120,
      124,  161,  103,  161,   49,   49,   50,   51,   50,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   52,
       49,   53,   53,   53,   53,   53,   53,   54,   49,   49,
       49,  110,   97,  177,  129,  104,   98,  178,  959,  111,
      126,  196,   99,  105,  130,  149,  106,   49,  100,  107,
      113,  112,  197,  114,  150,  108,  127,  115,  116,  128,

      216,  142,  117,  959,  151,  118,  143,  153,  217,   58,
      144,  154,  146,  145,   49,   70,  147,   71,   71,   71,
       71,   71,   71,   72,  198,  138,  148,  131,  139,   58,
      818,   58,   73,   74,  132,  133,  819,  140,  199,  134,
      221,  820,   75,   76,  141,  135,  136,  222,  137,  152,
       73,   74,  155,  156,  163,  163,  163,  163,  163,  163,
      163,  165,  166,  168,  169,   75,  821,  237,   76,   70,
      250,   77,   77,   77,   77,   77,   77,   77,  251,  165,
      166,  168,  169,  238,  170,  170,   73,   74,  171,  171,
      171,  171,  171,  171,  171,  185,   78,  239,  248,  157,

      186,  187,  246,  247,   73,   74,  158,  249,  822,  208,
      159,  240,  209,  210,  823,  160,  211,  224,  212,   78,
       70,  271,   72,   72,   72,   72,   72,   72,   72,  229,
      153,  225,   58,  226,  154,  155,  156,   73,   74,  284,
      285,  155,  156,  161,  271,  161,  230,  231,  163,  163,
      163,  163,  163,  163,  163,   73,   74,  264,  264,  266,
      267,  265,  265,  265,  265,  265,  265,  265,  171,  171,
      171,  171,  171,  171,  171,  348,  278,  266,  267,  315,
      316,  317,  157,  329,  349,  586,  824,  330,  157,  158,
      279,  588,  825,  159,  826,  158,  827,  587,  160,  159,

      828,  268,  268,  589,  160,  269,  269,  269,  269,  269,
      269,  269,  171,  171,  171,  171,  171,  171,  171,  355,
      356,  357,  372,  373,  374,  384,  385,  386,  270,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  392,  393,  394,  270,  622,  623,  366,
      366,  829,  166,  367,  367,  367,  367,  367,  367,  367,
      269,  269,  269,  269,  269,  269,  269,  396,  397,  398,
      166,  269,  269,  269,  269,  269,  269,  269,  407,  408,
      409,  446,  447,  448,  480,  481,  482,  169,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,

      367,  367,  470,  471,  472,  169,  483,  484,  485,  714,
      715,  267,  830,  473,  474,  486,  487,  488,  831,  532,
      533,  534,  559,  560,  561,  521,  693,  714,  715,  267,
      535,  536,  832,  562,  563,  604,  605,  606,  694,  571,
      572,  572,  572,  572,  572,  572,  607,  608,  783,  609,
      622,  623,  732,  833,  834,  835,  622,  623,  836,  837,
      784,  733,  838,  734,  624,  624,  624,  624,  624,  624,
      626,  626,  626,  626,  626,  626,  626,  643,  644,  645,
      664,  665,  666,  622,  623,  839,  840,  841,  646,  647,
      625,  667,  668,  622,  623,  627,  842,  671,  672,  672,

      672,  672,  672,  672,  622,  623,  843,  624,  624,  624,
      624,  624,  624,  844,  845,  625,  695,  846,  626,  626,
      626,  626,  626,  626,  626,  696,  752,  697,  698,  714,
      715,  847,  674,  848,  849,  753,  850,  754,  851,  714,
      715,  675,  852,  716,  716,  716,  716,  716,  716,  714,
      715,  853,  676,  718,  718,  718,  718,  718,  718,  718,
      714,  715,  854,  716,  716,  716,  716,  716,  716,  717,
      855,  856,  859,  860,  718,  718,  718,  718,  718,  718,
      718,  857,  861,  862,  863,  864,  865,  866,  858,  867,
      868,  869,  870,  871,  717,  872,  873,  874,  875,  876,

      877,  878,  856,  857,  880,  882,  883,  884,  885,  886,
      858,  887,  888,  889,  890,  891,  892,  893,  894,  895,
      896,  880,  897,  899,  900,  901,  902,  903,  904,  905,
      898,  906,  907,  908,  909,  910,  911,  912,  913,  914,
      918,  916,  919,  920,  921,  922,  923,  915,  917,  924,
      925,  926,  914,  879,  928,  916,  930,  931,  932,  927,
      915,  881,  917,  933,  934,  926,  928,  935,  937,  938,
      939,  940,  941,  927,  942,  936,  944,  945,  881,  946,
      942,  948,  943,  949,  946,  950,  951,  947,  943,  951,
      953,  953,  947,  952,  955,  956,  952,  957,  957,   68,

      167,  816,  815,  814,  813,  958,  958,  812,  811,  810,
      809,  929,  808,  807,  806,  805,  804,  803,  802,  801,
      800,  799,  798,  929,  797,  796,  795,  794,  793,  792,
      791,  790,  789,  954,  954,   55,   55,   55,   55,   55,
       56,   56,   56,   56,   56,   84,   84,   84,  164,  164,
      164,  172,  172,  263,  788,  263,  263,  263,  673,  673,
      757,  757,  787,  786,  785,  782,  781,  780,  779,  778,
      777,  776,  775,  774,  773,  772,  771,  770,  769,  768,
      767,  766,  765,  764,  763,  762,  761,  760,  759,  758,
      756,  755,  751,  750,  749,  748,  747,  746,  745,  744,

      743,  742,  741,  740,  739,  738,  737,  736,  735,  731,
      730,  729,  728,  727,  726,  725,  724,  723,  722,  721,
      720,  719,  713,  712,  711,  710,  709,  708,  707,  706,
      705,  704,  703,  702,  701,  700,  699,  692,  691,  690,
      689,  688,  687,  686,  685,  684,  683,  682,  681,  680,
      679,  678,  677,  670,  669,  663,  662,  661,  660,  659,
      658,  657,  656,  655,  654,  653,  652,  651,  650,  649,
      648,  642,  641,  640,  639,  638,  637,  636,  635,  634,
      633,  632,  631,  630,  629,  628,  627,  621,  620,  619,
      618,  617,  616,  615,  614,  613,  612,  611,  610,  603,

      602,  601,  600,  599,  598,  597,  596,  595,  594,  593,
      592,  591,  590,  585,  584,  583,  582,  581,  580,  579,
      578,  577,  576,  575,  574,  573,  570,  569,  568,  567,
      566,  565,  564,  558,  557,  556,  555,  554,  553,  552,
      551,  550,  549,  548,  547,  546,  545,  544,  543,  542,
      541,  540,  539,  538,  537,  531,  530,  529,  528,  527,
      526,  525,  524,  523,  522,  521,  520,  519,  518,  517,
      516,  515,  514,  513,  512,  511,  510,  509,  508,  507,
      506,  505,  504,  503,  502,  501,  500,  499,  498,  497,
      496,  495,  494,  493,  492,  491,  490,  489,  479,  478,

      477,  476,  475,  469,  468,  467,  466,  465,  464,  463,
      462,  461,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  451,  450,  449,  445,  444,  443,  442,  441,  440,
      439,  438,  437,  436,  435,  434,  433,  432,  431,  430,
      429,  428,  427,  426,  425,  424,  423,  422,  421,  420,
      419,  418,  417,  416,  415,  414,  413,  412,  411,  410,
      406,  405,  404,  403,  402,  401,  400,  399,  395,  391,
      390,  389,  388,  387,  383,  382,  381,  380,  379,  378,
      377,  376,  375,  371,  370,  369,  368,  365,  364,  363,
      362,  361,  360,  359,  358,  354,  353,  352,  351,  350,

      347,  346,  345,  344,  343,  342,  341,  340,  339,  338,
      337,  336,  335,  334,  333,  332,  331,  328,  327,  326,
      325,  324,  323,  322,  321,  320,  319,  318,  314,  313,
      312,  311,  310,  309,  308,  307,  306,  305,  304,  303,
      302,  301,  300,  299,  298,  297,  296,  295,  294,  293,
      292,  291,  290,  289,  288,  287,  286,  283,  282,  281,
      280,  277,  276,  275,  274,  273,  272,  262,  261,  260,
      259,  258,  257,  254,  253,  252,  245,  244,  243,  242,
      241,  236,  235,  234,  233,  232,  228,  227,  223,  220,
      219,  218,  215,  214,  213,  207,  206,  205,  204,  203,

      202,  201,  200,  195,  194,  193,  192,  191,  190,  189,
      188,  184,  183,  182,  181,  180,  179,  176,  175,  174,
      173,  162,  125,  109,   81,   69,   63,   60,   59,  959,
       57,   57,    7,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,

      959,  959,  959
    } ;

static yyconst flex_int16_t yy_chk[1404] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    9,  781,    9,    2,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,   13,   15,   25,   16,   17,   17,   17,   17,   17,
       17,   17,   21,   21,   26,   15,   16,    3,   13,   23,
       23,   25,   27,   28,   27,   35,   37,   28,   27,   26,
       26,   30,   36,   30,   28,  148,   36,   28,  148,   35,
       37,   50,   30,   50,    3,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,   33,   29,   89,   40,   31,   29,   89,   71,   33,
       39,  105,   29,   31,   40,   45,   31,    4,   29,   31,
       34,   33,  105,   34,   45,   31,   39,   34,   34,   39,

      120,   43,   34,   71,   46,   34,   43,   47,  120,   47,
       43,   47,   44,   43,    4,   19,   44,   19,   19,   19,
       19,   19,   19,   19,  106,   42,   44,   41,   42,   58,
      782,   58,   19,   19,   41,   41,  783,   42,  106,   41,
      124,  784,   19,   19,   42,   41,   41,  124,   41,   46,
       19,   19,   48,   48,   53,   53,   53,   53,   53,   53,
       53,   68,   68,   70,   70,   19,  785,  135,   19,   20,
      144,   20,   20,   20,   20,   20,   20,   20,  144,   68,
       68,   70,   70,  135,   73,   73,   20,   20,   73,   73,
       73,   73,   73,   73,   73,   96,   20,  136,  143,   48,

       96,   96,  142,  142,   20,   20,   48,  143,  786,  116,
       48,  136,  116,  116,  787,   48,  116,  126,  116,   20,
       72,  172,   72,   72,   72,   72,   72,   72,   72,  129,
      153,  126,  153,  126,  153,  154,  154,   72,   72,  187,
      187,  155,  155,  161,  172,  161,  129,  129,  163,  163,
      163,  163,  163,  163,  163,   72,   72,  165,  165,  167,
      167,  165,  165,  165,  165,  165,  165,  165,  170,  170,
      170,  170,  170,  170,  170,  248,  182,  167,  167,  218,
      218,  218,  154,  230,  248,  537,  789,  230,  155,  154,
      182,  538,  790,  154,  791,  155,  792,  537,  154,  155,

      793,  168,  168,  538,  155,  168,  168,  168,  168,  168,
      168,  168,  171,  171,  171,  171,  171,  171,  171,  254,
      254,  254,  277,  277,  277,  289,  289,  289,  171,  264,
      264,  264,  264,  264,  264,  264,  265,  265,  265,  265,
      265,  265,  265,  298,  298,  298,  171,  673,  673,  266,
      266,  794,  265,  266,  266,  266,  266,  266,  266,  266,
      268,  268,  268,  268,  268,  268,  268,  302,  302,  302,
      265,  269,  269,  269,  269,  269,  269,  269,  311,  311,
      311,  353,  353,  353,  411,  411,  411,  269,  366,  366,
      366,  366,  366,  366,  366,  367,  367,  367,  367,  367,

      367,  367,  400,  400,  400,  269,  412,  412,  412,  714,
      714,  367,  795,  400,  400,  413,  413,  413,  796,  469,
      469,  469,  513,  513,  513,  521,  653,  757,  757,  367,
      469,  469,  797,  513,  513,  555,  555,  555,  653,  521,
      521,  521,  521,  521,  521,  521,  555,  555,  746,  555,
      571,  571,  688,  800,  802,  804,  572,  572,  805,  806,
      746,  688,  807,  688,  571,  571,  571,  571,  571,  571,
      572,  572,  572,  572,  572,  572,  572,  594,  594,  594,
      618,  618,  618,  622,  622,  808,  809,  811,  594,  594,
      571,  618,  618,  624,  624,  627,  812,  622,  622,  622,

      622,  622,  622,  622,  626,  626,  813,  624,  624,  624,
      624,  624,  624,  814,  815,  571,  654,  816,  626,  626,
      626,  626,  626,  626,  626,  654,  709,  654,  654,  671,
      671,  819,  627,  820,  821,  709,  824,  709,  825,  672,
      672,  627,  826,  671,  671,  671,  671,  671,  671,  716,
      716,  827,  627,  672,  672,  672,  672,  672,  672,  672,
      718,  718,  828,  716,  716,  716,  716,  716,  716,  671,
      829,  830,  832,  833,  718,  718,  718,  718,  718,  718,
      718,  831,  834,  835,  836,  837,  840,  841,  831,  842,
      843,  844,  845,  846,  671,  847,  848,  849,  850,  851,

      852,  855,  856,  857,  858,  859,  860,  861,  864,  865,
      857,  866,  868,  869,  870,  872,  873,  874,  877,  878,
      879,  880,  881,  882,  883,  884,  885,  886,  887,  888,
      881,  890,  891,  892,  893,  894,  895,  896,  897,  898,
      900,  899,  901,  904,  905,  906,  907,  898,  899,  909,
      912,  913,  914,  856,  917,  916,  920,  921,  922,  913,
      914,  858,  916,  923,  925,  926,  928,  929,  930,  931,
      933,  934,  935,  926,  936,  929,  939,  940,  880,  941,
      942,  944,  936,  945,  946,  949,  950,  941,  942,  951,
      952,  953,  946,  950,  954,  955,  951,  956,  957,  964,

      965,  780,  779,  778,  777,  956,  957,  776,  775,  774,
      773,  917,  772,  771,  770,  769,  768,  767,  766,  765,
      764,  762,  761,  928,  760,  759,  758,  756,  755,  754,
      753,  752,  751,  952,  953,  960,  960,  960,  960,  960,
      961,  961,  961,  961,  961,  962,  962,  962,  963,  963,
      963,  966,  966,  967,  750,  967,  967,  967,  968,  968,
      969,  969,  749,  748,  747,  745,  744,  743,  742,  741,
      740,  739,  738,  737,  736,  735,  734,  733,  732,  731,
      729,  728,  727,  726,  725,  724,  723,  721,  720,  719,
      712,  711,  708,  706,  705,  704,  702,  701,  700,  699,

      698,  697,  696,  695,  694,  693,  692,  691,  690,  687,
      686,  685,  684,  683,  682,  680,  679,  678,  677,  676,
      675,  674,  670,  668,  667,  666,  665,  664,  663,  662,
      661,  660,  659,  658,  657,  656,  655,  649,  647,  646,
      645,  644,  643,  639,  638,  637,  636,  635,  634,  633,
      632,  631,  629,  621,  620,  616,  615,  613,  612,  610,
      609,  608,  607,  606,  605,  604,  603,  599,  598,  597,
      595,  593,  592,  591,  590,  589,  588,  587,  586,  585,
      584,  582,  581,  576,  575,  574,  573,  570,  569,  568,
      566,  565,  563,  562,  561,  560,  559,  557,  556,  554,

      553,  552,  551,  550,  549,  548,  547,  546,  544,  543,
      542,  541,  540,  536,  535,  534,  533,  532,  531,  528,
      527,  526,  525,  524,  523,  522,  520,  519,  518,  517,
      516,  515,  514,  512,  511,  508,  503,  502,  500,  499,
      498,  496,  495,  492,  491,  490,  489,  478,  477,  476,
      474,  473,  472,  471,  470,  467,  465,  464,  463,  461,
      460,  459,  458,  456,  455,  454,  453,  452,  450,  449,
      444,  443,  441,  440,  439,  438,  437,  436,  435,  434,
      433,  432,  431,  429,  428,  427,  426,  425,  424,  423,
      422,  420,  419,  418,  417,  416,  415,  414,  410,  406,

      405,  404,  401,  399,  389,  387,  383,  382,  381,  380,
      378,  377,  375,  370,  369,  368,  365,  364,  363,  362,
      361,  360,  359,  354,  352,  351,  350,  349,  348,  346,
      345,  342,  341,  340,  339,  338,  337,  336,  335,  334,
      333,  332,  331,  330,  329,  328,  327,  326,  325,  324,
      323,  322,  321,  320,  319,  318,  317,  316,  315,  312,
      310,  309,  308,  307,  306,  305,  304,  303,  301,  297,
      295,  294,  293,  292,  288,  287,  286,  285,  284,  283,
      282,  281,  280,  276,  274,  273,  272,  262,  261,  260,
      259,  258,  257,  256,  255,  253,  252,  251,  250,  249,

      247,  246,  245,  244,  243,  242,  241,  240,  239,  238,
      237,  236,  235,  234,  233,  232,  231,  229,  228,  227,
      226,  225,  224,  223,  222,  221,  220,  219,  217,  216,
      215,  214,  213,  212,  211,  210,  209,  208,  207,  206,
      205,  204,  203,  202,  201,  199,  198,  197,  196,  195,
      194,  193,  192,  191,  190,  189,  188,  186,  185,  184,
      183,  181,  180,  179,  178,  177,  175,  160,  159,  158,
      157,  150,  149,  147,  146,  145,  141,  140,  139,  138,
      137,  134,  133,  132,  131,  130,  128,  127,  125,  123,
      122,  121,  119,  118,  117,  115,  114,  112,  111,  110,

      109,  108,  107,  104,  103,  102,  101,  100,   99,   98,
       97,   95,   94,   93,   92,   91,   90,   88,   87,   83,
       79,   52,   38,   32,   22,   18,   14,   12,   11,    7,
        6,    5,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,

      959,  959,  959
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "glsl_lexer.ll"
#line 2 "glsl_lexer.ll"
/*
 * Copyright © 2008, 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include <ctype.h>
#include <limits.h>
#include "strtod.h"
#include "ast.h"
#include "glsl_parser_extras.h"
#include "glsl_parser.h"

static int classify_identifier(struct _mesa_glsl_parse_state *, const char *);

#ifdef _MSC_VER
#define YY_NO_UNISTD_H
#endif

#define YY_USER_ACTION						\
   do {								\
      yylloc->source = 0;					\
      yylloc->first_column = yycolumn + 1;			\
      yylloc->first_line = yylineno + 1;			\
      yycolumn += yyleng;					\
   } while(0);

#define YY_USER_INIT yylineno = 0; yycolumn = 0;

/* A macro for handling reserved words and keywords across language versions.
 *
 * Certain words start out as identifiers, become reserved words in
 * later language revisions, and finally become language keywords.
 * This may happen at different times in desktop GLSL and GLSL ES.
 *
 * For example, consider the following lexer rule:
 * samplerBuffer       KEYWORD(130, 0, 140, 0, SAMPLERBUFFER)
 *
 * This means that "samplerBuffer" will be treated as:
 * - a keyword (SAMPLERBUFFER token)         ...in GLSL >= 1.40
 * - a reserved word - error                 ...in GLSL >= 1.30
 * - an identifier                           ...in GLSL <  1.30 or GLSL ES
 */
#define KEYWORD(reserved_glsl, reserved_glsl_es,			\
                allowed_glsl, allowed_glsl_es, token)			\
   KEYWORD_WITH_ALT(reserved_glsl, reserved_glsl_es,			\
                    allowed_glsl, allowed_glsl_es, false, token)

/**
 * Like the KEYWORD macro, but the word is also treated as a keyword
 * if the given boolean expression is true.
 */
#define KEYWORD_WITH_ALT(reserved_glsl, reserved_glsl_es,		\
                         allowed_glsl, allowed_glsl_es,			\
                         alt_expr, token)				\
   do {									\
      if (yyextra->is_version(allowed_glsl, allowed_glsl_es)		\
          || (alt_expr)) {						\
	 return token;							\
      } else if (yyextra->is_version(reserved_glsl,			\
                                     reserved_glsl_es)) {		\
	 _mesa_glsl_error(yylloc, yyextra,				\
			  "Illegal use of reserved word `%s'", yytext);	\
	 return ERROR_TOK;						\
      } else {								\
	 yylval->identifier = strdup(yytext);				\
	 return classify_identifier(yyextra, yytext);			\
      }									\
   } while (0)

/**
 * A macro for handling keywords that have been present in GLSL since
 * its origin, but were changed into reserved words in GLSL 3.00 ES.
 */
#define DEPRECATED_ES_KEYWORD(token)					\
   do {									\
      if (yyextra->is_version(0, 300)) {				\
	 _mesa_glsl_error(yylloc, yyextra,				\
			  "Illegal use of reserved word `%s'", yytext);	\
	 return ERROR_TOK;						\
      } else {								\
         return token;							\
      }									\
   } while (0)

static int
literal_integer(char *text, int len, struct _mesa_glsl_parse_state *state,
		YYSTYPE *lval, YYLTYPE *lloc, int base)
{
   bool is_uint = (text[len - 1] == 'u' ||
		   text[len - 1] == 'U');
   const char *digits = text;

   /* Skip "0x" */
   if (base == 16)
      digits += 2;

#ifdef _MSC_VER
   unsigned __int64 value = _strtoui64(digits, NULL, base);
#else
   unsigned long long value = strtoull(digits, NULL, base);
#endif

   lval->n = (int)value;

   if (value > UINT_MAX) {
      /* Note that signed 0xffffffff is valid, not out of range! */
      if (state->is_version(130, 300)) {
	 _mesa_glsl_error(lloc, state,
			  "Literal value `%s' out of range", text);
      } else {
	 _mesa_glsl_warning(lloc, state,
			    "Literal value `%s' out of range", text);
      }
   } else if (base == 10 && !is_uint && (unsigned)value > (unsigned)INT_MAX + 1) {
      /* Tries to catch unintentionally providing a negative value.
       * Note that -2147483648 is parsed as -(2147483648), so we don't
       * want to warn for INT_MAX.
       */
      _mesa_glsl_warning(lloc, state,
			 "Signed literal value `%s' is interpreted as %d",
			 text, lval->n);
   }
   return is_uint ? UINTCONSTANT : INTCONSTANT;
}

#define LITERAL_INTEGER(base) \
   literal_integer(yytext, yyleng, yyextra, yylval, yylloc, base)


#line 1216 "glsl_lexer.cpp"

#define INITIAL 0
#define PP 1
#define PRAGMA 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct _mesa_glsl_parse_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int _mesa_glsl_lexer_lex_init (yyscan_t* scanner);

int _mesa_glsl_lexer_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int _mesa_glsl_lexer_lex_destroy (yyscan_t yyscanner );

int _mesa_glsl_lexer_get_debug (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE _mesa_glsl_lexer_get_extra (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *_mesa_glsl_lexer_get_in (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *_mesa_glsl_lexer_get_out (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_out  (FILE * out_str ,yyscan_t yyscanner );

int _mesa_glsl_lexer_get_leng (yyscan_t yyscanner );

char *_mesa_glsl_lexer_get_text (yyscan_t yyscanner );

int _mesa_glsl_lexer_get_lineno (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_lineno (int line_number ,yyscan_t yyscanner );

int _mesa_glsl_lexer_get_column  (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * _mesa_glsl_lexer_get_lval (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *_mesa_glsl_lexer_get_lloc (yyscan_t yyscanner );
    
        void _mesa_glsl_lexer_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int _mesa_glsl_lexer_wrap (yyscan_t yyscanner );
#else
extern int _mesa_glsl_lexer_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int _mesa_glsl_lexer_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int _mesa_glsl_lexer_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 164 "glsl_lexer.ll"


#line 1470 "glsl_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			_mesa_glsl_lexer_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				_mesa_glsl_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		_mesa_glsl_lexer__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 960 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 959 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 166 "glsl_lexer.ll"
;
	YY_BREAK
/* Preprocessor tokens. */ 
case 2:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 169 "glsl_lexer.ll"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 170 "glsl_lexer.ll"
{ BEGIN PP; return VERSION_TOK; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 171 "glsl_lexer.ll"
{ BEGIN PP; return EXTENSION; }
	YY_BREAK
case 5:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 172 "glsl_lexer.ll"
{
				   /* Eat characters until the first digit is
				    * encountered
				    */
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
				      ptr++;

				   /* Subtract one from the line number because
				    * yylineno is zero-based instead of
				    * one-based.
				    */
				   yylineno = strtol(ptr, &ptr, 0) - 1;
				   yylloc->source = strtol(ptr, NULL, 0);
				}
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 187 "glsl_lexer.ll"
{
				   /* Eat characters until the first digit is
				    * encountered
				    */
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
				      ptr++;

				   /* Subtract one from the line number because
				    * yylineno is zero-based instead of
				    * one-based.
				    */
				   yylineno = strtol(ptr, &ptr, 0) - 1;
				}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 201 "glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_DEBUG_ON;
				}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 205 "glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_DEBUG_OFF;
				}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 209 "glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_OPTIMIZE_ON;
				}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 213 "glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_OPTIMIZE_OFF;
				}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 217 "glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_INVARIANT_ALL;
				}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 221 "glsl_lexer.ll"
{ BEGIN PRAGMA; }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 223 "glsl_lexer.ll"
{ BEGIN 0; yylineno++; yycolumn = 0; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 224 "glsl_lexer.ll"
{ }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 226 "glsl_lexer.ll"
{ }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 227 "glsl_lexer.ll"
{ }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 228 "glsl_lexer.ll"
return COLON;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 229 "glsl_lexer.ll"
{
				   yylval->identifier = strdup(yytext);
				   return IDENTIFIER;
				}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 233 "glsl_lexer.ll"
{
				    yylval->n = strtol(yytext, NULL, 10);
				    return INTCONSTANT;
				}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 237 "glsl_lexer.ll"
{ BEGIN 0; yylineno++; yycolumn = 0; return EOL; }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 239 "glsl_lexer.ll"
{ yylineno++; yycolumn = 0; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 241 "glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(ATTRIBUTE);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 242 "glsl_lexer.ll"
return CONST_TOK;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 243 "glsl_lexer.ll"
return BOOL_TOK;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 244 "glsl_lexer.ll"
return FLOAT_TOK;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 245 "glsl_lexer.ll"
return INT_TOK;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 246 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UINT_TOK);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 248 "glsl_lexer.ll"
return BREAK;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 249 "glsl_lexer.ll"
return CONTINUE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 250 "glsl_lexer.ll"
return DO;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 251 "glsl_lexer.ll"
return WHILE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 252 "glsl_lexer.ll"
return ELSE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 253 "glsl_lexer.ll"
return FOR;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 254 "glsl_lexer.ll"
return IF;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 255 "glsl_lexer.ll"
return DISCARD;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 256 "glsl_lexer.ll"
return RETURN;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 258 "glsl_lexer.ll"
return BVEC2;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 259 "glsl_lexer.ll"
return BVEC3;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 260 "glsl_lexer.ll"
return BVEC4;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 261 "glsl_lexer.ll"
return IVEC2;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 262 "glsl_lexer.ll"
return IVEC3;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 263 "glsl_lexer.ll"
return IVEC4;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 264 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UVEC2);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 265 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UVEC3);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 266 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UVEC4);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 267 "glsl_lexer.ll"
return VEC2;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 268 "glsl_lexer.ll"
return VEC3;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 269 "glsl_lexer.ll"
return VEC4;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 270 "glsl_lexer.ll"
return MAT2X2;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 271 "glsl_lexer.ll"
return MAT3X3;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 272 "glsl_lexer.ll"
return MAT4X4;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 273 "glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT2X2);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 274 "glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT2X3);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 275 "glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT2X4);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 276 "glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT3X2);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 277 "glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT3X3);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 278 "glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT3X4);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 279 "glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT4X2);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 280 "glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT4X3);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 281 "glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT4X4);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 283 "glsl_lexer.ll"
return IN_TOK;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 284 "glsl_lexer.ll"
return OUT_TOK;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 285 "glsl_lexer.ll"
return INOUT_TOK;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 286 "glsl_lexer.ll"
return UNIFORM;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 287 "glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(VARYING);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 288 "glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, CENTROID);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 289 "glsl_lexer.ll"
KEYWORD(120, 100, 120, 100, INVARIANT);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 290 "glsl_lexer.ll"
KEYWORD(130, 100, 130, 300, FLAT);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 291 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SMOOTH);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 292 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, NOPERSPECTIVE);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 294 "glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER1D);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 295 "glsl_lexer.ll"
return SAMPLER2D;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 296 "glsl_lexer.ll"
return SAMPLER3D;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 297 "glsl_lexer.ll"
return SAMPLERCUBE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 298 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, SAMPLER1DARRAY);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 299 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SAMPLER2DARRAY);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 300 "glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER1DSHADOW);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 301 "glsl_lexer.ll"
return SAMPLER2DSHADOW;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 302 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SAMPLERCUBESHADOW);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 303 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, SAMPLER1DARRAYSHADOW);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 304 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SAMPLER2DARRAYSHADOW);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 305 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, ISAMPLER1D);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 306 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLER2D);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 307 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLER3D);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 308 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLERCUBE);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 309 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, ISAMPLER1DARRAY);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 310 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLER2DARRAY);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 311 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, USAMPLER1D);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 312 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLER2D);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 313 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLER3D);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 314 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLERCUBE);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 315 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, USAMPLER1DARRAY);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 316 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLER2DARRAY);
	YY_BREAK
/* additional keywords in ARB_texture_multisample, included in GLSL 1.50 */
/* these are reserved but not defined in GLSL 3.00 */
case 94:
YY_RULE_SETUP
#line 320 "glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, SAMPLER2DMS);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 321 "glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, ISAMPLER2DMS);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 322 "glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, USAMPLER2DMS);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 323 "glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, SAMPLER2DMSARRAY);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 324 "glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, ISAMPLER2DMSARRAY);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 325 "glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, USAMPLER2DMSARRAY);
	YY_BREAK
/* keywords available with ARB_texture_cube_map_array_enable extension on desktop GLSL */
case 100:
YY_RULE_SETUP
#line 328 "glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 0, 400, 0, yyextra->ARB_texture_cube_map_array_enable, SAMPLERCUBEARRAY);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 329 "glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 0, 400, 0, yyextra->ARB_texture_cube_map_array_enable, ISAMPLERCUBEARRAY);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 330 "glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 0, 400, 0, yyextra->ARB_texture_cube_map_array_enable, USAMPLERCUBEARRAY);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 331 "glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 0, 400, 0, yyextra->ARB_texture_cube_map_array_enable, SAMPLERCUBEARRAYSHADOW);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 333 "glsl_lexer.ll"
{
			  if (yyextra->OES_EGL_image_external_enable)
			     return SAMPLEREXTERNALOES;
			  else
			     return IDENTIFIER;
		}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 341 "glsl_lexer.ll"
return STRUCT;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 342 "glsl_lexer.ll"
return VOID_TOK;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 344 "glsl_lexer.ll"
{
		  if ((yyextra->is_version(140, 300))
		      || yyextra->AMD_conservative_depth_enable
		      || yyextra->ARB_conservative_depth_enable
		      || yyextra->ARB_explicit_attrib_location_enable
		      || yyextra->ARB_uniform_buffer_object_enable
		      || yyextra->ARB_fragment_coord_conventions_enable
                      || yyextra->ARB_shading_language_420pack_enable) {
		      return LAYOUT_TOK;
		   } else {
		      yylval->identifier = strdup(yytext);
		      return classify_identifier(yyextra, yytext);
		   }
		}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 359 "glsl_lexer.ll"
return INC_OP;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 360 "glsl_lexer.ll"
return DEC_OP;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 361 "glsl_lexer.ll"
return LE_OP;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 362 "glsl_lexer.ll"
return GE_OP;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 363 "glsl_lexer.ll"
return EQ_OP;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 364 "glsl_lexer.ll"
return NE_OP;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 365 "glsl_lexer.ll"
return AND_OP;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 366 "glsl_lexer.ll"
return OR_OP;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 367 "glsl_lexer.ll"
return XOR_OP;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 368 "glsl_lexer.ll"
return LEFT_OP;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 369 "glsl_lexer.ll"
return RIGHT_OP;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 371 "glsl_lexer.ll"
return MUL_ASSIGN;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 372 "glsl_lexer.ll"
return DIV_ASSIGN;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 373 "glsl_lexer.ll"
return ADD_ASSIGN;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 374 "glsl_lexer.ll"
return MOD_ASSIGN;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 375 "glsl_lexer.ll"
return LEFT_ASSIGN;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 376 "glsl_lexer.ll"
return RIGHT_ASSIGN;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 377 "glsl_lexer.ll"
return AND_ASSIGN;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 378 "glsl_lexer.ll"
return XOR_ASSIGN;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 379 "glsl_lexer.ll"
return OR_ASSIGN;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 380 "glsl_lexer.ll"
return SUB_ASSIGN;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 382 "glsl_lexer.ll"
{
			    return LITERAL_INTEGER(10);
			}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 385 "glsl_lexer.ll"
{
			    return LITERAL_INTEGER(16);
			}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 388 "glsl_lexer.ll"
{
			    return LITERAL_INTEGER(8);
			}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 392 "glsl_lexer.ll"
{
			    yylval->real = glsl_strtof(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 396 "glsl_lexer.ll"
{
			    yylval->real = glsl_strtof(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 400 "glsl_lexer.ll"
{
			    yylval->real = glsl_strtof(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 404 "glsl_lexer.ll"
{
			    yylval->real = glsl_strtof(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 408 "glsl_lexer.ll"
{
			    yylval->real = glsl_strtof(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 413 "glsl_lexer.ll"
{
			    yylval->n = 1;
			    return BOOLCONSTANT;
			}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 417 "glsl_lexer.ll"
{
			    yylval->n = 0;
			    return BOOLCONSTANT;
			}
	YY_BREAK
/* Reserved words in GLSL 1.10. */
case 139:
YY_RULE_SETUP
#line 424 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, ASM);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 425 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, CLASS);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 426 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, UNION);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 427 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, ENUM);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 428 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, TYPEDEF);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 429 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, TEMPLATE);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 430 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, THIS);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 431 "glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 140, 300, yyextra->ARB_uniform_buffer_object_enable, PACKED_TOK);
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 432 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, GOTO);
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 433 "glsl_lexer.ll"
KEYWORD(110, 100, 130, 300, SWITCH);
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 434 "glsl_lexer.ll"
KEYWORD(110, 100, 130, 300, DEFAULT);
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 435 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INLINE_TOK);
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 436 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, NOINLINE);
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 437 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, VOLATILE);
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 438 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, PUBLIC_TOK);
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 439 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, STATIC);
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 440 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, EXTERN);
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 441 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, EXTERNAL);
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 442 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INTERFACE);
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 443 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, LONG_TOK);
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 444 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SHORT_TOK);
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 445 "glsl_lexer.ll"
KEYWORD(110, 100, 400, 0, DOUBLE_TOK);
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 446 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HALF);
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 447 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FIXED_TOK);
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 448 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, UNSIGNED);
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 449 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INPUT_TOK);
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 450 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, OUTPUT);
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 451 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC2);
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 452 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC3);
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 453 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC4);
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 454 "glsl_lexer.ll"
KEYWORD(110, 100, 400, 0, DVEC2);
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 455 "glsl_lexer.ll"
KEYWORD(110, 100, 400, 0, DVEC3);
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 456 "glsl_lexer.ll"
KEYWORD(110, 100, 400, 0, DVEC4);
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 457 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC2);
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 458 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC3);
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 459 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC4);
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 460 "glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER2DRECT);
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 461 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SAMPLER3DRECT);
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 462 "glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER2DRECTSHADOW);
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 463 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SIZEOF);
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 464 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, CAST);
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 465 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, NAMESPACE);
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 466 "glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, USING);
	YY_BREAK
/* Additional reserved words in GLSL 1.20. */
case 182:
YY_RULE_SETUP
#line 469 "glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, LOWP);
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 470 "glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, MEDIUMP);
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 471 "glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, HIGHP);
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 472 "glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, PRECISION);
	YY_BREAK
/* Additional reserved words in GLSL 1.30. */
case 186:
YY_RULE_SETUP
#line 475 "glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, CASE);
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 476 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, COMMON);
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 477 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, PARTITION);
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 478 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, ACTIVE);
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 479 "glsl_lexer.ll"
KEYWORD(130, 100, 0, 0, SUPERP);
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 480 "glsl_lexer.ll"
KEYWORD(130, 300, 140, 0, SAMPLERBUFFER);
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 481 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, FILTER);
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 482 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE1D);
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 483 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE2D);
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 484 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE3D);
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 485 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGECUBE);
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 486 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IIMAGE1D);
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 487 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IIMAGE2D);
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 488 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IIMAGE3D);
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 489 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IIMAGECUBE);
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 490 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, UIMAGE1D);
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 491 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, UIMAGE2D);
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 492 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, UIMAGE3D);
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 493 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, UIMAGECUBE);
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 494 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE1DARRAY);
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 495 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE2DARRAY);
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 496 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IIMAGE1DARRAY);
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 497 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IIMAGE2DARRAY);
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 498 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, UIMAGE1DARRAY);
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 499 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, UIMAGE2DARRAY);
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 500 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE1DSHADOW);
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 501 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE2DSHADOW);
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 502 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE1DARRAYSHADOW);
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 503 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE2DARRAYSHADOW);
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 504 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGEBUFFER);
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 505 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IIMAGEBUFFER);
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 506 "glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, UIMAGEBUFFER);
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 507 "glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 0, 140, 0, yyextra->ARB_uniform_buffer_object_enable && !yyextra->es_shader, ROW_MAJOR);
	YY_BREAK
/* Additional reserved words in GLSL 1.40 */
case 219:
YY_RULE_SETUP
#line 510 "glsl_lexer.ll"
KEYWORD(140, 300, 140, 0, ISAMPLER2DRECT);
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 511 "glsl_lexer.ll"
KEYWORD(140, 300, 140, 0, USAMPLER2DRECT);
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 512 "glsl_lexer.ll"
KEYWORD(140, 300, 140, 0, ISAMPLERBUFFER);
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 513 "glsl_lexer.ll"
KEYWORD(140, 300, 140, 0, USAMPLERBUFFER);
	YY_BREAK
/* Additional reserved words in GLSL ES 3.00 */
case 223:
YY_RULE_SETUP
#line 516 "glsl_lexer.ll"
KEYWORD(0, 300, 0, 0, COHERENT);
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 517 "glsl_lexer.ll"
KEYWORD(0, 300, 0, 0, RESTRICT);
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 518 "glsl_lexer.ll"
KEYWORD(0, 300, 0, 0, READONLY);
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 519 "glsl_lexer.ll"
KEYWORD(0, 300, 0, 0, WRITEONLY);
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 520 "glsl_lexer.ll"
KEYWORD(0, 300, 0, 0, RESOURCE);
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 521 "glsl_lexer.ll"
KEYWORD(0, 300, 0, 0, ATOMIC_UINT);
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 522 "glsl_lexer.ll"
KEYWORD(0, 300, 0, 0, PATCH);
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 523 "glsl_lexer.ll"
KEYWORD(0, 300, 0, 0, SAMPLE);
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 524 "glsl_lexer.ll"
KEYWORD(0, 300, 0, 0, SUBROUTINE);
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 527 "glsl_lexer.ll"
{
			    struct _mesa_glsl_parse_state *state = yyextra;
			    void *ctx = state;	
			    yylval->identifier = ralloc_strdup(ctx, yytext);
			    return classify_identifier(state, yytext);
			}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 534 "glsl_lexer.ll"
{ return yytext[0]; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 536 "glsl_lexer.ll"
ECHO;
	YY_BREAK
#line 2843 "glsl_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PP):
case YY_STATE_EOF(PRAGMA):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * _mesa_glsl_lexer_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( _mesa_glsl_lexer_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of _mesa_glsl_lexer_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					_mesa_glsl_lexer_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			_mesa_glsl_lexer_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) _mesa_glsl_lexer_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 960 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 960 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 959);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					_mesa_glsl_lexer_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( _mesa_glsl_lexer_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void _mesa_glsl_lexer_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        _mesa_glsl_lexer_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            _mesa_glsl_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	_mesa_glsl_lexer__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	_mesa_glsl_lexer__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void _mesa_glsl_lexer__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		_mesa_glsl_lexer_pop_buffer_state();
	 *		_mesa_glsl_lexer_push_buffer_state(new_buffer);
     */
	_mesa_glsl_lexer_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	_mesa_glsl_lexer__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (_mesa_glsl_lexer_wrap()) processing, but the only time this flag
	 * is looked at is after _mesa_glsl_lexer_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void _mesa_glsl_lexer__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE _mesa_glsl_lexer__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) _mesa_glsl_lexer_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) _mesa_glsl_lexer_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer__create_buffer()" );

	b->yy_is_our_buffer = 1;

	_mesa_glsl_lexer__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with _mesa_glsl_lexer__create_buffer()
 * @param yyscanner The scanner object.
 */
    void _mesa_glsl_lexer__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		_mesa_glsl_lexer_free((void *) b->yy_ch_buf ,yyscanner );

	_mesa_glsl_lexer_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a _mesa_glsl_lexer_restart() or at EOF.
 */
    static void _mesa_glsl_lexer__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	_mesa_glsl_lexer__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then _mesa_glsl_lexer__init_buffer was _probably_
     * called from _mesa_glsl_lexer_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void _mesa_glsl_lexer__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		_mesa_glsl_lexer__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void _mesa_glsl_lexer_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	_mesa_glsl_lexer_ensure_buffer_stack(yyscanner);

	/* This block is copied from _mesa_glsl_lexer__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from _mesa_glsl_lexer__switch_to_buffer. */
	_mesa_glsl_lexer__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void _mesa_glsl_lexer_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	_mesa_glsl_lexer__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		_mesa_glsl_lexer__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void _mesa_glsl_lexer_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)_mesa_glsl_lexer_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)_mesa_glsl_lexer_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE _mesa_glsl_lexer__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) _mesa_glsl_lexer_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	_mesa_glsl_lexer__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to _mesa_glsl_lexer_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       _mesa_glsl_lexer__scan_bytes() instead.
 */
YY_BUFFER_STATE _mesa_glsl_lexer__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return _mesa_glsl_lexer__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to _mesa_glsl_lexer_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE _mesa_glsl_lexer__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) _mesa_glsl_lexer_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = _mesa_glsl_lexer__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in _mesa_glsl_lexer__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE _mesa_glsl_lexer_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int _mesa_glsl_lexer_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int _mesa_glsl_lexer_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *_mesa_glsl_lexer_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *_mesa_glsl_lexer_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int _mesa_glsl_lexer_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *_mesa_glsl_lexer_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void _mesa_glsl_lexer_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void _mesa_glsl_lexer_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "_mesa_glsl_lexer_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void _mesa_glsl_lexer_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "_mesa_glsl_lexer_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see _mesa_glsl_lexer__switch_to_buffer
 */
void _mesa_glsl_lexer_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void _mesa_glsl_lexer_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int _mesa_glsl_lexer_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void _mesa_glsl_lexer_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * _mesa_glsl_lexer_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void _mesa_glsl_lexer_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *_mesa_glsl_lexer_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void _mesa_glsl_lexer_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* _mesa_glsl_lexer_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int _mesa_glsl_lexer_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) _mesa_glsl_lexer_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* _mesa_glsl_lexer_lex_init_extra has the same functionality as _mesa_glsl_lexer_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to _mesa_glsl_lexer_alloc in
 * the yyextra field.
 */

int _mesa_glsl_lexer_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    _mesa_glsl_lexer_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) _mesa_glsl_lexer_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    _mesa_glsl_lexer_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from _mesa_glsl_lexer_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * _mesa_glsl_lexer_lex_init()
     */
    return 0;
}

/* _mesa_glsl_lexer_lex_destroy is for both reentrant and non-reentrant scanners. */
int _mesa_glsl_lexer_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		_mesa_glsl_lexer__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		_mesa_glsl_lexer_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	_mesa_glsl_lexer_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        _mesa_glsl_lexer_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * _mesa_glsl_lexer_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    _mesa_glsl_lexer_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *_mesa_glsl_lexer_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *_mesa_glsl_lexer_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void _mesa_glsl_lexer_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see _mesa_glsl_lexer_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 536 "glsl_lexer.ll"



int
classify_identifier(struct _mesa_glsl_parse_state *state, const char *name)
{
   if (state->symbols->get_variable(name) || state->symbols->get_function(name))
      return IDENTIFIER;
   else if (state->symbols->get_type(name))
      return TYPE_IDENTIFIER;
   else
      return NEW_IDENTIFIER;
}

void
_mesa_glsl_lexer_ctor(struct _mesa_glsl_parse_state *state, const char *string)
{
   _mesa_glsl_lexer_lex_init_extra(state,& state->scanner);
   _mesa_glsl_lexer__scan_string(string,state->scanner);
}

void
_mesa_glsl_lexer_dtor(struct _mesa_glsl_parse_state *state)
{
   _mesa_glsl_lexer_lex_destroy(state->scanner);
}

