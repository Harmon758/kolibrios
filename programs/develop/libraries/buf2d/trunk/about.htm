<html>
<head>
<title>библиотека для работы с 2d буферами</title>
<meta http-equiv="content-type" content="text/html; charset=WINDOWS-1251">
<style>
body
{
  font-size: 15px;
  font-family: "Bookman Old Style";
  color: black;
  text-align: justify;
}
h1 { color: green; font-size: 23px; }
h2 { color: green; font-size: 21px; }
h3 { color: green; font-size: 19px; }
h4 { color: #803f00; font-size: 17px; }
i { color: #0099cc; }
b { color: #0099cc; }
p {
  text-indent: 1em;
  margin-top: 3px;
  margin-bottom: 2px;
  margin-left: 0px;
  margin-right: 0px;
}
ol, ul, dl{
  margin-top: 3px;
  margin-bottom: 2px;
}
pre
{
  padding: 2px;
  padding-left: 20px;
  margin-top: 5px;
  margin-bottom: 5px;
  margin-left: 0px;
  margin-right: 0px;
  font-family: "Courier New";
  font-size: 15px;
  color: #004000;
  background-color: #ffd0ff;
}
table { font-size: 15px; }
</style>
</head>

<body>

<h1>Оглавление</h1>
<ul>
<li>Вступление</li>
<li><a href="#f_buf">Форматы буферов</a></li>
<li><a href="#fun">Функции</a><br>
<li><a href="#const">Константы</a><br>
<li><a href="#tabl_e">Таблица экспорта</a></li>
<li><a href="#hist">История</a></li>
</ul>

<h1>Вступление</h1>
<p>Документация к свободной библиотеке <b>buf2d.asm</b>, для <b>ОС Колибри</b>.
 Эта библиотека создана для работы с 2d изображениями.
 С ее помощьью можно создавать буфера с изображениями в памяти, и при необходимости выводить их на экран.
 Изображения можно накладывать одно на другое, поддерживается работа с прозрачными изображениями, есть функция рисования лини пока на этом все.</p>

<p>Последнее обновление библиотеки 29.07.10.</p>

<h1><a name="f_buf">Форматы буферов</a></h1>
<p>Поддерживается 3 формата буферов.
 Каждая функция при работе с буферами может быть расчитана на работу с определенными форматами изображений.</p>

<h4>8 бит</h4>
<p>Сожержит альфа канал <b>a</b> (прозрачность) изображения. На экран не выводится. Используется для созданя 32-битных буферов.</p>
<h4>24 бит</h4>
<p>Данный буфер содержит изображение в формате <b>rgb</b>. Может выводится на экран.</p>
<h4>32 бит</h4>
<p>Содержит прозрачное изображение в формате <b>rgba</b>. На экран не выводится. Используется для наложения изображений.</p>

<h1><a name="fun">Функции</a></h1>

<p>Почти все функции 1-м параметром принимают указатель на структуру буфера,
 из которой могут использоваться параметры, нужные для работы конкретной функции.
 Пример структуры буфера изображения:</p>
<pre>align 4
buf_0:
	dd    0 ;+ 0 указатель на буфер изображения
	dw  100 ;+ 4 отступ слева
	dw   10 ;+ 6 отступ справа
	dd  150 ;+ 8 ширина
	dd  100 ;+12 высота
	dd 0x80 ;+16 фоновый цвет
	db   24 ;+20 бит на пиксель</pre>

<h4>lib_init</h4>
<p>Эта функция получает указатели на функции работы с памятью, вызыватся должна при загрузке библиотеки. Можете использовать макрос <b>@use_library_mem</b>, для ее автоматической настройки.</p>

<h4>buf2d_create</h4>
<p>Создает буфер и чистит его фоновым цветом.</p>

<h4>buf2d_create_f_img</h4>
<p>Создает буфер на основе изображения в формате <b>rgb</b>.</p>

<h4>buf2d_clear</h4>
<p>Чистит буфер фоновым цветом.</p>

<h4>buf2d_draw</h4>
<p>Рисует буфер на экране (работает через системную ф. 7). Рисуются только буфера с глубиной цвета 24 бита.</p>

<h4>buf2d_delete</h4>
<p>Освобождает память занятую изображением буфера.</p>

<h4>buf2d_line</h4>
<p>Рисует в буфере линию с заданным цветом и координатами. Пример использования:</p>
<pre>stdcall [buf2d_line], buf_0, 30,10, 110,70, 0xffff00 ;рисуем линию</pre>
<p>где buf_0 - структура буфера в котором будет рисоваться линия; 30, 10, 110, 70 - координаты линии; 0xffff00 - цвет линии.</p>

<h4>buf2d_circle</h4>
<p>Рисует в буфере окружность с заданным цветом и радиусом. Пример использования:</p>
<pre>stdcall [buf2d_circle], buf_0, 25, 70, 15, 0xff0000</pre>
<p>где buf_0 - структура буфера в котором будет рисоваться окружность; 25, 70 - координаты центра; 15 - радиус; 0xff0000 - цвет.</p>

<h4>buf2d_img_hdiv2</h4>
<p>Сжимает изображение в буфере по высоте в 2 раза, при этом размер самого буфера не уменьшается.</p>

<h4>buf2d_img_wdiv2</h4>
<p>Сжимает изображение в буфере по ширине в 2 раза, при этом размер самого буфера не уменьшается.</p>

<h4>buf2d_conv_24_to_8</h4>
<p>Преобразование буфера из 24-битного в 8-битный.
 При преобразовании указывается какой цвет берать: 0-синий, 1-зеленый, 2-красный.
 Остальные цвета при преобразовании теряются.</p>

<h4>buf2d_conv_24_to_32</h4>
<p>Преобразование буфера из 24-битного в 32-битный.
 При преобразовании указывается также 8-битный буфер, который будет использован для создания альфа канала. Пример:</p>
<pre>stdcall [buf2d_conv_24_to_32],buf_a,buf_b ;делаем буфер rgba 32бит</pre>
<p>До выполнения функции буфер buf_a должен быть 24 битным, а буфер buf_b - 8 битным.
 После выполнения функции буфер buf_a станет 32 битным, буфер buf_b не изменится.</p>

<h4>buf2d_bit_blt</h4>
<p>Рисует в буфере изображение из другого буфера в указанных координатах. Буфер в котором рисут (приемник) должен быть 24 битным, а тот который рисуется (источник) 24 или 32 битным. Если буфер источник 32 битный, то его прозрачность при рисовании не учитывается, для учета прозрачности используется функция <i>buf2d_bit_blt_transp</i>.</p>

<h4>buf2d_bit_blt_transp</h4>
<p>Рисует в буфере изображение из другого буфера в указанных координатах, при этом учитывается прозрачность.
 Буфер который будет нарисован должен быть 32 битным, а тот в котором рисуют 24 битным.</p>

<h4>buf2d_bit_blt_alpha</h4>
<p>Рисует в буфере изображение из другого буфера в указанных координатах, при этом учитывается прозрачность.
 Буфер который будет нарисован должен быть 8 битным, а тот в котором рисуют 24 битным.</p>

<h4>buf2d_cruve_bezier</h4>
<p>Рисует по трем точкам отрезок кривой безье.</p>

<h4>buf2d_convert_text_matrix</h4>
<p>Преобразует матрицу с текстом размером 16*16 в размер 1*256. Необходимо для создания матрицы для рисования текста. Перед использованием данной функции предполагается что есть изображение с полным набором символов размером 16 столбцов на 16 строк, из которого предварительно был создан 8 битный буфер.</p>
<pre>stdcall [buf2d_create_f_img], buf_1,[image_data] ;создаем буфер 24 бит на основе данных изображения
stdcall [buf2d_conv_24_to_8], buf_1,1 ;делаем буфер прозрачности 8 бит
stdcall [buf2d_convert_text_matrix], buf_1</pre>
<p>где buf_1 - структура буфера для формирования текстовой матрицы;
  image_data - данные изображения текстовой матрицы в формате rgb, размером 16*16 символов.</p>

<h4>buf2d_draw_text</h4>
<p>Рисует текст в буфере, используя матрицу с текстом размером 1*256 символов. Пример:</p>
<pre>stdcall [buf2d_draw_text], buf_0, buf_1,some_text,20,10,0x4040ff ;рисуем строку с текстом</pre>
<p>где buf_0 - структура буфера в котором будет рисоваться текст;
  buf_1 - структура буфера с текстовой матрицей в формате 8 бит, размером 1*256 символов;
  some_text - текст, который будет выведен в буфер buf_0.</p>

<h4>buf2d_crop_color</h4>
<p>Обрезание буфера, по указанному цвету. Функция используется для уменьшения памяти, занимаемой буфером. Отрезаются крайние части буфера имеющие одинаковый цвет. Пример:</p>
<pre>stdcall [buf2d_crop_color], buf_0,0xffffff,BUF2D_OPT_CROP_TOP+BUF2D_OPT_CROP_BOTTOM</pre>
<p>где buf_0 - структура буфера который будет обрезан;
  0xffffff - цвет по которому будет обрезаться буфер;
  BUF2D_OPT_CROP_TOP и BUF2D_OPT_CROP_BOTTOM - константы, указывающие с каких сторон обрезать буфер.</p>

<h4>buf2d_offset_h</h4>
<p>Сдвиг изображения в буфере по высоте вверх или вниз.</p>

<h1><a name="const">Константы</a></h1>
<h4>BUF2D_OPT_CROP_TOP equ 1</h4>
<p>Константа для функции buf2d_crop_color, обозначает обрезку буфера сверху</p>
<h4>BUF2D_OPT_CROP_BOTTOM equ 4</h4>
<p>Константа для функции buf2d_crop_color, обозначает обрезку буфера снизу</p>
<h4>BUF2D_OPT_CROP_RIGHT equ 8</h4>
<p>Константа для функции buf2d_crop_color, обозначает обрезку буфера справа</p>

<h1><a name="tabl_e">Таблица экспорта</a></h1>
<p>Пример таблицы экспорта, расчитанной на использование макроса <b>@use_library_mem</b>:</p>
<pre>align 4
import_buf2d_lib:
	dd sz_lib_init
	buf2d_create dd sz_buf2d_create
	buf2d_create_f_img dd sz_buf2d_create_f_img
	buf2d_clear dd sz_buf2d_clear
	buf2d_draw dd sz_buf2d_draw
	buf2d_delete dd sz_buf2d_delete
	buf2d_line dd sz_buf2d_line
	buf2d_circle dd sz_buf2d_circle
	buf2d_img_hdiv2 dd sz_buf2d_img_hdiv2
	buf2d_img_wdiv2 dd sz_buf2d_img_wdiv2
	buf2d_conv_24_to_8 dd sz_buf2d_conv_24_to_8
	buf2d_conv_24_to_32 dd sz_buf2d_conv_24_to_32
	buf2d_bit_blt dd sz_buf2d_bit_blt
	buf2d_bit_blt_transp dd sz_buf2d_bit_blt_transp
	buf2d_bit_blt_alpha dd sz_buf2d_bit_blt_alpha
	buf2d_cruve_bezier dd sz_buf2d_cruve_bezier
	buf2d_convert_text_matrix dd sz_buf2d_convert_text_matrix
	buf2d_draw_text dd sz_buf2d_draw_text
	buf2d_crop_color dd sz_buf2d_crop_color
	buf2d_offset_h dd sz_buf2d_offset_h

	dd 0,0
	sz_lib_init db 'lib_init',0
	sz_buf2d_create db 'buf2d_create',0
	sz_buf2d_create_f_img db 'buf2d_create_f_img',0
	sz_buf2d_clear db 'buf2d_clear',0
	sz_buf2d_draw db 'buf2d_draw',0
	sz_buf2d_delete db 'buf2d_delete',0
	sz_buf2d_line db 'buf2d_line',0
	sz_buf2d_circle db 'buf2d_circle',0
	sz_buf2d_img_hdiv2 db 'buf2d_img_hdiv2',0
	sz_buf2d_img_wdiv2 db 'buf2d_img_wdiv2',0
	sz_buf2d_conv_24_to_8 db 'buf2d_conv_24_to_8',0
	sz_buf2d_conv_24_to_32 db 'buf2d_conv_24_to_32',0
	sz_buf2d_bit_blt db 'buf2d_bit_blt',0
	sz_buf2d_bit_blt_transp db 'buf2d_bit_blt_transp',0
	sz_buf2d_bit_blt_alpha db 'buf2d_bit_blt_alpha',0
	sz_buf2d_cruve_bezier db 'buf2d_cruve_bezier',0
	sz_buf2d_convert_text_matrix db 'buf2d_convert_text_matrix',0
	sz_buf2d_draw_text db 'buf2d_draw_text',0
	sz_buf2d_crop_color db 'buf2d_crop_color',0
	sz_buf2d_offset_h db 'buf2d_offset_h',0</pre>

<h1><a name="hist">История</a></h1>
<p>02.07.10 - самая первая версия библиотеки, 2 примера использования.</p>
<p>06.07.10 - расширены возможности функции buf2d_bit_blt, теперь она может рисовать 32 битные буферы. Добавлены 2 новые функции: buf2d_bit_blt_alpha и buf2d_cruve_bezier. Небольшие изменения в функции buf2d_line.</p>
<p>16.07.10 - исправлено по 2 ошибки в функциях buf2d_img_hdiv2 и buf2d_img_wdiv2, которые могли проявляться при определенных условиях (если размер изображения был кратен 4Кб и др.). Добавлены 2 функции для вывода текста в буфер buf2d_convert_text_matrix и buf2d_draw_text.</p>
<p>19.07.10 - добавлена функция рисования окружности buf2d_circle;
 изменен формат буфера - для ширины и высоты используются 4-х байтные числа вместо 2-х байтных.</p>
<p>29.07.10 - добавлены функции buf2d_crop_color и buf2d_offset_h;
 исправления в функции buf2d_delete.</p>
 </body>
</html>