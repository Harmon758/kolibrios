(*
    Copyright 2016, 2022, 2023 Anton Krotov

    This file is part of fb2read.

    fb2read is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    fb2read is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with fb2read. If not, see <http://www.gnu.org/licenses/>.
*)

MODULE LibImg;

IMPORT SYSTEM, KOSAPI, File, S := Strings;


PROCEDURE [stdcall, "Libimg.obj", ""] img_decode (data, size, options: INTEGER): INTEGER; END;
PROCEDURE [stdcall, "Libimg.obj", ""] img_scale (src, crop_x, crop_y, crop_width, crop_height, dst, scale, inter, param1, param2: INTEGER): INTEGER; END;
PROCEDURE [stdcall, "Libimg.obj", ""] img_destroy (img: INTEGER); END;
PROCEDURE [stdcall, "Libimg.obj", ""] img_convert (src, dst, dst_type, flags, param: INTEGER): INTEGER; END;


PROCEDURE Destroy* (VAR img: INTEGER);
BEGIN
	IF img # 0 THEN
		img_destroy(img);
		img := 0
	END
END Destroy;


PROCEDURE GetInf* (img: INTEGER; VAR sizeX, sizeY, data: INTEGER);
BEGIN
	SYSTEM.GET(img +  4, sizeX);
	SYSTEM.GET(img +  8, sizeY);
	SYSTEM.GET(img + 24, data)
END GetInf;


PROCEDURE GetImg* (ptr, size, Width: INTEGER; VAR sizeY: INTEGER): INTEGER;
VAR
	image_data, dst, x, y, type: INTEGER;
BEGIN
	image_data := img_decode(ptr, size, 0);
	IF image_data # 0 THEN
		SYSTEM.GET(image_data + 4, x);
		SYSTEM.GET(image_data + 8, y);
		SYSTEM.GET(image_data + 20, type);
		IF type # 3 THEN
			dst := img_convert(image_data, 0, 3, 0, 0);
			img_destroy(image_data);
			image_data := dst
		END;
		IF (x > Width) & (image_data # 0) THEN
			dst := img_scale(image_data, 0, 0, x, y, 0, 3, 1, Width, (y * Width) DIV x);
			img_destroy(image_data);
			image_data := dst
		END;
		IF image_data # 0 THEN
			SYSTEM.GET(image_data +  8, sizeY)
		END
	END
	RETURN image_data
END GetImg;


PROCEDURE LoadFromFile* (fileName: S.STRING; width: INTEGER; VAR height: INTEGER): INTEGER;
VAR
	size, res, ptr: INTEGER;
BEGIN
	res := 0;
	ptr := File.Load(fileName, size);
	IF ptr # 0 THEN
		res := GetImg(ptr, size, width, height);
		ptr := KOSAPI.free(ptr)
	END
	RETURN res
END LoadFromFile;


END LibImg.
