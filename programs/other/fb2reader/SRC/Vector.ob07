(*
    Copyright 2016 Anton Krotov

    This file is part of fb2read.

    fb2read is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    fb2read is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with fb2read. If not, see <http://www.gnu.org/licenses/>.
*)

MODULE Vector;


IMPORT sys := SYSTEM, K := KOSAPI;


TYPE

  DESC_VECTOR = RECORD

    data   : INTEGER;
    count* : INTEGER;
    size   : INTEGER

  END;

  VECTOR* = POINTER TO DESC_VECTOR;

  ANYREC* = RECORD END;

  ANYPTR* = POINTER TO ANYREC;

  DESTRUCTOR* = PROCEDURE (VAR ptr: ANYPTR);


PROCEDURE push* (vector: VECTOR; value: ANYPTR);
BEGIN
  IF vector.count = vector.size THEN
    vector.data := K.realloc(vector.data, (vector.size + 1024) * 4);
    vector.size := vector.size + 1024
  END;
  sys.PUT(vector.data + vector.count * 4, value);
  INC(vector.count)
END push;


PROCEDURE get* (vector: VECTOR; idx: INTEGER): ANYPTR;
VAR res: ANYPTR;
BEGIN
  ASSERT( (0 <= idx) & (idx < vector.count) );
  sys.GET(vector.data + idx * 4, res)
  RETURN res
END get;


PROCEDURE put* (vector: VECTOR; idx: INTEGER; value: ANYPTR);
BEGIN
  ASSERT( (0 <= idx) & (idx < vector.count) );
  sys.PUT(vector.data + idx * 4, value)
END put;


PROCEDURE create* (size: INTEGER): VECTOR;
VAR vector: VECTOR;
BEGIN
  NEW(vector);
  vector.data  := K.malloc(4 * size);
  vector.size  := size;
  vector.count := 0
  RETURN vector
END create;


PROCEDURE def_destructor (VAR any: ANYPTR);
BEGIN
  DISPOSE(any)
END def_destructor;


PROCEDURE destroy* (VAR vector: VECTOR; destructor: DESTRUCTOR);
VAR i: INTEGER;
    any: ANYPTR;
BEGIN
  IF destructor = NIL THEN
    destructor := def_destructor
  END;
  FOR i := 0 TO vector.count - 1 DO
    any := get(vector, i);
    destructor(any)
  END;
  vector.data := K.free(vector.data);
  DISPOSE(vector)
END destroy;


END Vector.
